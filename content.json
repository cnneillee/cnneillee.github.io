[{"title":"Ubuntu 添加用户到 sudoer","date":"2017-06-14T08:27:29.000Z","path":"2017/06/14/others/Ubuntu添加用户到sudoer/","text":"一、概述新建用户后，我们可能需要该用户能够使用一些越权的东西。sudo命令能够暂时提升该用户的权限到root，但是前提是要求该用户存在与 sudoer list 中。 sudoers 存储在 /etc/sudoers 文件中。 二、操作方法2.1 进入 root 用户修改 /etc/sudoers 文件需要 root 权限，因此需要你进入到 root 用户下（su 命令为登录 root 用户）。 兴许你也能够在某个 sudoer 的用户下，使用 sudo vi /etc/sudoers 命令去修改该文件。 2.2 获取 /etc/sudoers 文件的写权限如果能够得到写权限，那么可以直接进行下一步。 如果在 root 模式下，还是没有该文件的写权限的话，可以使用 “chmod u+w /etc/sudoers” 命令添加文件的写权限。 2.3 编辑 /etc/sudoers 文件&quot;root ALL=(ALL) ALL&quot; 在起下面添加 &quot;xxx ALL=(ALL) ALL&quot; (这里的 xxx 是你的用户名)，然后保存退出。 2.4 撤销 /etc/sudoers 文件的写权限执行命令 chmod u-w /etc/sudoers","tags":[{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"}]},{"title":"Redis 监控方案","date":"2017-06-14T06:27:29.000Z","path":"2017/06/14/database/Redis监控方案/","text":"一、概述近些天，遇到Redis监控的应用场景，从网上搜罗了一些文章，做了整理。 二、工具列表2.1 redis-faina见参考文章1 2.2 redis-live见参考文章1 2.3 redis-stat见参考文章1 2.4 redis-monitor见参考文章1 三、实践试用了里面的几款工具。占坑待续 参考文章 Redis监控方案-https://my.oschina.net/guol/blog/182265","tags":[{"name":"database","slug":"database","permalink":"http://cnneillee.github.io/tags/database/"},{"name":"redis","slug":"redis","permalink":"http://cnneillee.github.io/tags/redis/"},{"name":"monitoring","slug":"monitoring","permalink":"http://cnneillee.github.io/tags/monitoring/"}]},{"title":"Java 和 Python 解析动态 key 的 JSON 数据","date":"2017-06-14T06:27:29.000Z","path":"2017/06/14/java/Java和Python解析动态key的JSON数据/","text":"一、概述解析JSON过程中，什么情况都可能遇到。遇到特殊的情况，不会怎么办？肯定不是设计的问题，一定是你的姿势不对。 有这样一种JSON需要解析：123456789101112131415&#123; &quot;b3444533f6544&quot;: &#123; &quot;path&quot;: &quot;path&quot;, &quot;at&quot;: 1490100417, &quot;data&quot;: &#123; &quot;datastream&quot;: [ &#123; &quot;id&quot;: &quot;BX_V_XW&quot;, &quot;value&quot;: 400.75 &#125; ], &quot;at&quot;: 1490100417 &#125; &#125;&#125; 其中，第二行的 &quot;b3444533f6544&quot; 不定。 二、解决方案2.1 Python 方案1234dic = json.loads(data)key = dic.keys()[0]timestamp = dic[key][&apos;data&apos;][&apos;at&apos;]streamArr = dic[key][&apos;data&apos;][&apos;datastream&apos;] 2.2 Java 方案参考自 segmentfault.com - 如何解析key为动态的json1234LinkedHashMap&lt;String, String&gt; jsonMap = JSON.parseObject(jsonStr, new TypeReference&lt;LinkedHashMap&lt;String, String&gt;&gt;()&#123;&#125;);String key = entry.getKey();String value = entry.getValue();// 再使用其他方式对 value 进行解析。","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"json","slug":"json","permalink":"http://cnneillee.github.io/tags/json/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"Kylo ���Ӽ�","date":"2017-06-14T03:27:29.000Z","path":"2017/06/14/bigdata/Kylo入坑记/","text":"һ������ Kylo����Ϊһ������ Spark �� NiFi �Ŀ�Դ���ݺ����ſ��ܣ����������ݺ���ȡ����������֪�ͼ���֧�ֵ��������⡣Kylo �����ݺ��ĺܶ๦���Զ������������ݽ��롢׼�����������֡�Profiling �͹����ȵȡ�Kylo �ṩ�˷���ҵ��������Ա˼·�� GUI �����Լ� IT ��Ӫ�����ݿ�ѧ��ģ�顣 ͨ�� Kylo �� GUI ���棬ҵ����Ա���԰������ǹ��ĵķ�ʽ���������ݣ�����: ������ ��Դ���������ݼ��ء�����Ԥ������ת����������Ŀ��ϵͳ����Ϊ����Ҫ�����κδ��룬Ҳ����Ҫ���� IT ���ţ�ҵ����Ա�����˶���Ŀ����ȫ�ƿأ��Ӷ������ļ�����������Ŀ������ʱ�䡣 �����м������������ݿ�ѧ�ҡ����ݹܼҼ� IT ��Ӫ��Ա��˵��Kylo �ṩ����Ԫ���ݹ��������ʵ����ݼ��ؼ����� Goolgle �ļ�������������Ϊҵ��������Ա���費ͬ��Ȩ�ޡ��ṩ��ʱ���õ�ģ�壬��������ʹ�á����ز��������ݺ��ķ��� SLA�� ��Ȼ�������鵤(�ر��Ƕ�����Щӵ�л����������ݺ�����ҵ��˵), Kylo ������ Kylo �Ĳ�Ʒ���Ƿǳ��������ģ���Ϊ���ü�����Ա��ҵ����Ա���ܹ����������ݣ���ƽ�˴����ݼ�����������ʹ��֮���ĺ蹵�� ҵ����Ա���Ը����Ļ������ݶ��죬IT ��Ա������רע�ڹ��̼����ݼܹ����⣬�����Ǳ�д���롣From zhuanlan.zhihu.com Ϊ��ҵ�������ݷ�������: ���ڿ�Դ���ݺ�����ϵͳKylo��ҵ������ ������װ2.1 ˵��������http://kylo.readthedocs.io/en/latest/installation/KyloSetupWizardDeploymentGuide.htmlhttp://kylo.readthedocs.io/en/latest/installation/KyloManualDeploymentGuide.html �ο����ģ�http://www.treselle.com/blog/kylo-setup-for-data-lake-management/ 2.2 �������̺ܼ�������������Ҳѧϰ���˺ܶ�����֪ʶ�� ���ڹٷ������ṩ rpm ���������Գ��Խ� rpm ��ת���� deb �������߱���Դ���õ� rpm �� deb ���� �ڰ�װ�����У�����ʹ�� offline �ķ�ʽ�����õķ�ʽ�����Ƚ����������������ٸ��ݽű���ָ��ȥ�������ã�Ҳ�����޸Ľű������Զ������á� 2.3 С��������֮ǰʹ�ù� nifi ��һ����Ӧ�ã���ô���� kylo ����һ�����ѵ����顣���� nifi ��kylo Ҳ�ṩ��һ�� ui ���潨�����û���ϵͳ�Ľ����� ������ nifi ʹ�� Processor ���ⲿ�������������ӣ� Kylo ��ѡ���˼��ɲ��ַ�����ʹ���Լ���Ϊ׳�����ڰ�װ kylo ʱ���㱻Ҫ����װ���������� Kylo Applications - /opt/kylo Java 8 - /opt/java/current NiFi - /opt/nifi/current ActiveMQ - /opt/activemq Elasticsearch - RPM installation default location�������ˣ� MySQL ���ѿ�����kylo ������ NiFi ʵ�����Ƕ� NiFi ����չ������ Elasticsearch ����ȫ������������ ActiveMQ ������Ϣͨ�ţ�RPC��…… ��������3.1 �����ļ������ļ�λ�ã� kylo-services��/opt/kylo/kylo-services/conf kylo-ui��/opt/kylo/kylo-ui/conf 3.2 ��־�ļ���־�ļ�λ�ã� kylo-services��/var/log/kylo-services kylo-ui��/var/log/kylo-ui 3.3 Kylo �����ļ��޸������ļ�һ���޸ĺ�����Ҫ���� Kylo ����ʹ���޸ĵ�������Ч�� ��һ���� nifi һ�����ԣ���������Ҫ�ȴ��ϳ���һ��ʱ�䣬��ʵ��������Լ�� 10 �������ҡ� �ġ��� NiFi ������4.0 kylo �е� nifiKylo ͨ�� NiFi REST API ʵ�ֶ� NiFi ��һЩ���������� 4.1 nifi ��ַnifi �ĵ�ַ�� /opt/kylo/kylo-services/conf/application.properties �н����޸� 12nifi.rest.host=192.168.203.12 # ǧ��ע�⣬���ﲻ��ʹ�� localhostnifi.rest.port=8080 4.2 �������쳣1The Reporting task does not exist. A com.think big analytics.nifi.provenance.reporting.KyloProvenanceEvent Reporting Task needs to be RUNNING to process jobs in Kylo ����ԭ����The reporting task sends events about what is happening in NiFi back to Kylo for reporting��from https://groups.google.com/forum/#!topic/kylo-community/dACLQHjniRU����������http://kylo.readthedocs.io/en/latest/how-to-guides/NiFiKyloProvenanceReportingTask.html","tags":[{"name":"kylo","slug":"kylo","permalink":"http://cnneillee.github.io/tags/kylo/"}]},{"title":"NiFi REST API ��ʹ��","date":"2017-06-14T02:27:29.000Z","path":"2017/06/14/bigdata/NiFi-REST-API的使用/","text":"һ������Ϊ�����û�ʹ�� NiFi ���ж��ο�����NiFi Ϊ�������ṩ�� NIFI REST API�� ���� API ����ϸ���ܣ����μ����� NIFI REST API������������һЩע����Сϸ�ڡ� ����ע������2.1 REST API �� URLAPI �ĵ��У�ֻ������ÿ�� API ������·������û�и�������������ַ�� URL ˵���� URL ��ַӦ��Ϊ��http://[ip]:[port]/nifi-api[path] �� GET /flow/about Retrieves details about this NiFi to put in the About dialog Ϊ���� url Ϊ��http://192.168.203.12:8080/nifi-api/flow/about POSTMAN ����ʾ���� 2.2 ʹ��ʾ��ռ�Ӵ���","tags":[{"name":"api","slug":"api","permalink":"http://cnneillee.github.io/tags/api/"},{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』资源 —— 资料汇总","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』资源——资料汇总/","text":"一、概述由于 NiFi 是一个比较新的开源项目，国内的相关资料少之又少。 加之，大家都知道，国内的那么些个教程，原创都只是停留在初级使用阶段，没有更多深入的介绍。 再者，其余的文章不是东抄抄就是西抄抄，有的是翻译国外的资料，蹩脚得很，还不如直接看英文原文呢。 二、资源列表2.1 官方文档官网：nifi.apache.org官网文档：nifi.apache.org/docs 2.2 国外博客 Matt Burgess：此人出了一系列的 NiFi ExecuteScript 的文章 —— NiFi ExecuteScript Cookbookfunnifi.blogspot.com 官方博客：blogs.apache.org/nifi hortonworks：hortonworks.com/blog/category/nifi stackoverflow：stackoverflow.com/questions/tagged/apache-nifi 2.3 国内博客暂时还未发现国内关于 NiFi 的优质博客，如有，请推荐。 2.4 NiFi Libshttps://github.com/jfrazee/awesome-nifiryanleary/nifi-redis - NiFi Processors for pulling from Redis Nifi - PutRedishttps://github.com/qntfy/nifi-redis","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』入门 —— 下载、安装与简单使用","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』入门——下载、安装与简单使用/","text":"一、概述“光说不练假把式。” 官网上的介绍多少让人迷迷糊糊的，各种高大上的词语仿佛让 NiFi 离我们越来越远。 实践是最好的老师。那就让我们试用一下 NiFi 吧！ 二、安装由于我的整个学习和使用过程都是在 Linux 下完成，所以，整个教程也是面向 Linux 用户的。 其他系统下的使用方法类似，如有其他系统的用户，那么还请有选择性的进行参考本教程。 NiFi 是免安装地，仅需从官网下载压缩包，然后解压，旋即完成了整个安装过程。 官网下载压缩包：nifi.apache.org/download，如何压缩包的选择参考文章 Apache NiFi 二进制包和源码包安装介绍 tar -xzf nifi-x.x.x-bin.tar.gz 命令解压 ，关于解命令烦请参考文章 Linux 下tar.gz、tar、bz2、zip 等解压缩、压缩命令小结 解压结束即完成整个安装过程 三、配置我们需要对 NiFi 的配置文件（存放在 [nifi_install_location]/config ）进行个性化配置。 由于目前我们只是简单的上手，所以大部分配置项都选择了默认的配置。我们仅对 NiFi 进行基本的配置。 nifi.properties 文件针对的是 NiFi 的配置，仅需做如下修改： 12345678# web properties #nifi.web.war.directory=./libnifi.web.http.host=192.168.203.7 # 设置成本机的 ipnifi.web.http.port=9191nifi.web.https.host=nifi.web.https.port=nifi.web.jetty.working.directory=./work/jettynifi.web.jetty.threads=200 其他文件在本教程场景下无需修改。 四、启动通过 [nifi_install_location]/bin/nifi.sh 进行 start、restart、stop、status 等操作。 ./bin/nifi.sh start 启动 nifi。 浏览器中访问 192.168.203.7:9191/nifi（此处的ip与端口同你的配置项相关） 即可出现 nifi 的操作界面 由于 nifi 加载配置信息较慢，稍作等待。 五、简单使用设定一个这样的场景： 统计每次收到的消息中，单词出现的频次。WORD COUNT!!! 5.0 先修：操作面板与 Processor熟悉操作面板的各个组件。如何添加、启动、停止、删除一个 Processor，如何对 Processor 进行基本配置？ 对于上述问题，请自行在界面上进行尝试和练习。 官网上也提供了一些 Youtube 上的教学视频，请参考这里 nifi.apache.org/videos 5.1 涉及到的组件 GenerateFlowFile ExecuteScript PutFile 5.2 部署组件从 Processor 拖取上述组件到操作面板上，依照描述的数据流动方式将组件串起。 串联组件时，有时需要对组件进行关系的选择。即选择上一组件分发的正确/错误消息分发到下一组件。 同时，末端的组件你需要在它的 setting pannel 指定自己处理 Success、Failure。 对 Processor 的配置如下： GenerateFlowFile Profile -&gt; Custom Text 填入需要统计单词频次的文章/内容如： 1Apache NiFi supports powerful and scalable directed graphs of data routing, transformation, and system mediation logic. Some of the high-level capabilities and objectives of Apache NiFi include: Scheduling -&gt; Run Duration 调节至 2s，放缓数据生成的速度 ExecuteScript Profile -&gt; ScriptEngine 选择 Groovy ScriptBody 填入如下 Groovy 代码：123456789101112131415161718192021222324252627282930# Code from http://funnifi.blogspot.com/2016/02/executescript-processor-replacing-flow.htmlimport org.apache.commons.io.IOUtilsimport java.nio.charset.*def flowFile = session.get()if(!flowFile) returnflowFile = session.write(flowFile, &#123;inputStream, outputStream -&gt; def wordCount = [:] def tellTaleHeart = IOUtils.toString(inputStream, StandardCharsets.UTF_8) def words = tellTaleHeart.split(/(!|\\?|-|\\.|\\&quot;|:|;|,|\\s)+/)*.toLowerCase() words.each &#123; word -&gt; def currentWordCount = wordCount.get(word) if(!currentWordCount) &#123; wordCount.put(word, 1) &#125; else &#123; wordCount.put(word, currentWordCount + 1) &#125; &#125; def outputMapString = wordCount.inject(&quot;&quot;, &#123;k,v -&gt; k += &quot;$&#123;v.key&#125;: $&#123;v.value&#125;\\n&quot;&#125;) outputStream.write(outputMapString.getBytes(StandardCharsets.UTF_8))&#125; as StreamCallback)flowFile = session.putAttribute(flowFile, &apos;filename&apos;, &apos;telltale_heart_wordcount&apos;)session.transfer(flowFile, REL_SUCCESS) PutFile Profile -&gt; Directory 填入存放结果的文件夹，如 /home/lbh/logs/result 启动各个 Processor 后，就能清晰地看到数据在 Processors 之间流动。 查看 PutFile 中设置的文件存放目录，能够看到存放着统计结果的文件 telltale_heart_wordcount 打开 telltale_heart_wordcount 文件，查看到统计结果如下：","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』简介","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』简介/","text":"『NiFi 学习之路』简介 『NiFi 学习之路』入门 —— 下载、安装与简单使用 『NiFi 学习之路』资源 —— 资料汇总 『NiFi 学习之路』把握 —— 架构及主要组件 『NiFi 学习之路』使用 —— 主要组件的使用 『NiFi 学习之路』自定义 —— 组件的自定义及使用 『NiFi 学习之路』感悟 —— 我对 NiFi 的理解 NiFi 这个东西到底有哪些应用场景？这些功能特性是如何在使用过程中发挥作用的？这些功能特性的底层实现是如何的？ 一、概述2017 年的 2 月初到写就这篇文章的 5 月 11 日，藕断丝连地跟 NiFi 打了近 3 个月的交道。从最初的屁事儿不懂，到现在的略知皮毛，期间的过程可谓十分“有趣”。 2015年7月20日，Apache 基金会通过其博客宣布Apache NiFi顺利孵化完成称为Apache的顶级项目之一。 由于 NiFi 开源时间较短，再加之国内对 NiFi 应用不多。中文的相关文章多停留在对 NiFi 的泛泛而谈，没有系统且深入的对 NiFi 进行介绍。唯一能够参考的也只有官网和 google 了。因此，学习之路还是蛮吃力的。 本人将这一艰辛的学习之路，整理成文，供各位参考。如有错误，烦请批评指正。 二、NiFi 功能Apache NiFi 是一个易于使用、功能强大而且可靠的数据处理和分发系统。Apache NiFi 是为数据流设计。它支持高度可配置的指示图的数据路由、转换和系统中介逻辑。 来自 Apache NiFi 详细介绍/OSChina 的介绍，内容翻译自 NiFi 官网 关键特性包括: 基于web的用户界面无缝体验设计、控制和监视 高度可配置的数据丢失容错和保证交付低延迟和高吞吐量动态优先级流可以在运行时修改背压 Back presure 数据来源从始至终跟踪数据流 为扩展设计构建自己数据处理器支持快速开发和有效的测试 安全SSL,SSH,HTTPS加密内容,等等……可插拔的基于角色的验证/授权","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 节点本地流与集群流不一致导致集群加入失败』问题解决","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi节点本地流与集群流不一致导致集群加入失败』问题解决/","text":"一、概述在某些极端情况下，某些 NiFi 节点信息会由于用户强行 disconnect from cluster ，而出现 local flow 与 cluster 的 flow 不同步的问题。 此后，该问题节点再也无法正常同 cluster 建立连接，并且频繁报错：Failed to connect node to cluster because local flow is different than cluster flow。 二、问题解决关于此问题，一个邮箱列表对此话题做了较为清晰的解答。Failed to connect node to cluster because local flow is different than cluster flow.具体解决措施为; 删除该问题节点的一个存放 local flow 元信息的文件，文件位置为[nifi install location]/conf/flow.xml.gz 重启该节点，随后集群后自动与该节点建立联系，由于该节点的 flow.xml.gz 丢失，问题节点会默认接受集群的 flow","tags":[{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"sollution","slug":"sollution","permalink":"http://cnneillee.github.io/tags/sollution/"},{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』把握 —— 架构及主要组件","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』把握——架构及主要部件/","text":"一、概述通过前面几篇文章的学习，相信你对 NiFi 有了一个基础性的了解。 数据处理和分发系统 是什么概念？ NiFi 系统中数据的传递方式是怎样的？ NiFi 的重要 Processor 有哪些？ Processor 间是以何种方式进行协作的？ 上述问题对于阅读并练习了前几章内容的你来说，应该都不难理解。 那么对于更加深层次的问题诸如：各个 Processor 是如何运行的？ExecuteScript 是如何对脚本初始化的？整个系统是如何实现对数据进行存储、分发和处理的？应该更能勾起你的兴趣。 本文，就尝试从架构的简单剖析给您建立起 NiFi 的进一步的理解。 二、核心概念http://nifi.apache.org/docs/nifi-docs/html/overview.html#the-core-concepts-of-nifiNiFi’s fundamental design concepts closely relate to the main ideas of Flow Based Programming [fbp]. Here are some of the main NiFi concepts and how they map to FBP: NiFi Term FBP Term DescriptionFlowFileInformation PacketA FlowFile represents each object moving through the system and for each one, NiFi keeps track of a map of key/value pair attribute strings and its associated content of zero or more bytes.FlowFile ProcessorBlack BoxProcessors actually perform the work. In [eip] terms a processor is doing some combination of data routing, transformation, or mediation between systems. Processors have access to attributes of a given FlowFile and its content stream. Processors can operate on zero or more FlowFiles in a given unit of work and either commit that work or rollback.ConnectionBounded BufferConnections provide the actual linkage between processors. These act as queues and allow various processes to interact at differing rates. These queues can be prioritized dynamically and can have upper bounds on load, which enable back pressure.Flow ControllerSchedulerThe Flow Controller maintains the knowledge of how processes connect and manages the threads and allocations thereof which all processes use. The Flow Controller acts as the broker facilitating the exchange of FlowFiles between processors.Process GroupsubnetA Process Group is a specific set of processes and their connections, which can receive data via input ports and send data out via output ports. In this manner, process groups allow creation of entirely new components simply by composition of other components.This design model, also similar to [seda], provides many beneficial consequences that help NiFi to be a very effective platform for building powerful and scalable dataflows. A few of these benefits include: Lends well to visual creation and management of directed graphs of processors Is inherently asynchronous which allows for very high throughput and natural buffering even as processing and flow rates fluctuate Provides a highly concurrent model without a developer having to worry about the typical complexities of concurrency Promotes the development of cohesive and loosely coupled components which can then be reused in other contexts and promotes testable units The resource constrained connections make critical functions such as back-pressure and pressure release very natural and intuitive Error handling becomes as natural as the happy-path rather than a coarse grained catch-all The points at which data enters and exits the system as well as how it flows through are well understood and easily tracked 三、NiFi 架构 图片来源：http://nifi.apache.org/docs.html 根据上面的架构图可知，NiFi 有如下主要部件：（我就直接粘贴官网的介绍了，因为我觉得官网说得已经很详细了～翻译起来反倒更难理解） WebServerThe purpose of the web server is to host NiFi’s HTTP-based command and control API. Flow ControllerThe flow controller is the brains of the operation. It provides threads for extensions to run on, and manages the schedule of when extensions receive resources to execute. ExtensionsThere are various types of NiFi extensions which are described in other documents. The key point here is that extensions operate and execute within the JVM. FlowFile RepositoryThe FlowFile Repository is where NiFi keeps track of the state of what it knows about a given FlowFile that is presently active in the flow. The implementation of the repository is pluggable. The default approach is a persistent Write-Ahead Log located on a specified disk partition. Content RepositoryThe Content Repository is where the actual content bytes of a given FlowFile live. The implementation of the repository is pluggable. The default approach is a fairly simple mechanism, which stores blocks of data in the file system. More than one file system storage location can be specified so as to get different physical partitions engaged to reduce contention on any single volume. Provenance RepositoryThe Provenance Repository is where all provenance event data is stored. The repository construct is pluggable with the default implementation being to use one or more physical disk volumes. Within each location event data is indexed and searchable. Starting with the NiFi 1.0 release, a Zero-Master Clustering paradigm is employed. Each node in a NiFi cluster performs the same tasks on the data, but each operates on a different set of data. Apache ZooKeeper elects a single node as the Cluster Coordinator, and failover is handled automatically by ZooKeeper. All cluster nodes report heartbeat and status information to the Cluster Coordinator. The Cluster Coordinator is responsible for disconnecting and connecting nodes. Additionally, every cluster has one Primary Node, also elected by ZooKeeper. As a DataFlow manager, you can interact with the NiFi cluster through the user interface (UI) of any node. Any change you make is replicated to all nodes in the cluster, allowing for multiple entry points.","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』使用 —— 主要组件的使用","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』使用——主要组件的使用/","text":"一、概述大部分 NiFi 使用者都是通过 NiFi 的 Processor 来实现自己的业务的。因此，我也主要就 NiFi 官方提供的 Porcessor 进行介绍。 二、Processor如果你没有修改 Processor 的存放目录的话，Processor 被存放在 [nifi_install_location]/libs 目录下，NiFi 被启动时，都会将该目录下的组件加载到系统中，供用户使用。 这里我主要对我使用的一些 Processor 进行介绍。http://nifi.apache.org/docs/nifi-docs/ 占坑待续","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 自定义 Processor 无法获取到 Logger』问题解决","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi自定义Processor无法获取到Logger』问题解决/","text":"一、概述自定义的 Processor 继承了 AbstractProcessor，而 AbstractProcessor 继承了 AbstractSessionFactoryProcessor ，getLogger() 方法位于 AbstractSessionFactoryProcessor 类中。123protected final ProcessorLog getLogger() &#123; return this.logger;&#125; 二、问题解决该问题出现的原因是随着版本的更新， NiFi API 弃用了部分类。在早期版本中，存在 ProcessorLog，而在最新版本的 API 里， ProcessorLog 取而代之。","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"『NiFi 学习之路』自定义 —— 组件的自定义及使用","date":"2017-06-13T14:23:36.000Z","path":"2017/06/13/bigdata/『NiFi学习之路』自定义——组件的自定义及使用/","text":"一、概述许多业务仅仅使用官方提供的组件不能够满足性能上的需求，往往要通过高度可定制的组件来完成特定的业务需求。 而 NiFi 提供了自定义组件的这种方式。 二、自定义 Processorhttp://www.nifi.rocks/developing-a-custom-apache-nifi-processor-json/ 占坑待续 三、Debug Processor目前似乎没有较好的方式，有一个邮件列表就此话题进行了探讨。Getting started developing/debugging Nifi processors【hortonworks】Is there a way to debug a custom NiFi process that is running inside the dataflow?","tags":[{"name":"nifi","slug":"nifi","permalink":"http://cnneillee.github.io/tags/nifi/"}]},{"title":"TabLayout与ViewPager同步后Tab的标题不显示","date":"2017-06-13T08:20:29.000Z","path":"2017/06/13/android/TabLayout与ViewPager同步后Tab的标题不显示/","text":"一、概述1.1 问题描述TabLayout+ViewPager后，TabLayout的TabItem不显示的问题： 1.2 截图 二、结论 mTabs.setupWithViewPager(mViewPager); 语句的功能是： 将 TabLayout、ViewPager 的监听事件同步 对 TabLayout 的适配器进行重置 对 TabLayout 的 TabItem 进行重置 从 ViewPager 的 Adapter 中读取到每一页的标题，并为之创建 TabItem 添加到 TabLayout 中 解决方案是：重写在 mViewPager 的 Adapter 中的如下方法，将每页的 Title 设置好：12345678910111213141516mViewPager.setAdapter(new FragmentPagerAdapter(getSupportFragmentManager()) &#123; @Override public Fragment getItem(int position) &#123; return mFragmentList.get(position); &#125; @Override public int getCount() &#123; return mFragmentList.size(); &#125; @Override public CharSequence getPageTitle(int position) &#123; return mTitle[position]; &#125;&#125;); 三、问题探究3.1 设置的代码1234567891011121314mFragmentList.add(longFragment);mFragmentList.add(shortFragment);mViewPager.setAdapter(new FragmentPagerAdapter(getSupportFragmentManager()) &#123; @Override public Fragment getItem(int position) &#123; return mFragmentList.get(position); &#125; @Override public int getCount() &#123; return mFragmentList.size(); &#125;&#125;);mTabs.setupWithViewPager(mViewPager); 上面是非常常见的一段代码，主要逻辑是，将承载两个Fragment的ViewPager与TabLayout同步起来。其中，核心语句是：1mTabs.setupWithViewPager(mViewPager); 3.2 查看 TabLayout 的相关源码进入源码查看到：12345678910111213141516171819202122232425262728293031323334public void setupWithViewPager(@Nullable final ViewPager viewPager) &#123; if (mViewPager != null &amp;&amp; mPageChangeListener != null) &#123; // If we&apos;ve already been setup with a ViewPager, remove us from it mViewPager.removeOnPageChangeListener(mPageChangeListener); &#125; if (viewPager != null) &#123; final PagerAdapter adapter = viewPager.getAdapter(); if (adapter == null) &#123; throw new IllegalArgumentException(&quot;ViewPager does not have a PagerAdapter set&quot;); &#125; mViewPager = viewPager; // Add our custom OnPageChangeListener to the ViewPager if (mPageChangeListener == null) &#123; mPageChangeListener = new TabLayoutOnPageChangeListener(this); &#125; mPageChangeListener.reset(); viewPager.addOnPageChangeListener(mPageChangeListener); // Now we&apos;ll add a tab selected listener to set ViewPager&apos;s current item setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(viewPager)); // Now we&apos;ll populate ourselves from the pager adapter setPagerAdapter(adapter, true); &#125; else &#123; // We&apos;ve been given a null ViewPager so we need to clear out the internal state, // listeners and observers mViewPager = null; setOnTabSelectedListener(null); setPagerAdapter(null, true); &#125; &#125; 也比较明了，无非是先做一系列的判断，然后修改 TabLayout与ViewPager的各种监听事件。 进入 setPagerAdapter 查看到如下方法：12345678910111213141516171819private void setPagerAdapter(@Nullable final PagerAdapter adapter, final boolean addObserver) &#123; if (mPagerAdapter != null &amp;&amp; mPagerAdapterObserver != null) &#123; // If we already have a PagerAdapter, unregister our observer mPagerAdapter.unregisterDataSetObserver(mPagerAdapterObserver); &#125; mPagerAdapter = adapter; if (addObserver &amp;&amp; adapter != null) &#123; // Register our observer on the new adapter if (mPagerAdapterObserver == null) &#123; mPagerAdapterObserver = new PagerAdapterObserver(); &#125; adapter.registerDataSetObserver(mPagerAdapterObserver); &#125; // Finally make sure we reflect the new adapter populateFromPagerAdapter(); &#125; 该方法的主要功能是设置TabLayout的适配器，populateFromPagerAdapter();方法引人注目。 123456789101112131415161718192021private void populateFromPagerAdapter() &#123; removeAllTabs(); if (mPagerAdapter != null) &#123; final int adapterCount = mPagerAdapter.getCount(); for (int i = 0; i &lt; adapterCount; i++) &#123; // 从 PagerAdapter 中获取到标题，并新建 Tab 加入到空的 TabLayout 中 addTab(newTab().setText(mPagerAdapter.getPageTitle(i)), false); &#125; // Make sure we reflect the currently set ViewPager item if (mViewPager != null &amp;&amp; adapterCount &gt; 0) &#123; final int curItem = mViewPager.getCurrentItem(); if (curItem != getSelectedTabPosition() &amp;&amp; curItem &lt; getTabCount()) &#123; selectTab(getTabAt(curItem)); &#125; &#125; &#125; else &#123; removeAllTabs(); &#125; &#125; 该方法中removeAllTabs();将所有的Tabs移除了，找到问题的关键！同时，addTab(newTab().setText(mPagerAdapter.getPageTitle(i)), false);给了我们答案。 3.4 跳转到 PagerAdapter 的源码再仔细看看 getPageTitle 这个方法：123public CharSequence getPageTitle(int position) &#123; return null; &#125; 所以，知道为什么为空了吧！ 3.4 结论综上，mTabs.setupWithViewPager(mViewPager);语句的功能是： 将 TabLayout、ViewPager 的监听事件同步 对 TabLayout 的适配器进行重置 对 TabLayout 的 TabItem 进行重置 从 ViewPager 的 Adapter 中读取到每一页的标题，并为之创建 TabItem 添加到 TabLayout 中 3.5 解决方案重写 getPageTitle 方法：12345678910111213141516mViewPager.setAdapter(new FragmentPagerAdapter(getSupportFragmentManager()) &#123; @Override public Fragment getItem(int position) &#123; return mFragmentList.get(position); &#125; @Override public int getCount() &#123; return mFragmentList.size(); &#125; @Override public CharSequence getPageTitle(int position) &#123; return mTitle[position]; &#125;&#125;);","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"exception","slug":"exception","permalink":"http://cnneillee.github.io/tags/exception/"}]},{"title":"Word 为标题设置段前段后间距设置与异常","date":"2017-06-13T08:05:50.000Z","path":"2017/06/13/basic/Word为标题设置段前段后间距设置与异常/","text":"一、概述在进行Word文档写作时，常常要求我们对（节）标题设置段前段后间距。例如：123456（2）按照标题的不同，分别采用不同的段前段后间距： 标题级别 段前段后间距 章标题 30磅 一级节标题 18磅 二级节标题 12磅 三级节标题 6磅 做法为：选中需要设置的文本，点击鼠标右键，段落-&gt;缩进与间距-&gt;间距-&gt;段前/段后 二、异常情况有时，会遇到异常。比如：当该（节）标题位于一页的第一行，那么设置的段前间距可能就不生效了。如下图所示： 三、解决方案选中需要设置的文本，点击鼠标右键，段落-&gt;换行和分页-&gt;勾选段前分页","tags":[{"name":"office","slug":"office","permalink":"http://cnneillee.github.io/tags/office/"}]},{"title":"Word 中将正文中的参考文件标号链接到参考文献具体条目","date":"2017-06-12T08:05:34.000Z","path":"2017/06/12/basic/Word中将正文中的参考文件标号链接到参考文献具体条目/","text":"一、概论在论文撰写过程中，不可避免地引用到参考文献。通常，论文格式要求我们在引用的正文后，使用中括号将参考文献章节中对应的出处条目序号引起来，例如： 有时，我们要建立起这两者之间的链接关系。 二、设置方法 点击word上方开始菜单下的编号按键。 点击“定义新编号格式”选项，设置编号格式，在“预览”中可以看到所设置的格式。点击确定，这些参考文献自动编号完成。 将光标定位在正文中需要插入参考文献上标的地方，点击“插入”选项卡中的“交叉引用”，出现如下界面。其中“引用类型”选择“编号项”，勾选“插入为超链接”选项，选择需要插入的参考文献，例如第一个参考文献，点击插入。然后关闭“交叉引用”窗口。 鼠标放在该数字上边会出现“按住Ctrl并单击可访问链接”，说明该数字已链接至正文后边的参考文献。选中“1”，按“Ctrl+Shift+=”即可将其转换为上标 参考自：百度百科-word如何获奖文献标号超链接到后面的参考文献？","tags":[{"name":"office","slug":"office","permalink":"http://cnneillee.github.io/tags/office/"}]},{"title":"Word中设置图、表、公式、代码要与正文之间行间距","date":"2017-06-12T07:56:17.000Z","path":"2017/06/12/basic/Word中设置图、表、公式、代码要与正文之间行间距/","text":"一、概述在撰写论文等文档时，常常对图、表、公式、代码要与正文之间行间距有要求。例如：1（5）图、表、公式、代码要与正文之间有6磅的行间距。 二、设置方式选中 图/表/公式/代码 与 图题/表头/-/- ，点击鼠标右键-&gt;段落-&gt;间距-&gt;段前/段后。如下图： 效果如下图：","tags":[{"name":"office","slug":"office","permalink":"http://cnneillee.github.io/tags/office/"}]},{"title":"Android 属性自定义及使用获取浅析","date":"2017-06-02T01:58:47.000Z","path":"2017/06/02/android/Android-属性自定义及使用获取浅析/","text":"一、概述相信你已经知道，Android 可使用 XML 标签语言进行界面的定义。每个标签中有一个一个的属性，这些属性有相应的属性值。例如：1234567&lt;cn.neillee.composedmenu.RotatingArcMenu android:id=&quot;@+id/ram2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;?attr/barBgColor&quot; app:position=&quot;left_bottom&quot; app:radius=&quot;150dp&quot;/&gt; 有两点可以注意到： 其一，在某个自定义 ViewGroup 中，有两个自定义属性 position、radius，与其他属性不同的是，这两个属性的命名空间为 app。 其二，系统属性 background 的属性值为 ?attr/barBgColor。 二、详细介绍2.1 自定义属性这里介绍12app:position=&quot;left_bottom&quot;app:radius=&quot;150dp&quot; 的使用。 自定义属性常见于自定义的 View 中，让我们还是以概述中的代码作为例子。自定义属性及其属性值在 /values/attr.xml 中有如下定义：12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;attr name=&quot;position&quot;&gt; &lt;enum name=&quot;left_top&quot; value=&quot;0&quot;/&gt; &lt;enum name=&quot;left_bottom&quot; value=&quot;1&quot;/&gt; &lt;enum name=&quot;right_top&quot; value=&quot;2&quot;/&gt; &lt;enum name=&quot;right_bottom&quot; value=&quot;3&quot;/&gt; &lt;/attr&gt; &lt;attr name=&quot;radius&quot; format=&quot;dimension&quot;/&gt; &lt;declare-styleable name=&quot;ComposedMenu&quot;&gt; &lt;attr name=&quot;position&quot;/&gt; &lt;attr name=&quot;radius&quot;/&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 在该文件中，枚举了 position 有四个属性值，并为每个属性值提供了不同的 value 值作区分。而 radius 定义为 dimension 引用，表示其值须为 dimension 类型的值。类似地，还有如有其他类型，参考文章 【Android】Android自定义属性，attr format取值类型 接下来如何获取自定义属性值就成了关键。我在自定义 ViewGroup 中使用如下代码获取到用户在 layout 文件中，自定义 ViewGroup 标签下使用到的值。1234567891011121314151617private static final int LEFT_TOP = 0;private static final int LEFT_BOTTOM = 1;private static final int RIGHT_TOP = 2;private static final int RIGHT_BOTTOM = 3;protected static final int DEFAULT_RADIUS = 150;protected static final int DEFAULT_POSITION = RIGHT_BOTTOM;protected int mRadius;...public RotatingArcMenu(Context context, AttributeSet attrs, int defStyleAttr) &#123; TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.ComposedMenu, defStyleAttr, 0); int pos = a.getInt(R.styleable.ComposedMenu_position, DEFAULT_POSITION); mRadius = (int) a.getDimension(R.styleable.ComposedMenu_radius, TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, DEFAULT_RADIUS, getResources().getDisplayMetrics())); a.recycle();// 使用完后记得回收&#125; 2.2 获取系统属性这里介绍 android:background=&quot;?attr/barBgColor&quot; 属性的定义与获取。 我之所以如此定义，是为了使得 背景色 能够随着应用的主题切换而变化，最简单的例子就是 夜间模式。首先，我在 values/attr.xml 文件中对 barBgColor 进行定义：12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; ... &lt;attr name=&quot;barBgColor&quot; format=&quot;color&quot;/&gt;&lt;/resources&gt; 其次，在 values/styles.xml 中对该属性值进行了定义：123456789&lt;resources&gt; &lt;style name=&quot;AppDayTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;barBgColor&quot;&gt;@color/ZHIHUBlue&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;AppNightTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;barBgColor&quot;&gt;#263238&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; 最后，我在控件的属性中对该属性值进行了使用1234567&lt;cn.neillee.composedmenu.RotatingArcMenu android:id=&quot;@+id/ram2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;?attr/barBgColor&quot; app:position=&quot;left_bottom&quot; app:radius=&quot;150dp&quot;/&gt; 需要说明的是，可以不再控件属性中使用自定义的属性值，可在代码中进行获取与设置。如：123TypedValue typedValue = new TypedValue();mContext.getTheme().resolveAttribute(R.attr.barBgColor, typedValue, true);mRotatingArcMenu.setBackgroundColor(typedValue.data); 这里使用到了 TypedValue 这个类。 2.3 关于 TypedValue详细介绍见官网：https://developer.android.com/reference/android/util/TypedValue.html 此处我仅对我在上一小节中的使用做简单介绍。在使用过程中，我观察到在不同主题下，TypedValue 读取到的值如下： 在 DayTheme 中，由于我定义的是 @color/ZHIHUBlue ，对color的引用即 resourceId。因此，typedValue.resourceId 有值，且直接等效于 R.color.ZHIHUBlue，typedValue.type=TYPE_INT_COLOR_RGB8，表示 typedValue.data 有值，为8位的颜色代码值（#rrggbb）。 在 NightTheme 中，由于我定义的是 #263238，颜色代码值。因此，TypedValue.resourceId 无值，但 typedValue.type=TYPE_INT_COLOR_RGB8，表示 typedValue.data 有值，为8位的颜色代码（#rrggbb）。","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"【书单】2017.03-2017.05书单及阅读情况汇总","date":"2017-05-15T07:16:33.000Z","path":"2017/05/15/daily/【书单】2017-03-2017-05书单及阅读情况汇总/","text":"一、概述本次书单时间跨度为 2017.03.15 - 2017.05.15，约两个月。由于近两个月事情比较多，所以阅读的书籍不多。—— 于2017年05月15日 二、阅读书目 《世界尽头与冷酷仙境》 《Redis 入门指南》 《大数据》 《越界》 《数据之巅》 《异类》 《分布式实时计算框架：原理及实践案例》 三、阅读情况3.1 《世界尽头与冷酷仙境》3.1.1 基本情况豆瓣评分：8.5 3.1.2 阅读情况20170401一晚上就读完。由于在第二天晚上的中外文学通论课程上，我要给大家推荐这本书，所以在前一天的晚上翻阅了这本书。第一次阅读这本书是在我读高二的时候。此次阅读主要是熟悉一下书本的内容，以求第二天的书本推荐演讲能够更加贴近书本。 村上是我非常喜欢的一位日本作家，出生于传统日本家庭的他，却总是离经畔道。国学老师的父母希望他能够从事日本古典文学，但是他却对西方文学情有独钟。中学时，放荡不羁，抽烟喝酒打牌泡妞，无所不为，以致几乎上不了大学。同样，到了大学也不安分守己，与爱人洋子热恋，休学结婚。走上写作道路的过程也十分的简单，仅仅是高尔夫球场上的灵光一闪！近期他在《骑兵团长杀人事件》中提起南京大屠杀事件，也非常因人关注。 阅读了他不少的作品之后，我觉得他的作品总是在尝试为读者构建起一个光怪陆离的新世界，神秘而有趣。《世界尽头与冷酷仙境》无出其右。冷酷仙境里温驯善良的 独角兽 与世界尽头中潜藏在地下黑暗邪恶的 夜鬼 两个意象尤其引人注意。小说的结尾，主人公面临着两个世界的选择，激起共鸣，引人深思。 3.2 《Redis 入门指南》技术类的入门书籍，营养不多！ 3.3 《大数据》3.3.1 基本情况豆瓣评分：7.5{% image https://img1.doubanio.com/lpic/s10391658.jpg '' '' %} 3.3.2 阅读情况这本书是在两个月中，用零零散散的时间看的。 这本书从美国社会入手谈大数据。书中内容多引经据典，真实可信。引用较多的轰动性历史事件，从大数据的角度做剖析，可谓独辟蹊径。众多的美国历史事件也给我们了解美国历史、体制有很大的帮助。不过这本书主要目的是培养我们的大数据思维，认识到大数据的趋势和潜力，从政府/体制的角度去对大数据进行把握。如欲了解并学习大数据的技术，那么请出门右拐！{% image http://oltjxlyku.bkt.clouddn.com/big_data_revolution.jpg '' '' %} 3.4 《越界》3.4.1 基本情况豆瓣评分：7.3{% image https://img3.doubanio.com/lpic/s28154190.jpg '' '' %} 3.4.2 阅读情况这本书是在两个月中，用零零散散的时间看的。 剖析了阿里、百度、腾讯、小米、盛大的失败，系统地总结了这五大互联网公司的失败经验。正如作者在书中频繁提到的一句话 —— “成功了叫跨界，失败了叫越界”。{% image http://oltjxlyku.bkt.clouddn.com/yuejie.jpg '' '' %} 3.5 《数据之巅》3.5.1 基本情况豆瓣评分：8.5{% image https://img3.doubanio.com/lpic/s27281543.jpg '' '' %} 我从网上找到了这本书的读书笔记，转载在这里 —— 【转】《数据之巅》读书笔记 3.5.2 阅读情况这本书是在两个月中，用零零散散的时间看的。 与本文中3.3《大数据》提及的《大数据》算是姊妹篇吧。 该书秉承着涂子沛先生的一贯著述风格，行文流畅，论证有理有据，甚是佩服。两本书有着诸多的相似之处，诸如以美国社会为背景，大量引用美国在数据化发展道路上的实例来总结大数据的历史规律，不仅向读者阐述了关于大数据的一些观点，还潜移默化地给我们普及了美国社会的体制机制。 作者从大数据的角度，将美国历史分割为：历史小数据（初数时代、内战时代、镀金时代、进步时代、抽样时代）、崛起大数据（开放时代、大数据时代、智慧城市）。较前一本书来说，论述更有力，自成系统。在《大数据》基础上进行了延伸和拓展，算是升级版吧！ 3.6 《异类》3.6.1 基本情况豆瓣评分：7.8 3.6.2 阅读情况这本书是在两个月中，用零零散散的时间看的。 这本书就是 “一万小时定律” 的出处！如果用一句话来表达我对这本书的感受，那就是 “蛮有意思的一本小书”。 观点比较犀利。中心思想：成功与出生的时代，家庭背景，个人的思想等有关，要综合各个方面的优势，去提高自己。类似“天时地利人和”。大量引用实例、数据进行论证。 3.7 《分布式实时计算框架：原理及实践案例》2017.05.14 花了半天的时间翻阅完了这本书。 没有太多内容，也不够深入。我只是把它当作一本科普、技术漫谈类的书籍来看。以后，针对上面讲的技术点，我再找其他书籍或资料阅读学习。","tags":[{"name":"readinglist","slug":"readinglist","permalink":"http://cnneillee.github.io/tags/readinglist/"},{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"【转】《数据之巅》读书笔记","date":"2017-05-13T15:45:18.000Z","path":"2017/05/13/daily/【转】《数据之巅》读书笔记/","text":"本书作者为涂子沛，作者在这部著作之前的另一部著作《大数据》，我在今年三月份就有幸拜读了这本书。 本书秉承着涂子沛先生的一贯著述风格，行文流畅，论证有理有据，甚是佩服。 个人觉得，这本书是《大数据》的延伸和拓展。 作者从大数据的角度，将美国历史分割为：历史小数据（初数时代、内战时代、镀金时代、进步时代、抽样时代）、崛起大数据（开放时代、大数据时代、智慧城市）。较前一本书来说，论述更有力，自成系统。在《大数据》基础上进行了延伸和拓展，算是升级版吧！—— 见【书单】2017-03-2017-05书单及阅读情况汇总 以下内容摘要转自：20170202《数据之巅》-jianshu/im天行 缘起•2015年之前可能就知道这本书，而且2016年上还是2015年上还听过作者的一次线上讲课。•2017-01-25开始看，一个番茄钟30页左右，全书370页，共需要12个左右番茄钟。•2017-02-02全书读完。 内容Part1 小数据之历史 27/372chap1 初数时代：奠基共和 29/372 克服民主的劣势：用数据分权 1787年7月16日，大州和小州之间终于达成妥协。◦众议院的席位按人口比例在各州分配，体现了民主原则。 参议院的议席每州两台，平均分配，体现了共和精神。 任何一项法案，都必须在参、众两院同时以多数通过才能生效。 统计学的三大重要命题 1、对一个国家来说，统计什么，不统计什么，是个政治问题。 2、要统计一件东西，必须要有清晰的边界。 3、如何提高数据的真实性。 亚拉巴马悖论： 指总议席增加反而导致某些州的议席减少。 十进制在亚里士多德时代就被发明了，但美国是全世界第一个在货币体系中普及十进制的国家。几年后，法国也跟进。 1831年，法国历史学家 托克维尔 《论美国的民主》 其实，在整个19世纪，几乎一切数学和统计学的重大发明和进步都起源于欧州。 商秧提出“强国知十三数”。现代意义上的人口普查在中国直到1900年才出现。（ 但没有普查成功 ） chap2 内战时代：终结奴隶制的灯塔 65/372 1860年，是第八次认可普查年，也是大选年。林肯当总统，联邦正式解体，1861年3月，南方7个州宣布独立。萨姆特要塞，南北战争爆发。 既然全国的青壮年兵力都集中在北方，那南方为什么敢主动挑起战火呢？答案是棉花。 谢尔曼是南北战争中的一代名将，也是北方阵营中除林肯总统、格兰特司令外的第3号人物。 谢尔曼声明： “如果被提名，我不会接受；如果被选上，我不会就职” 政治家必须直面和解决一个个具体的社会问题。 林肯解放的只是黑奴经济上的自由权，而关于黑奴的政治权利，只字未提。 美国共和党强调经济自由，民主党注重政治平等。 chap3 爆发：镀金时代的三重崛起 107/372 在镀金时代的30多年间，美国的数据文化相继完成了思维、组织和技术的三重崛起。 这三重崛起的起点，是1869年。国会人口普查委员会的主席加菲尔德 人类的政治史，说到底，就是各种利益不断调整的斗争史。 人口重心： 因为加菲尔德前10年没有破解当时的利益格局，等到后来当上总统后，重用了之前觉得不错的沃克同志，让统计工作有了革命性变化。然后沃克由于政治事件中，被迫辞职，去MIT当了16年的第3任校长，后来他的工作被Herman Hollerith给做成了。 1883年，美国国会通过了《彭德尔顿法》，规定政治和行政两相分开。 霍尔瑞斯的自己创办的公司，就是IBM的前身。（1911年，霍尔瑞斯的公司与其它公司合并，成立了CTR，请了大名鼎鼎的托马斯.沃森当职业经理人，1924年，CTR更名为IBM。） 检视人类的创新史，有一点可以肯定，市场的需求才是真正的创新动力， 当需求成为越来越迫切的现实，重大的技术突破就一定会产生。 136/372 劳工统计局：只提供事实和数据，不提供对事实的理论解释，也不介入政策的制定。 1894年，美国的工业总产值超过英国，跃居世界第一位，成为世界上最庞大的经济体。 农业统计局、普查局和劳工统计局，堪称美国统计领域的三驾马车。 隐私观念的成熟，数据安全管理制度的完善 中国在数据可视化方面的先驱人物，是地理学家陈正祥，他的著作《大学生活四十年》需要看一看。 chap4 量化：进步时代的数据大潮 161/372 通过对数学的学习，也唯有通过对数学的学习，我们才能对什么是真正的科学获得真实、深入的理解。—奥古斯特.孔德 镀金时代虽然见证了经济的迅猛发展、城市的急剧膨胀，但同时也是一个问题丛生、动荡不安的时代，这也是称为“镀金”的原因，即光鲜的外表下掩盖着重生危机和大量矛盾。 正因为进步主义者的杰出贡献，从19世纪90年代到20世纪20年代，这前后30多年被后人称为“进步时代”。 匹兹堡调查 成本收益分析方法 大众因为恐惧、无知，常常做出和理性分析结果完全不同的决定。换句话说，民主的质量依赖于大众的理性思考水平。 道伊调查福特公司的平托汽车情况，来进行人生命价值的量化。（本章到目前所讲的内容。） chap5 抽样时代：统计革命的福祉 203/372 直到20世纪30年代，抽样的科学性才成为学术界的共识。 1939年1月，等到盖洛普的调查全部完成，《乱世佳人》电影才开机拍摄。拍摄方在重大问题决策上，几乎全部听取了盖洛普的意见。 换句话说，由于调查行为的介入，被调查现象的本身将遭受扭曲。民意调查是不是存在这种“副作用”呢？ 戴明（物理学博士）是盖洛普（数学博士）的朋友，盖洛普曾经就如何抽样、如何设计问题，不断向他征询意见。 我认识到，优秀的人才并不少见，公司最需要的，是能够不断学习、永远进步的人。—戴明回忆起在西电工作时拿到耶鲁的博士项目通知书要不要去读时，后来回忆这段时说的。 1947年，在麦克阿瑟的邀请下，戴明搭乘军用飞机抵达日本。戴明的主要任务，就是利用抽样的技术，帮助日本开展战后的第一次人口普查。 1950年，在日本科学与工程联盟的邀请下，戴明又来到日本。 石川一郎 美国人针对戴明的拍了一部记录片 《日本行，为什么我们不行》 Part2 大数据的崛起 239/372chap6 开放时代：内开放的历程 241/372 开放，主要是指信息的自由流动，广义的开放，还包括人、财、物的自由流动。 LEHD系统的真正强大这处，还在于其数据分析的粒度，经可以按地区，邮编，选区，学区，人口普查的片区等各层级单位对数据进行层层下钻。 OnTheMap 美国的网站，可以查阅数据 人工合成数据（开放数据使用、同时保护数据隐私的重要方法）的两种方式：◦完全合成数据 部分合成数据 内开放3.0：用数据推动创新 270/372 data.gov（奥在台时推动的） 数据开放 不等于 数据公开 chap7 大数据时代：通往计算型的智能社 281/372 数据最早来源于测量。 普适计算 认为：计算机发明以后，要经历三个阶段。 数据挖掘已经不是大数据的前沿和热点，取而代之的是机器学习。 通过计算来解决社会问题，正变得越来越普遍。 3D打印：通过逐层叠加、不断增加材料的方式、一次性完成生产过程，所以被称为“加式制造”。 例如，中，印，韩等国不允许谷歌在自己国家为其地图收集数据，这也意味着，谷歌的无人驾驶汽车未来根本不可能进入这些国家，因为没有数据！* 算法是运用数学和统计学的方法和技巧，解决某一类问题的特定步骤，其核心是建立模型。但建模首先需要的就是数据。 下一代人机交互界面的核心技术是自然语言处理、语音识别、声音合成等，即实现文本和声音这两种数据之间的转换。 chap8 智慧城市：正在拍打世界的浪潮 329/372 2008年11月，IBM提出“smart city”这个概念。 政策配套 市场参与 技术支持 中国已经有了不少电子商务的平台，但还没有一个城市生活、公共服务的平台。—神州数码郭为。 SeeClickFix.com是个公益网站，Nextdoor.com是个商业网站。◦本质都是让大众来发现并解决城市生活的问题；（众包技术） 346 作者认为：物联网（普适计算）、云、大数据是智慧城市的三大核心技术。 结语：把握后发优势：把科技符号变成文化符号 361/372 人类知识的唯一来源，是对过去经验的记录和整理。 后记：蝴蝶振翅 367/372 2013年5月，接到中信银行信用卡中心的大数据方面的培训。 纵观世界名国的历史，我相信有一条真理颠扑不破，那就是学习改变命运。 作者意识到要追求工作中的使命感，又要保持个人生活的平衡，我还需要修炼–很多人都需要。 2014年3月18日，写完。 收获 2017-01-30看了2个番茄钟 chap5讲的是盖洛普和戴明的故事。 chap4讲的是道伊调查福特公司的平托汽车情况，来进行人生命价值的量化，以及不保局的和其它机构的成本收益分析方法，最重要的概念就是量化。 2017-02-02看了2个番茄钟◦两个番茄钟大多数时间给了chap3，美帝的各种数据技术，而国内的一片空白。 chap2只是进行了补充阅读。 Part2与Part1方面有点不太搭，但也是能看一看的。 章节独立性比较强，但连贯起来有点欠缺。 全书以数据文化和科技在美国的发展为主线，讲了不少历史知识。","tags":[{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"Brief of My Github","date":"2017-05-10T14:57:20.000Z","path":"2017/05/10/brief_of_my_github/","text":"一、My GithubMy github address: github.com/cnneillee A glance of my github 二、My Typical Repos2.1 cnneillee/DailyZHIHU 2.1.1 Active periodMar 20, 2016 – May 10, 2017 2.1.2 Some of the points architecture, MVP-Dagger2 architecture web request, retrofit2 + OKHttp3 image loader, universal-image-loader findViewbyId, JakeWharton/butterknife log, orhanobut/logger 2.2 cnneillee/MyBookshelfforked from smartjinyu/MyBookshelf, make PR and accepted. See details here 2.2.1 Active periodJan 15, 2017 – May 10, 2017 2.2.2 My Contributes 对项目进行了如下重构： 架构变化： 关键模块向 MVP 迁移 网络请求进行统一管理（部分还没有实现整合） 采用 dagger2 进行依赖注入 采用 Butterknife 绑定 View 简化代码 界面与功能调整： 分离出 MainFragment，减轻 MainActivty “重量“ 从 SettingActivity 中分离出 ExportCSVTask、RestoreTask、BackupTask 从 SingleAddActivity、BatchAddActivity（BatchListFragment 承担主要功能逻辑） 中抽取出 BookScanFragment 从各个组件中抽取出 AlertUtil、AnswersUtil、AppUtil、SharedPrefUtil 等工具类 构建 BookMultiClickAdapter 实现多选、长按、单击等事件响应（尚未完善） 修复 shortcut 中，add 不显示的问题 其他 UI 调整 其他调整： 依照 mvp 架构对项目进行分包 2.3 cnneillee/nifi-redisforked from qntfy/nifi-redis, make PR but not accepted yet. See details here 2.3.1 Active periodApril, 2017 - May, 2017 2.3.2 My contributes Mainly add the proccessor PutRedis Update nifi version to 1.1.2 Add .idea to .gitignore file Modify multi connection string in Property named REDIS_CONNECTION_STRING of Proccessor GetRedis 2.3.3 My plans make PutRedis more flexible add a processor that put data into a cluster etc…","tags":[]},{"title":"Hexo进阶——添加站点地图","date":"2017-05-10T02:21:11.000Z","path":"2017/05/10/hexo/Hexo进阶——添加站点地图/","text":"一、概述站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。 在 Google 的 Search Console 的[抓取-&gt;站点地图]有为你的站点添加站点地图的选项。在此处添加了站点地图文件地址后，你的站点就能够充分地展示在 google 搜索引擎使用者的眼前。 二、Hexo 方案npm 为 Hexo 提供了相应的插件，用以生成站点地图文件。 2.1 安装插件在 Hexo 根目录下，执行如下命令以安装插件： Google 版本 1npm install hexo-generator-sitemap --save Baidu 版本 1npm install hexo-generator-baidu-sitemap --save 2.2 开始生成站点地图文件安装好插件后，插件会在每次 hexo g 命令将 markdown 文件转化为 html 文件时执行 执行结果为，在存放 html 文件根目录下，即 [hexo install location]/public 下生成一 ‘sitemap.xml’/‘baidusitemap.xml’ 紧接着在你执行 hexo d 将网站文件部署到 github 仓库上之后，准备工作算是完成大半了 2.3 添加站点地图 url最后，你只需将该站点地图文件的 url 添加至搜索引擎的 search console ，旋即完成了整个过程","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cnneillee.github.io/tags/hexo/"}]},{"title":"Python中的条件运算符","date":"2017-05-09T06:50:45.000Z","path":"2017/05/09/scripts/Python中的条件运算符/","text":"一、概述在 C、Java 等语言中，有一种常见的条件运算符，又叫“三目运算符”。详情参见 条件运算符-wikipedia ?: 的一般形式为&lt;表达式1&gt; ? &lt;表达式2&gt; : &lt;表达式3&gt; 二、Python 中的实现Python 程序设计语言使用一种不同的语法处理条件表达式：value_when_true if condition else value_when_false 这一特性在 Python 2.5 以前的版本并不可用。","tags":[{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"Python字符串连接问题归结","date":"2017-05-09T06:45:04.000Z","path":"2017/05/09/scripts/Python字符串连接问题归结/","text":"一、概述Python 字符串连接场景较为普遍。由于编者对 Java 等语言较为熟悉，常常将两者语法混淆。 加之，Python 语法较为灵活。例如，单单实现字符串连接，就有数种方法。在此，一并归结！ 二、字符串的连接方式2.1 类 Java 式hello = &#39;hello&#39; + &#39; python&#39;使用场景：适用于字符串相连。 特点：之所以说python 中使用 + 进行字符串连接的操作效率低下，是因为python中字符串是不可变的类型，使用 + 连接两个字符串时会生成一个新的字符串，生成新的字符串就需要重新申请内存，当连续相加的字符串很多时(a+b+c+d+e+f+…) ，效率低下就是必然的了 2.2 join 方法12listStr = [&apos;hello&apos;, &apos; python&apos;] hello = &apos;&apos;.join(listStr) 使用场景：适用于字符串数组相连。 特点：使用略复杂，但对多个字符进行连接时效率高，只会有一次内存的申请。 而如果是对list的字符进行连接的时候，这种方法必须是首选 注意：若使用 join 进行两个字符串的连接，会出现意想不到的问题：{% image python_join_error.JPG '' '' %}不过也不难理解，join 接受 iterable 的对象。 若向 join 传递字符串，Python 会将其解析成单个的字符再进行连缀，然后，返回连缀后的字符串 tuple。 2.3 格式化hello = &#39;%s %s&#39; % (&#39;hello&#39;, &#39; python&#39;) 特点：这种方法较为常用 2.4 &quot;,&quot; 连接hello = &#39;hello&#39;, &#39; python&#39; 返回的结果是 tuple 三、性能比较参见文章：python字符串连接的三种方法及其效率、适用场景详解 参考文章：[python字符串连接的N种方式][http://www.cnblogs.com/dream397/p/3925436.html]","tags":[{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"Python 中全局变量的实现","date":"2017-05-09T05:58:45.000Z","path":"2017/05/09/scripts/Python中全局变量的实现/","text":"一、概述Python 中全局变量的使用场景不多，但偶尔也有用武之处。 如在函数中的初始化，有时需要从外部传入一个全局变量加以控制。或者在函数中，使用连接池时，也可能有使用全局变量的需要。 广义上的全局变量有以下两种： 使用 global 进行修饰 使用复合数据类型，如类、列表、数组等 有点类似 Java 中的 Final 变量，Final 变量是一旦初始化，则不能被改变。 此处，Python 在函数内可读但不能进行值的改变！如需进行值得改变，须实现全局变量。 二、全局变量实现2.1 global 修饰12345global aa = 0def Fun(); a = 1 注意：global 修饰与初始化不能在一行执行，global a = 0 编译通不过！ 2.2 使用复合数据类型通过 使用复合数据类型 将需要改变的量包裹起来，这也是一种实现全局变量的方法。","tags":[{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"SLF4J 日志系统在项目导入时频现的问题","date":"2017-05-08T16:12:49.000Z","path":"2017/05/09/others/SLF4J日志系统在项目导入时频现的一个问题/","text":"一、概述近期在导入一个已有的项目时，日志系统出现了一个问题。错误信息如下： SLF4J问题123SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. 网上常见的问题：SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”Eclipse - Failed to load class “org.slf4j.impl.StaticLoggerBinder” [duplicate]SLF4J user manual 问题背景进一步描述如下： 1.1 项目的日志系统依赖项目中，所有与日志系统相关的依赖如下： 错误信息提示的是 “无法加载 “org.slf4j.impl.StaticLoggerBinder”类 ”，在上图中无法找到该类的存在，因而确实是由于没有依赖造成的错误。 1.2 org.slf4j.impl.StaticLoggerBinder 类从 maven 下载与项目中依赖版本相同的 slf4j 包，包结构如下：{% image http://oltjxlyku.bkt.clouddn.com/sl4j_pkg_structure.png '' '' %} 通过资料查询知道，slf4j-nop-1.7.9.jar、slf4j-simple-1.7.9.jar 两个 JAR 包中有org.slf4j.impl.StaticLoggerBinder 类。 二、解决方案2.1 导入 slf4j-nop-x.x.x.jar导入 slf4j-nop-x.x.x.jar 包，注意版本号要对应。 实际使用发现，导入该包后，之前的错误信息不会显示，log 日志内容也不显示。 仅仅只是不报错而已！！！问题并没有得到解决！ 2.2 导入 slf4j-simple-1.7.9.jar导入 slf4j-simple-x.x.x.jar 包，注意版本号要对应。 实际使用发现，导入该包后，日志能正常显示！！！","tags":[{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"}]},{"title":"Android MVP Presenter 中引发的空指针异常","date":"2017-05-03T02:59:42.000Z","path":"2017/05/03/android/Android-MVP-Presenter-中引发的空指针异常/","text":"一、概述最近对 googlesamples/android-architecture 中的 MVP-dagger 进行了学习。对照项目的 MVP-dagger 分支，对 MVP-dagger 进行了实践，不日将会在另一篇文章中进行介绍。 MVP 架构，顾名思义，Model-View-Presenter。其作用是解决 Android 的 MVC 架构中，Activity 的职责不清，过于庞杂，难以维护的缺点。 在众多对 MVP 的实践中，Presenter 常有 attachView 和 unattachView 两个方法，用以建立起 Presenter 同 View 的联系，便于在 Presenter 中对 View 的接口进行调用。 然而，Presenter 中常常有一些耗时的操作，在某些情况下（诸如用户退出对应的 View），unAttachView 被调用，此时 Presenter 才完成耗时操作，需要完成对 View 的更新。但此时由于 View 已经被解绑，Presenter 中获取到的 View 为空，若不进行判空操作，则会引起空指针异常。 在 Presenter 中如何优雅地判空？通过进一步了解 Presenter 的生命周期，能不能找到更好的解决方案？这两个问题是本文要讨论的重点！ 二、Presenter 中对 View 判空2.1 最简单直接的暴力方式https://github.com/cnneillee/DailyZHIHU/blob/master/app/src/main/java/com/neil/dailyzhihu/presenter/TopicDetailPresenter.java12345678910111213141516171819202122232425public class TopicDetailPresenter extends RxPresenter&lt;TopicDetailContract.View&gt; implements TopicDetailContract.Presenter &#123; private RetrofitHelper mRetrofitHelper; @Inject TopicDetailPresenter(RetrofitHelper retrofitHelper) &#123; this.mRetrofitHelper = retrofitHelper; &#125; @Override public void getTopicDetailData(int topicId) &#123; mRetrofitHelper.fetchTopicNewsList(topicId).enqueue(new Callback&lt;TopicStoryListBean&gt;() &#123; @Override public void onResponse(Call&lt;TopicStoryListBean&gt; call, Response&lt;TopicStoryListBean&gt; response) &#123; if (response.isSuccessful()) &#123; mView.showContent(response.body()); &#125; &#125; @Override public void onFailure(Call&lt;TopicStoryListBean&gt; call, Throwable t) &#123; mView.showError(t.getMessage()); &#125; &#125;); &#125;&#125; 在上面这个例子中，并没有对 mView 进行判空，当网络状态不好，用户退出当前 Presenter 关联的 View，就极容易引起空指针异常。 为了避免此问题的出现，应当对 mView 进行判空操作。123if(mView != null) mView.showContent(response.body());...if(mView != null) mView.showError(t.getMessage()); 这是最直接了当的做法。倘若对整个项目进行如是改造，且不说编码规范和设计原则的问题，单是修改整个项目的 Presenter 就得费老鼻子劲儿，修改过程也极容易出现遗漏等问题。 暴力××不可取呀！！！ 2.2 整合抽象的方式当然了，上面的代码在代码规范和设计模式上也有一定的问题。一种更佳的方式是，不直接让子 Presenter 对 mView 进行操作，而是使用 getView 方法对 mView 进行暴露，用户使用 getView 获取绑定的 view123if(getView() != null) getView().showContent(response.body());...if(getView() != null) getView().showError(t.getMessage()); 2.3 优雅的判空方式来自知乎专栏的一片文章 『极光日报 - 不要再在你的 Presenter 中检查 view != null 啦』 中介绍了一种优雅的方式，抛异常/使用第三方库。 有另一种我认为更好的方式，就是将 2.2 与 抛异常结合起来。毕竟，谁都不想为了一些小的细节，而引入一个第三方库。12345678910111213141516171819202122232425public class TopicDetailPresenter extends RxPresenter&lt;TopicDetailContract.View&gt; implements TopicDetailContract.Presenter &#123; private RetrofitHelper mRetrofitHelper; @Inject TopicDetailPresenter(RetrofitHelper retrofitHelper) &#123; this.mRetrofitHelper = retrofitHelper; &#125; @Override public void getTopicDetailData(int topicId) &#123; mRetrofitHelper.fetchTopicNewsList(topicId).enqueue(new Callback&lt;TopicStoryListBean&gt;() &#123; @Override public void onResponse(Call&lt;TopicStoryListBean&gt; call, Response&lt;TopicStoryListBean&gt; response) &#123; if (response.isSuccessful()) &#123; getView().showContent(response.body()); &#125; &#125; @Override public void onFailure(Call&lt;TopicStoryListBean&gt; call, Throwable t) &#123; getView().showError(t.getMessage()); &#125; &#125;); &#125;&#125; 在父 Presenter 中1234protected View getView()&#123; if(mView == null) throw new IllegaStateException(&quot;view not attached&quot;); else return mView;&#125; 三、Presenter 的生命周期这个话题源自一篇文章 『Android：聊聊 MVP 中 Presenter 的生命周期』 当然，这篇文章涵盖了处理 Presenter 的生命周期 与 Activity/Fragment 生命周期同步的问题的几个框架。同步 Presenter 和 Activity/Fragment 生命周期，从而保证在 View 层（这里姑且 Activity/Fragment 归类到 View 层吧）生命结束后，Presenter 也被终止生命，故而避免了空指针异常的问题！ 这里只引用文中的几个框架，详细分析内容，可参见原文！ MVPro 框架『Android MVP框架MVPro的使用和源码分析』 Beam 框架『不要再给MVP中Presenter写接口了』观点不敢苟同 Loader 框架原文中详细介绍了这种方案 此文在我的 cnblogs 上同步发布，地址为：http://www.cnblogs.com/neillee/p/6800758.html","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"mvp","slug":"mvp","permalink":"http://cnneillee.github.io/tags/mvp/"},{"name":"android-architecture","slug":"android-architecture","permalink":"http://cnneillee.github.io/tags/android-architecture/"}]},{"title":"github的git.exe的目录所在","date":"2017-03-29T07:26:00.000Z","path":"2017/03/29/git/github你必须要知道的几个点/","text":"一、概述由于项目需要，我近期较为频繁的使用 Github 对代码进行管理。 非常险的一次是，在进行某个新功能的开发时，进行了多处的修改后，我突然又不想要这个新功能了。可怕的是，这些修改中，有的直接作用与新特性的开发，而有的仅仅只是 bug 的修复。这导致简单的回退无法达到去除新功能开发的目的。 二、功能点2.1 专一做人做事要专一，做开发也要专一！ 每条分支，每个提交只做一件事！ 分支专注于某个大模块的开发（某个功能特性、某次 hotFix 等） 2.2 特殊分支特殊处理master、release 等是特殊分支，千万不要在这写分支上对代码进行修改。 master 承担着整个项目源代码的管理职能；release 则承担发布的管理责任。 开发在 develop 分支上进行；bug 的修复则应发生在 bugFix 分支上，bugFix 可以根据 bug 的标记产生不同的分支名。 三、常用的命令3.1 taghttp://caibaojian.com/github-create-tag.html 3.1.1 查看 tag列出所有 tag：1git tag 这样列出的 tag 是按字母排序的，和创建时间没关系。如果只是想查看某些 tag 的话，可以加限定：1git tag -l v1.* 这样就只会列出 1.x 的版本。 3.1.2 创建 tag创建轻量级 tag：1git tag v1.0 这样创建的 tag 没有附带其他信息，与之相应的是带信息的 tag：1git tag -a v1.0-m &apos;first version&apos; -m 后面带的就是注释信息，这样在日后查看的时候会很有用，这种是普通 tag，还有一种有签名的 tag：1git tag -s v1.0-m &apos;first version&apos; 前提是你有 GPG 私钥，把上面的 a 换成 s 就行了。除了可以为当前的进度添加 tag ，我们还可以为以前的 commit 添加 tag：12345-- 首先查看以前的commitgit log --oneline-- 假如有这样一个commit：8a5cbc2 updated readme-- 这样为他添加taggit tag -a v1.18a5cbc2 3.1.3 删除 tag很简单，知道 tag 名称后：1git tag -d v1.0 3.1.4 验证 tag如果你有 GPG 私钥的话就可以验证 tag：1git tag -v v1.0 3.1.5 共享 tag我们在执行 git push 的时候，tag 是不会上传到服务器的，比如现在的 github，创建 tag 后 git push``，在 github 网页上是看不到 tag 的，为了共享这些 tag，你必须这样：1git push origin --tags 3.2 pushgit push 是十分常见的一个命令。 3.2.2 指定 push 的 account 和 passwordLocal 机同时进行着多个项目的开发工作，麻烦的是，这些项目关联的账户都不尽相同，此时，可以指定某次 push 的 account 和 password。1git push https://username:passwd@github.com/dotheright/mylovelycodes.git master 3.2.3 避免每次 push 要输入 account 和 password一种方法是：http://blog.csdn.net/stepbystepto/article/details/52772326 修改代码根目录的隐藏配置文件 .Git/config文件12345678[remote &quot;origin&quot;]url = https://username:passwd@github.com/dotheright/mylovelycodes.gitfetch = +refs/heads/*:refs/remotes/origin/*username 改为你的用户名passwd 改为你的密码中间的冒号不能省略原理上讲其实就是 URL 的格式,里面可以带用户名密码. 四、常见问题4.1 为什么 Github profile 没有记录你的 Contributionshttps://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/ fork 的提交不会被记录 非 master 分支上的提交不会被记录 commits 使用的邮箱地址不与你的账号关联 … 中文详细内容见 http://blog.csdn.net/u010184533/article/details/51683812","tags":[{"name":"git/github","slug":"git-github","permalink":"http://cnneillee.github.io/tags/git-github/"}]},{"title":"【书单】2017.03书单及阅读情况汇总","date":"2017-03-14T02:44:39.000Z","path":"2017/03/14/daily/【书单】2017-03阅读书单及情况汇总/","text":"一、概述本学期开始推行的书单计划，是从 03 月份开始实施的。此次是第一次写文章进行记录。 在过去一周的时间里，我看得书无论从内容还是数量，都算有蛮大的进步的。之后，不一定苛求要达到内容多丰富、数量有多多。但一定要做到，保证每一周的阅读习惯，尽力维持一定的阅读频率。不忘初心。—— 于2017年03月14日 二、阅读书目 《我的母亲是纳粹》 《一本书读懂大数据时代》 《DT时代：从“互联网+”到“大数据×”》 《我不知道该说什么，关于死亡还是爱情》 《企业云——传统IT向云迁移的实践指南》 《IDEAS FOR GAME——腾讯游戏创意设计谈》 《知识管理——如何改变商业模式》 《碎片式学习——互联时代的自我修炼》 《腾讯方法——一个市值1500亿美元公司的产品真经》 大数据三本必读： 《大数据时代》 《爆发》 《大数据》 三、阅读情况3.1 《我的母亲是纳粹》3.1.1 基本情况豆瓣评分：7.3 3.1.2 阅读情况20170312半个晚上读完。 早在上个学期就从图书馆把这本书借到了，但是一直摆在座位旁的书摞里，一直未看。书很薄，不厚，半个晚上在图书馆就读完了。没有其他书分 n 个章节并给每个章节取一个或是深意深长或是辞藻华美的标题。全书从头叙到尾，没有分章节的打断。 作者叙述了从收到母亲好友的强烈建议后到见到母亲的复杂心情以及期间各个时间段里穿插的回忆。对于从小失去母亲疼爱的作者来说，在如此场合下见到母亲，文中百感交集的心情以及浮想联翩的场景就不难理解了。这是作者阔别母亲后（准确的来说是母亲离开她以后）第二次见到母亲。第一次见是在多年前的母亲的公寓里，那是作者带着自己的儿子前来，但是母亲并没有给外孙应有的祖母的爱。这个细节让作者堵在胸口，久久难以忘怀。 最令人感怀的场景，还是在母女相聚后的场景（这个场景也占据了整本书的大部分篇幅）。情感细腻，细节描写得很到位。 说起看这本书的缘由，那要追溯到高中时期了。高中有看杂志的习惯，同时还有摘录信息的习惯，也正是某份杂志上的文章摘录，让我结识了这本书，最终在大三了结了这份牵念，结上了这个情缘！ 3.2 《一本书读懂大数据时代》3.2.1 基本情况豆瓣评分：6.8 3.2.2 阅读情况20170310读完，这本书还是蛮不错的，涉及了大数据的很多方面，大数据入门级的概览类的书籍。 3.3 《DT时代：从“互联网+”到“大数据×”》3.3.1 基本情况豆瓣评分：5.3 3.3.2 阅读情况20170312读完，“国家大数据战略重点实验室著，贵阳市委书记陈刚写推序，中国五位驻外大使深刻感悟”一连串的官帽预示着这本书与政府有着千丝万缕的联系。的确，这本书内容十分丰富，有那么一种“全书”的意思，书中也列举了不少实例，也从国家、各地政府的的一些动向阐述了大数据战略的必要性以及现状和未来。豆瓣评分不高，确实正如不少网友所评价的，东拼西凑，没有明确的中心和主线。 3.4 《我不知道该说什么，关于死亡还是爱情》3.4.1 基本情况豆瓣评分：8.9 3.4.2 阅读情况2017.03.14读完。这本书自上个学期就借了，应该和《我的母亲是纳粹》是一起借的。这本书位列去年大骨培训的阅读书单，为完成任务，便开始阅读起来。有趣的是，这本书是在作者获得诺奖前出版的。 全书由多个采访素材构成，因而，辞藻很朴素，也很口语化。似乎没有太多的修饰，很纯真而天然。更多的是被切尔诺贝利这场人类灾难所震撼！书名来自于对一位女性的采访。从这位女性的叙述中，感受到了她对丈夫深切的爱。本书展现的点也很多，有对清理人的采访，也有对清理人家人的采访，还有对一些学者、作家、摄影师的采访。。。感触还是蛮多的，就不细讲了（确实也理不清）。 3.5 《IDEAS FOR GAME——腾讯游戏创意设计谈》随意翻看，就花了一个小时不到。 3.6 《爆发》3.6.1 基本情况豆瓣评分：6.3 3.6.2 阅读情况20170325看完。很明显，豆瓣上的评价蛮低的。确实感觉干货不多。 有两处亮点，一是成电周涛推荐；二是故事蛮吸引人的。有可能是书确实内容不怎么样吧，也有可能是我确实没看懂。不过，学术界还是蛮推崇的。希望以后能够有新的体会吧。 3.7 《企业云——传统IT向云迁移的实践指南》3.6.1 基本情况豆瓣评分：评分人数不足 3.6.2 阅读情况20170319看完。作者译者名字有点意思。确实是实践指南，可以作为实践的指导书吧。 这本书让我了解到了，云模型等相关概念、数据中心的一些运作原理，更多的是物理上的实现，贴近运维吧。让我对这些云的构建有了一个轮廓性的了解。 3.8 《知识管理——如何改变商业模式》豆瓣评分人数不足。20170317看完。本意是想找一本关于知识分类的书。偶然在新书架上看到这本书，便阅读起来。中午那段时间看的，前后大概花了两三个小时。偏人力资源方向。也有一定的职场、管理的借鉴作用。 3.9 《碎片式学习——互联时代的自我修炼》20170317看完。培训方面的书，没啥营养。 3.10 《腾讯方法——一个市值1500亿美元公司的产品真经》20170316看完。书比较薄，偏产品经理、项目经理方面的书籍。主要介绍了腾讯几款手游的制作历程。","tags":[{"name":"readinglist","slug":"readinglist","permalink":"http://cnneillee.github.io/tags/readinglist/"},{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"Redis 的基本使用方法及注意事项","date":"2017-03-13T11:31:39.000Z","path":"2017/03/13/database/redis的基本使用方法及注意事项/","text":"一、概述来自官网： Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. Learn more → 二、Redis 安装来自官网：installingDownload, extract and compile Redis with: $ wget http://download.redis.io/releases/redis-3.2.8.tar.gz $ tar xzf redis-3.2.8.tar.gz $ cd redis-3.2.8 $ make The binaries that are now compiled are available in the src directory. Run Redis with: $ src/redis-server You can interact with Redis using the built-in client: $ src/redis-cli redis&gt; set foo bar OK redis&gt; get foo &quot;bar&quot; Are you new to Redis? Try our online, interactive tutorial. 三、Redis 使用介绍Redis 的使用方式大致分为两种： 一是，命令行中使用 Redis 二是，程序（脚本）中使用 Redis。 3.1 命令行使用首先，开启 Redis server，开启 Redis client执行如下命令： redis-server，开启 Redis server 在另一个终端上执行 redis-cli，开启 Redis client 其次，关闭 Redis client，关闭 Redis clientRedis client 终端下执行 SHUTDOWN [NOSAVE|SAVE] 则关闭 server，执行 exit，则关闭 client 终端。 {% image http://oltjxlyku.bkt.clouddn.com/redis_server_shutdown.JPG '' '' %} 常用的命令参见：Redis.io/commandsRedis 键(key)相关的命令及其它命令的查看地址Redis命令详解-List 3.2 程序（脚本）中使用以 Lua 为例，大致步骤为： 编写 Lua 脚本 执行命令，命令格式为：1redis-cli --eval [scripts file name] key:ip , argv[...] 注意： 在脚本中的 KEYS 对应上述命令中的 key，ARGV 对应命令中的 argv。 引用下标从 1 开始，’,’前后均有空格，不可省略。 诸多安全机制的限制。 由于此方式的执行机制为将 Lua 脚本上传至 Redis server 执行，因此 Redis 对脚本的执行进行了诸多限制。 脚本中的变量均需为 local，不允许全局变量。由于安全机制，不然会报错 Script attempted to access unexisting global variable 不提供访问系统状态状态的库。由于安全机制，屏蔽了许多命令。Script attempted to access unexisting global variable 实例 编写 Lua 脚本：12345678910111213141516171819202122232425262728293031323334353637-- insert.lualocal function insert_list(uuidlist) if not uuidlist then return end for k,v in ipairs(uuidlist) do print(k,v) if v ~= nil then redis.call(&apos;LPUSH&apos;,KEYS[1],v) end end print(&quot;FINISH INSERT&quot;)endlocal function generate_uuid() local seed =&#123;&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;&#125; local d = &#123;&#125; for i=1,32 do table.insert(d,seed[math.random(1,16)]) end local sid = table.concat(d) return string.format(&apos;%s-%s-%s-%s-%s&apos;, string.sub(sid,1,8), string.sub(sid,9,12), string.sub(sid,13,16), string.sub(sid,17,20), string.sub(sid,21,32) )endlocal uuidlist = &#123;&#125;for i = 0,10do uuidlist[i]=generate_uuid()endinsert_list(uuidlist) 在命令行中执行 $ redis-cli --eval insert.lua data_listl:127.0.0.1 , 10 3","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"},{"name":"redis","slug":"redis","permalink":"http://cnneillee.github.io/tags/redis/"}]},{"title":"Redis 使用过程中遇到的几个问题","date":"2017-03-13T11:31:39.000Z","path":"2017/03/13/database/redis使用过程中遇到的几个问题/","text":"一、概述最近在公司项目中，使用 Lua 脚本操作 Redis 数据库。期间遇到了一些问题，特辟文以记之，望给诸君以参考。 二、获取系统资源的问题redis lua 为了安全考虑，屏蔽了很多的基本命令，比如 os.time(), Date, hash，loadfile函数等 。 三、小技巧3.1 清空 list 内容，但不删除 list keyltrim key 1 0 网上对这个问题进行了诸多讨论，最终我找到了这篇 帖子 给的解决方案。 3.2 获取系统时间redis.call(“TIME”) 虽然 Redis Lua 屏蔽了获取时间的 os.data() 命令，但是我们还可以通过 redis.call(“TIME”) 可以拿到时间戳，但这个时间戳不能写入任务的一个键值里，只能提供比对的功能。 在 stackoverflow 的一篇帖子 get-current-date-and-time-in-lua-in-redis 有提到这个方法，同时另外一篇帖子 how-to-determine-the-execution-time-of-a-lua-script-in-redis 对该问题的解决也有一定的帮助。 在 Redis 社区，我找到了一篇相关的帖子 How best to store time series values in Redis for caching 3.3 资源 OsChina 一篇翻译文章 intro-to-lua-for-redis-programmers 用Redis作为时间序列数据库：原因及方法 使用 Redis 实现分布式系统轻量级协调技术 Nginx+Lua+Redis访问频率控制 详解python调用redis lua内嵌脚本的高级用法","tags":[{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"},{"name":"redis","slug":"redis","permalink":"http://cnneillee.github.io/tags/redis/"}]},{"title":"常用编程工具破解合集","date":"2017-03-11T02:40:59.000Z","path":"2017/03/11/others/常用编程工具破解合集/","text":"一、概述本文主要搜集一些我在编程过程中积累的工具破解方法及资源。 破解方法可能会因工具的版本升级等原因而不能生效，故而破解方法仅作参考，如方法失效，欢迎在下方评论框留言。 本人仅作为工具的搜集者，如有侵犯到您的权益，本人倍感抱歉，请尽快联系本人，将在第一时间删除，谢谢。 二、IDEA 系列工具2.1 IntelliJ IDEA 注册码http://idea.lanyus.com/","tags":[{"name":"tools","slug":"tools","permalink":"http://cnneillee.github.io/tags/tools/"}]},{"title":"逆向——解析AndroidManifest","date":"2017-03-06T09:10:10.492Z","path":"2017/03/06/android/逆向解析AndroidManifest/","text":"一、概述1.1 APK 文件结构用解压软件解压 apk 文件，大致能够得到以下几个文件/文件夹： assets/ lib/ META-INF/ res/ AndroidManifest.xml classes.dex resources.arsc 1.2 APK 文件中的 AndroidManifest.xml功能：App 的配置清单文件。 用记事本直接打开 AndroidManifest.xml 发现乱码，用Sublime打开，出现 16 进制数。 二、AndroidManifest.xml 的乱码问题2.1 乱码原因处于安全、Apk 体积等因素的考量，在打包过程中，按照一定规则（安全、轻量、机器易读）， AndroidManifest.xml 会被压缩。 因而，当直接查看 APK 文件中的 AndroidManifest.xml 文件时，得到的是乱码。 2.2 正确解码 Android 逆向之旅—解析编译之后的 AndroidManifest 文件格式 文章详细介绍了 AndroidManifest.xml 的解码技术，文末附项目的 github 地址。 2.3 亲测可用为了验证其可用性，我使用了知乎 app 的 AndroidManifest 进行测试，解析结果如下图。完美！","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"刷完《晓松奇谈》和《晓说》以后","date":"2017-02-26T10:56:59.000Z","path":"2017/02/26/daily/刷完《晓松奇谈》和《晓说》以后/","text":"缘由看高晓松的节目（《晓说 第一季 (2012)》 + 《晓说 第二季 (2013)》 + 《晓松奇谈》(2014)），是起源于《奇葩说 第三季 (2016)》。 《奇葩说》中，晓松手执一把扇子，谈笑风生，颇具仙风道骨，言谈举止间有大儒气息。因此，特意在网上搜了他相关的信息，从庞杂的信息中，发现他正在更新的一个脱口秀——《晓松奇谈》，当时节目正更新到“探访星战圣地，造访天行者庄园”——2016.10.28期。 一旦入坑，便无法自拔。 路线2016.10.28 前后正式开始追《晓松奇谈》，同时，从后往前，把往期的节目也给补完了。 追完《晓松奇谈》后，便把又将目光投向了其前身——《晓说》。 从《晓说》第一季到第二季，又是好好荡荡的补完了。在看完《晓说》全集后，精神上的饱腹感涌上心头。 体会多是在做着某件事情之际，在旁边打开 iPad 播放着《晓说》或是《晓松奇谈》，看到动情处（共鸣点），便忍不住放下手中的活儿，注意力全集中在节目里头。 时间跨度比较大，内容也非常丰富，以至于具体要我说出什么体会，我是很难列举出来的，只觉着，它对我的影响是悄无声息的，潜移默化的。 真正印象深刻的几点有： 一是，晓松老师给我们分享的他对于美国这个国家的制度的思考，具有代表性的是《晓说》开播第一期讲的好莱坞的内幕，让我感觉到了晓松老师对这套制度（check and balance）理解之深刻，我觉得“玩透了”这个词能比较好的形容这种境界。 二是，晓松老师的心态特别打动我。他分享到他的一些学习/了解事物的细节，诸如背钢产量、煤产量等，特别触动我。他是真的在发挥自己的主观能动性，从自己的角度去理解这个领域。同时，他对世间的许多事情看得很淡。 三是，晓松老师真的非常见多识广。对欧洲各国历史民情如数家珍，娓娓道来。对中国的历史更是烂熟于胸，时不时的在讲某个话题的时候，就能够想到历史的某些有趣的相关的东西（对我来说，兴许比较冷门）。对中国镖局、科举、青楼女的分享，视角非常独特。讲青楼女的时候，他有提到在他中学时代就主动去了解、查资料，甚至是在一张大大的纸上列表格，做对比、分析、归纳、记忆。感触很多，就不一一说了！ 趣事在补秀（类“补番”）期间，我发现周围有一些同学、亲戚也在关注晓松的节目，不过应该年轻人比较多吧！ 在有消息称《晓松奇谈》这个系列要结束的时候，堂哥在朋友圈发了一条动态。","tags":[{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"2017年的第一个五月计划","date":"2017-02-26T02:39:54.000Z","path":"2017/02/26/daily/2017年的第一个五月计划/","text":"促进技术成长，培养规律生活，因此指定一个时间跨度 5 个月的计划，名为“2017年的第一个五月计划”，计划时间从 2017 年 3 月~2017 年 8 月。 &lt;!more&gt; 一、概述以往也有指定一些计划，这些计划多半刚刚指定，执行不到数个周期，就被搁浅了。此次指定的计划，主要为了能够在这几个月，将技术水平提升到一定层次，以应对今年的秋招。 二、计划内容2.1 计划时间预计 2017.03 - 2017.08 ，时间跨度为 5 个月。 2.2 目标 掌握 java 开发的三大框架 “SSH” 算法技能得到较大的提升 掌握一定的面试技巧 基本课堂上的专业知识获得较大提升（数据库、数据结构与算法、网络、etc.） 建立起良好的生活习惯 有规律地进行阅读，增长自己的阅读方面的能力 进行多项源码阅读工作（首要 JDK 的源码） 2.3 具体措施针对 2.2 中的目标，指定如下实施方案： 2.3.1 学习三大框架 “SSH”此项目标通过看视频和书的方式完成学习过程，视频有：尚学堂科技.马士兵.JAVA集视频教程 Spring2.5.6 Hibernate3.3.2(持续更新) Struts2.1.6（同步更新中…） JUnit4 设计模式系列 其他：扯淡、面经等等 2.3.2 提升算法能力此项目标的完成，应该通过刷算法题进行完成，指定刷题周期，题库网站主要有： 华为在线软件训练与测试平台 HDOJ ACM解题报告搜索平台，汇集了题目讲解，数量应该比较多，而且有点乱 别人推荐的找工作的 OJ: https://leetcode.com/ https://codility.com/programmers/lessons/1-iterations/ http://www.lintcode.com/zh-cn/ http://www.hihocoder.com/ 分章节,题目数量不多 数据结构与算法MOOC 2.3.3 掌握面试技巧通过刷牛客网的面经及《书》 2.3.4 提升课堂专业知识 复习《数据结构与算法》PPT 复习《计算机网络》 复习《数据库应用》 2.3.5 建立良好的生活习惯制定起居的日程表吧。因为周一到周五上班，这段时间生活应该比较规律。周六周日制定起起居的单子。 2.3.6 阅读网上查找书单，建立起每周/月一书读书频率。 2.3.7 源码阅读工作 JDK 源码阅读 Android 项目源码阅读专题“【源码阅读】”，写专题文章 2.3.8 其他等想到再补充吧 三、寄语希望此次计划能够有效实施！加油！！！","tags":[{"name":"planning","slug":"planning","permalink":"http://cnneillee.github.io/tags/planning/"}]},{"title":"不同类型的图标尺寸适配指南","date":"2017-02-25T15:22:26.927Z","path":"2017/02/25/android/不同类型的图标尺寸适配指南/","text":"一、概述1.1 ICON在 Android 的 ui 设计与开发过程中，图标（ICON）的地位显得尤为重要。ICON 大致分为 7 类： Launcher Icons Menu Icons Action Bar Icons Status Bar Icons Tab Icons Dialog Icons List View Icons 1.2 支持多种屏幕参见：https://developer.android.com/guide/practices/screens_support.html 由于 Android 系统运行在不同屏幕尺寸和密度的设备上，Android 为了适应这种情况，为用户提供良好的界面显示，从底层向上提供一致的开发环境。 屏幕支持分类： 四种通用尺寸：小、正常、 大 和超大 六种通用的密度： ldpi（低）~120dpi mdpi（中）~160dpi hdpi（高）~240dpi xhdpi（超高）~320dpi xxhdpi（超超高）~480dpi xxxhdpi（超超超高）~640dpi 故而，支持多种屏幕有如下几种方式： 在清单中显式声明您的应用 支持哪些屏幕尺寸 为不同屏幕尺寸提供不同的布局layout-xxx：small、normal、large 和 xlarge 为不同屏幕密度提供不同的位图可绘制对象 drawable-xxx： ldpi（低）、mdpi（中）、 hdpi（高）、xhdpi（超高）、xxhdpi （超超高）和 xxxhdpi（超超超高） 1.3 drawable 与 mipmap 的区别https://segmentfault.com/q/1010000002603418 二、ICONS 适配2.1 配置限定符用于为不同屏幕配置提供特殊资源的配置限定符 2.2 图片尺寸与密度对应关系 xlsx表格下载地址 备注： 参考了多个项目发现，大部分项目（即时是 Google 提供的官方项目）均未按上述标准进行开发。 mdpi:32*32(32bit Color) hdpi:48*48(32bit Color) xhdpi:64*64(32bit Color) xxhdpi:92*92(32bit Color) 例如： 从官方文章中下载的“操作栏图标包”及“示例应用”显示： https://developer.android.com/training/implementing-navigation/nav-drawer.html Launcher Icons：m –&gt; xxh 符合规范 l：36*36 m：48*48 h：72*72 xh：96*96 xxhh：144*144 ActionBar Icons：与规范不符 m：32*32 h：48*48 xh：64*64 xxhh：96*96 Menu Icons：与规范不符 m：32*32 h：48*48 xh：64*64 2.3 图片命名规则","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"2017年启用 Hexo 博客","date":"2017-02-24T04:36:23.000Z","path":"2017/02/24/hexo/2017年启用hexo博客/","text":"说明此博客是 2016 年 03 月份开始使用的。博客更新时间集中在 03 月和 04 月份，前前后后也更新了 17 篇博客。 使用了一段时间后，因为在更新的时候，Hexo 没有 cnblogs 方便，所以就渐渐地从 Hexo 转向了 cnblogs。写的一些小文章都放在了 http://www.cnblogs.com/neillee 里，并未在此博客上进行更新。自然而然地，该博客就被弃用了一段时间。 启用直到近些天，在网上查资料的时候，搜出了一篇技术博文，内容同 Hexo 并无相关性。但是，博客的整体界面风格成功地引起了我的注意。博客同样使用 Hexo 进行搭建，使用的主题为 material 。作为 Android developer ，向 material design 靠近是非常有必要的。 由此，我开始了更新该博客主题的历程。待更新好主题后，个人觉得这个主题确实蛮不错的，所以也萌生了启用此博客的想法。 折腾经过今天一整天的折腾，算是把主题更换好了，把文章格式、内容也进行了相应的改变。 TODO博文迁移将 http://www.cnblogs.com/neillee 的文章迁移到此博客。 常写博客有规律地在本博客里写博客！Fighting！！！","tags":[{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"Notepad++ 上的代码格式化工具","date":"2017-02-22T02:22:00.000Z","path":"2017/02/22/others/notepad++上的代码格式化工具/","text":"一、概述Windows 自带的记事本功能太过简单，因此我常常使用 Notepad++ 查看文本。Notepad++ 支持插件功能，最近需要使用 Notepad++查看 Html 代码，而这些代码多半没有格式化过，因此迫切需要工具对代码进行格式化，方便查看。 二、工具http://www.crifan.com/notepadplusplus_html_format_use_tidy2/comment-page-1/ https://www.zhihu.com/question/19697561","tags":[]},{"title":"【工具】PC 端调试手机端 Html 页面的工具","date":"2017-02-22T02:06:00.000Z","path":"2017/02/22/android/【工具】pc端调试手机端html页面的工具/","text":"一、概述有一个项目需要在手机端显示一个 web 页面，而每次把应用 launch 后，从手机端看比较麻烦，因此搜罗了几种在 PC 端调试手机端页面的工具。 二、工具http://fonkie.iteye.com/blog/1846858 http://blog.csdn.net/dojotoolkit/article/details/6280924","tags":[{"name":"html","slug":"html","permalink":"http://cnneillee.github.io/tags/html/"}]},{"title":"与进程相关的命令ps、kill","date":"2017-02-21T06:39:00.000Z","path":"2017/02/21/others/与进程相关的命令ps-kill/","text":"一、概述Ubuntu中主要有如下操作进程的命令 二、进程查看命令 ps2.1 ps –l PPID：父进程的 PIDPID：进程的PIDS：进程状态，S：是指sleep睡眠状态；T：是挂起状态；R：是运行状态（running）；Z，叫僵尸状态，使用 ps –e 查看僵尸进程，ps -el | grep Z 2.2 ps -f 完整的命令执行名称查看（full），可以显示完整的命令{% image http://images2015.cnblogs.com/blog/797098/201702/797098-20170221133501226-549694294.png '' '' %} 2.3 查看父进程 ps –p id 不断的调用 ps -fp [next ppid] 和 ps -f [next ppid]： 由结果可知，存在着这样一个调用序列： 1 进程，即 init 进程。0 进程，在 Linux 系统中不存在，但是在 UNIX 系统中存在，为调度进程。 2.4 后台进程 如果对一个挂起的任务进行kill，会发生什么？ 注意被挂起的任务，任何的处理都不会有，只有当此任务恢复的时候才可以进行处理。 二、kill 命令参考：linux kill命令详解","tags":[{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"}]},{"title":"Alluxio 安装与配置","date":"2017-02-17T09:30:00.000Z","path":"2017/02/17/bigdata/alluxio安装与配置/","text":"一、概述 Alluxio, formerly Tachyon, enables any application to interact with any datafrom any storage system at memory speed.From http://www.alluxio.org/ Alluxio，原名为 Tachyon，使任何应用以内存级速度进行文件系统上的数据交换。 二、安装与配置2.1 解压12$ tar -xzf alluxio-1.4.0-bin.tar.gz $ cd alluxio-1.4.0 2.2 配置从模板文件中创建 conf/alluxio-env.sh ，也可通过命令配置：1$ ./bin/alluxio bootstrapConf localhost 三、运行3.1 单机启动 Alluxio3.1.1 格式化格式化 Alluxio 为启动 Alluxio做准备。如下命令会格式化Alluxio的日志和worker存储目录，以便接下来启动master和worker。1$ ./bin/alluxio format 3.1.2 本地启动Alluxio 默认配置成在 localhost 启动 master 和 worker 。使用如下命令在 localhost 启动 Alluxio：1$ ./bin/alluxio-start.sh local 3.1.3 验证启动http://localhost:19999 --》 查看 Alluxio master 的运行状态http://localhost:30000 --》 查看 Alluxio worker 的运行状态 或者，在运行命令 jps，查看当前 java 进程中 AlluxioMaster、AlluxioWorker 信息。 3.2 集群运行 Alluxio3.2.1 集群内节点的配置为使集群的 master 与 worker 方便沟通，需要对 ssh 进行配置。 首先，在将要运行 master 的节点上通过如下命令生成相应公私钥。123$ ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa $ cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys $ chmod 0600 ~/.ssh/authorized_keys 其次，将此处生成的 authorized_keys 分发到集群的 workers 中，放在 worker的 ~/.ssh/authorized_keys 然后，修改好所有节点的 /etc/hosts 文件，为各个节点取别名，方便沟通。 再者，修改 master 的配置文件 ./conf/alluxio-env.sh ，有三个关键点：123$ export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 # java 的安装目录 $ export ALLUXIO_HOME=/root/alluxio # alluxio 的安装目录 $ export ALLUXIO_MASTER_HOSTNAME=master # 我的 host 文件中有一条记录，“[master节点的ip] master”记录 随后，修改 master 的配置文件 ./conf/workers ：（workers 的别名，需要在 host 文件上配置，才能被解析） 最后，将 master 节点上的配置分发到各个 worker 节点上。使用如下命令1$ ./bin/alluxio copyDir 如 ./bin/alluxio copyDir ./conf/workers即可将该文件分发到各个节点的相同目录下。需要保持一致的文件有：./conf/workers全部配置，./conf/alluxio- env.sh中的部分配置 更一般的，你甚至可以无需在 worker 节点上安装 alluxio ，而是通过 ./bin/alluxio copyDir . ，将本节点上的 alluxio 目录分发到各个节点上。 3.2.2 在集群内运行上述配置完成后，即可在 master 上通过命令 ./bin/alluxio format，./bin/alluxio-start.sh all Mount 在集群内运行 Alluxio。 同样的，你可以通过 jps 去检查运行状态。 master 上：出现 proxy、master worker 上：出现 proxy、worker 使用./bin/alluxio-start.sh all 停止运行 Alluxio。 3.2.3 错误在集群内运行的时候，可能会出现 worker 启动不了的问题。表现为 master 上的 AlluxioMaster、AlluxioProxy正在运行，且通过 stop 命令无法关闭。 解决：我是通过查找到这两个命令运行的父进程 id ，然后将父进程杀掉，再按 3.2.2 的命令。 3.3 文件系统操作相关命令见：http://www.alluxio.org/docs/1.4/cn/Command-Line-Interface.html","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"},{"name":"alluxio","slug":"alluxio","permalink":"http://cnneillee.github.io/tags/alluxio/"}]},{"title":"Maven 在 IntelliJ IDEA 中的使用","date":"2017-02-17T09:30:00.000Z","path":"2017/02/17/java/Maven在IntelliJ-IDEA中的使用/","text":"一、概述Maven 为构建软件，与 Gradle 类似，也能以插件的方式在 IntelliJ IDEA 中得到使用。 同样地，你也可以配置环境变量，这样就能够在命令行中进行操作了。 二、使用方式其中，注意 maven 的打包，maven install 在 IDEA 工具中的操作 IDEA 内置的 MAVEN 位置：H:\\JetBrains\\IntelliJ IDEA 2016.1.2\\plugins\\maven\\lib 这里可以放置多个版本的 MAVEN，真正在 IDEA 中使用的话，还是要看 IDEA 中 setting-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;maven-&gt;[maven home directory]","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://cnneillee.github.io/tags/maven/"},{"name":"idea","slug":"idea","permalink":"http://cnneillee.github.io/tags/idea/"}]},{"title":"Hadoop 的安装及配置","date":"2017-02-16T06:12:00.000Z","path":"2017/02/16/bigdata/hadoop的安装及配置/","text":"一、概述1.1 说明虽然目前 Hadoop 的最新版本为 3.0.0，但是我安装的 Hadoop 的版本为 2.7.3。 1.2 参考资料官方文档：http://hadoop.apache.org/docs/r2.7.3/index.html 二、Hadoop 的安装2.1 Java 安装由于 Hadoop 基于 Java，需要 Java 的支持，因此，需要首先安装好 Java。 2.2 ssh 的安装Hadoop 集群需要 ssh 作支撑，因此需要安装 ssh。12$ sudo apt install openssh-server$ sudo apt install openssh-client 2.3 Hadoop 下载从 Apache 上下载 Hadoop 的安装包（是个压缩包，解压即可）http://www.apache.org/dyn/closer.cgi/hadoop/common/ 2.4 Hadoop 安装首先，使用 tar -xzf hadoop-2.7.3.tar.gz 对安装包进行解压。 然后，将解压后的文件改名 sudo mv hadoop-2.7.3 hadoop. 最后，将该安装目录放到 /usr/local/ 目录下。sudo cp hadoop /usr/local. 三、Hadoop 的配置详细配置：https://www.digitalocean.com/community/tutorials/how-to-install-hadoop-on- ubuntu-13-10 3.1 配置环境变量进入 /usr/local/hadoop/etc/hadoop/hadoop-env.sh 文件，修改如下：12# set to the root of your Java installationexport JAVA_HOME=/usr/java/latest 3.2 安装测试在 /usr/local/hadoop/ 下运行 bin/hadoop: 四、安装与配置常常出现的问题4.1 配置过程中，dataNode 无法启动主要原因是多次 format namenode ，而 datanode 不会进行 format 操作，从而造成 namenode 和 datanode 的clusterID 不一致，致使 datanode 无法启动。建议查看datanode上面的log信息。 解决办法：修改每一个 datanode 上面的 CID (位于 dfs/data/current/VERSION 文件夹中)使两者一致。或者：是删除datanode里面的dfs.datanode.data.dir目录和tmp目录，然后再启动start-dfs.sh 4.2 master 与 slaves 安装目录的问题master 和所有的 slaves 的 hadoop 安装路径要一致，而且所有的配置文件 和 节点处不要有空格，否则会报错！ 4.3 WARN util.NativeCodeLoader: Unable to load native-hadoop library foryour platform… using builtin-java classes where applicable 网上查了一下资料，说是32位 hadoop 部署在了64为linux上。hadoop2.2.0遇到64位操作系统平台报错，重新编译hadoop：http://blog.csdn.net/bamuta/article/details/13506893","tags":[{"name":"hadoop","slug":"hadoop","permalink":"http://cnneillee.github.io/tags/hadoop/"}]},{"title":"Ubuntu 更新 Hostname 和 hosts","date":"2017-02-16T01:13:00.000Z","path":"2017/02/16/others/ubuntu更新hostname和hosts/","text":"一、概述Hostname 即主机名，一般存放在 /etc/hostname 中。hosts 即本地域名解析文件，存放在 /etc/hosts 中。 二、测试2.1 hostname{% image http://images2015.cnblogs.com/blog/797098/201702/797098-20170216091143097-1507046727.png '' '' %} 2.2 hosts{% image http://images2015.cnblogs.com/blog/797098/201702/797098-20170216091232707-550407760.png '' '' %} 修改 hosts 后,使 hosts 文件修改生效:sudo /etc/init.d/dns-clean startsudo /etc/init.d/networking restart","tags":[{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"}]},{"title":"Github 的其他用法","date":"2017-02-13T09:20:00.000Z","path":"2017/02/13/git/github的其他用法/","text":"一、概述Github 除了作为代码托管库外，有趣的程序员们还利用它解锁了有趣的新姿势。 二、新姿势2.1 Github Pages可以为项目建立静态主页(即gh-pages分支),也可以建立命名特殊的repo(http://username.github.io)来建立个人静态网站%E6%9D%A5%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99). Hexo + GithubPages 搭建静态博客 2.2 GitHub Résuméhttp://resume.github.io/https://github.com/hit9/GhResume感觉并没有什么卵用。 2.3 Gistshttps://gist.github.com/管理代码片段，可插入到网页中。 2.4 Wiki为项目写Wiki文档。 2.5 News Feed三、Github 桌面版https://zhuanlan.zhihu.com/p/24461753?refer=dreawer","tags":[{"name":"github/git","slug":"github-git","permalink":"http://cnneillee.github.io/tags/github-git/"}]},{"title":"Git 与 Github 使用","date":"2017-02-12T08:25:00.000Z","path":"2017/02/12/git/git与github使用/","text":"一、概述1.1 关于 Githttps://git-scm.com/ Git is a free and open source distributed version control system designed tohandle everything from small to very large projects with speed and efficiency. Git是一个免费开源分布式版本控制系统，被设计成快速高效地管理或大或小的项目。 1.2 关于 Githubhttps://github.com GitHub is a web-based Git or version control repository and Internet hostingservice. It offers all of the distributed version control and source codemanagement (SCM) functionality of Git as well as adding its own features. Itprovides access control and several collaboration features such as bugtracking, feature requests, task management, and wikis for every project.From Wikipedia 1.3 Github 与 Git 的区别Github 是基于 Git 进行开发的。类似地，开源项目 Gitlab 也是基于 Git 进行开发。你可以将 Gitlab 安装在你的某个网络中的某台 PC 上，以该台 PC 搭建起一个代码管理平台。这样，Github、Gitlab 就很好理解了。 与此同时还有：Gitlab（局域网部署）Bitbucket（免费账号不限 private 项目个数）Coding（对国内开发者来说可能有墙内优势） 1.4 Github的一些功能 Git 的基本功能，版本控制 Repository，仓库 Fork，授权拷贝 Pull Request，推送请求 社交属性： 针对特定个仓库（Repository）的 Watch、Star、Issue、Wiki ； 针对具体用户的 Follow/Followed，基于 Git 历史的数据统计。 1.5 由Github衍生出来的项目git-flow ——一个成功的 Git 分支模型介绍：A successful Git branching model翻译：http://www.juvenxu.com/2010/11/28/a-successful-git-branching-model/工具：nvie/gitflowGitHubgit-flow 备忘清单 作者：天猪(刘勇)链接：https://www.zhihu.com/question/20070065/answer/16021641来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 二、版本控制2.1 版本控制概念版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 2.2 版本控制系统2.2.1 本地版本控制系统用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。https://git-scm.com/book/en/v2/images/local.png唯一的好处就是简单，但是特别容易犯错。 2.2.2 集中化的版本控制系统让在不同系统上的开发者协同工作.https://git-scm.com/book/en/v2/images/centralized.png这类系统，诸如 CVS、Subversion 以及 Perforce等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 2.2.3 分布式版本控制系统https://git-scm.com/book/en/v2/images/distributed.png在这类系统中，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 三、Git 基础3.1 Git 历史衍生自 Linux的开发过程。 3.2 Git 基础3.2.1 Git 工具的特性直接记录快照，而非差异比较 差异性比较：https://git-scm.com/book/en/v2/images/deltas.png 快照记录：https://git-scm.com/book/en/v2/images/snapshots.png 近乎所有操作都是本地执行Git 是分布式版本控制，在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。如果你习惯于所有操作都有网络延时开销的集中式版本控制系统，Git 在这方面会让你感到速度之神赐给了 Git 超凡的能量。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。 如果你想查看当前版本与一个月前的版本之间引入的修改，Git会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。 Git 保证完整性Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。 Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：24b9da6552252987aa493b52f8696cd6d3b00373 Git 一般只添加数据你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 3.2.2 三种状态Git 有三种状态，你的文件可能处于其中之一： 已提交（committed），表示数据已经安全的保存在本地数据库中。 已修改（modified），表示修改了文件，但还没保存到数据库中。 已暂存（staged），表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。https://git-scm.com/book/en/v2/images/areas.png 3.2.3 Git 的安装与配置安装过程较为简单，不赘述。本文重点介绍 Git 的配置。Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置： /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。 ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。 每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。 在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\\Users\\$USER）的 .gitconfig 文件。Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 用户信息$ git config --global user.name &quot;John Doe&quot; $ git config --global user.email johndoe@example.com再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。 设置文本文本编辑器默认使用 Vimgit config --global core.editor emacs 检查配置信息如果想要检查你的配置，可以使用 git config --list 命令来列出所有 Git 当时能找到的配置。$ git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ...你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。这种情况下，Git 会使用它找到的每一个变量的最后一个配置。你可以通过输入 git config &lt;key&gt;： 来检查 Git 的某一项配置:git config user.name 3.3 Git 详细知识3.3.1 获取 Git 仓库两种方式在本地建立仓库。一种是，在现有项目会目录下导入所有文件到 Git；另一种是从服务器将已有的 Git 仓库克隆到本地。 在现有目录中初始化仓库git init # 创建一个名为 .git 的子目录，该目录中含有初始化的 Git 仓库中所有的必须文件，这些文件时 Git 仓库的骨干。 git add *.c # 实现对文件的追踪 git add LICENSE git commit -m &#39;initial project version&#39; 克隆已有的仓库git clone [url] [本地仓库名称，可选]当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库（虽然可能会丢失某些服务器端的挂钩设置，但是所有版本的数据仍在）。 GIT服务器的四种协议 3.3.2 记录每次更新到仓库工作目录中的每个文件两种状态： 已跟踪：指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 未跟踪：工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。文件的状态变化周期：https://git-scm.com/book/en/v2/images/lifecycle.png 检查当前文件状态git status 跟踪新文件git add [文件名]暂存已修改文件git add:这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。状态简览运行 git status -s/git status -short ，状态报告输出如下：$ git status -s M README MM Rakefile # 你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。 A lib/git.rb # 新添加到暂存区中的文件前面有 A 标记 M lib/simplegit.rb ?? LICENSE.txt # 新添加的未跟踪文件前面有 ?? 标记忽略文件在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。文件 .gitignore 的格式规范如下： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc]匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。提供示例：https://github.com/github/gitignore 查看已暂存和未暂存的修改如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。 稍后我们会详细介绍 git diff，你可能通常会用它来回答这两个问题：当前做的哪些更新还没有暂存？ 有哪些更新已经暂存起来准备好了下次提交？ 尽管 git status已经通过在相应栏下列出文件名的方式回答了这个问题，git diff 将通过文件补丁的格式显示具体哪些行发生了改变。 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。 若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。） 请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。 提交更新git commit [comment，可选] 跳过使用暂存区域git commit -a -m ‘added new benchmarks’ 移除文件要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。 git rm --cached README从暂存区域删除，同时，此处文件支持使用 glob 模式 移动文件git mv file_from file_to相当于mv file_from file_to git rm file_from git add file_to 3.3.3 查看提交历史git log 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。git log -p -2：一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交如果你想看到每次提交的简略的统计信息，你可以使用 --stat 选项 另外一个常用的选项是 --pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 比如用oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 short，full 和 fuller可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。 格式化：git log --pretty=format:&quot;%h - %an, %ar : %s&quot; 限制输出长度 3.3.4 撤消操作git commit --amend修改上次 commit 的内容（如上次commit的内容已经 push ，则无法修改，只能产生新的 commit），将自上次 commit 后发生的修改附加到上次 commit 上，并可做相关编辑。 取消暂存文件git reset HEAD &lt;file&gt;... 来取消暂存.此时，有三种参数： --hard，比较危险 --soft --mixed，默认方式 撤消对文件的修改参见资料 二、学习使用 Git 工具2.1 学习资料汇总 git 官网的书：https://git-scm.com/book/en/v2 StormZhang 写的入门教程：learn github from zero 学习 Git 的游戏 Learn Git Branching：http://learngitbranching.js.org/ Git软件开发过程：http://aboutcoder.com/2015/11/16/work-in-git/ git - 简明指南:http://rogerdudler.github.io/git-guide/index.zh.html git简明指南：https://progit.org/book github的博客：https://github.com/blog 像 git 那样思考：http://think-like-a-git.net/ 图解Git：http://marklodato.github.io/visual-git-guide/index-zh-cn.html git-glow备忘清单：http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html git magic：http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/index.html GitHub 漫游指南：https://github.com/phodal/github-roam Git教程：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 Udacity 学习课程：https://www.udacity.com/course/progress#!/c-ud775 三、知乎上关于Github的问题 GitHub 是怎样的一个存在？https://www.zhihu.com/question/28976652 怎样使用 GitHub？https://www.zhihu.com/question/20070065 蒋鑫的《GotGitHub》：http://www.worldhello.net/gotgithub/ gitref：http://gitref.org/ Git Community Book 中文版：http://gitbook.liuhui998.com/ Githug：https://github.com/Gazler/githug nowcoder上的教程：https://www.nowcoder.com/courses/2 四、Github的一些用法如何高效利用GitHub?(http://www.yangzhiping.com/tech/github.html)借助于 GitStats，我们能很好地统计自己的每个项目的工作量，从而看到工作进展。","tags":[{"name":"git/github","slug":"git-github","permalink":"http://cnneillee.github.io/tags/git-github/"}]},{"title":"【实习】实习期间一些工具的使用","date":"2017-02-12T07:27:00.000Z","path":"2017/02/12/daily/【实习】实习期间一些工具的使用/","text":"一、概述本系列为【实习】系列文章，对该系列文章的说明参见【实习】实习系列文章说明。本文为该系列文章中的专题。 二、办公工具2.1 纸质笔记本开会笔记，简单事务的记录，工作任务的安排、计划等 2.2 企业微信用于公司内部的一些交流。 全员群内有公司内的所有部门同事，方便进行即时交流。 有时几个人拉一个讨论组，方便交流某些涉及面窄的事情。 2.3 企业邮箱公司每个员工均有一个企业邮箱。 企业邮箱使用163企业邮，入职时由相关人员建号，并从该同事处获取。可 在163邮箱主页上进行网页登陆； 在公司邮箱页面进行网页登陆； 使用163提供的smtp/pop3功能，通过客户端软件（闪电邮、Outlook、Foxmail等）收发邮件。 三、开发管理工具3.1 代码管理使用 gerrit 工具进行代码管理。关于该工具的使用，将会开辟专题文章进行介绍。 3.2 任务管理","tags":[]},{"title":"【实习】实习第一周周报","date":"2017-02-12T07:11:00.000Z","path":"2017/02/12/daily/【实习】实习第一周周报/","text":"一、概述本系列为【实习】系列文章，对该系列文章的说明参见【实习】实习系列文章说明。本文为该系列文章中的周报。 二、趣事2.1 制度规范入职第一天就感觉到了公司的制度规范，进入公司的第一天便有人事的工作人员引领，办理入职手续（包括签署实习协议、建立档案、发放梯控卡、发放办公用品等）。完成入职手续后，入职部门的师姐将我们从 人事办公点 带到 部门的办公地点（两个办公点分处两栋楼）。在各自的位置坐定后，我们进入公司的内网，了解公司相关的行政制度（HR、财务、行政、市场）。 总结起来一句话：大公司就是不一样。 2.2 开发流程规范入职第一周基本上没有碰过公司项目的代码，更别谈参加公司实际项目的开发了。但是，有一些细节能够看出公司的开发流程是较为规范的。 代码管理代码和文档是一个互联网公司最重要核心资产。公司使用 gerrit工具管理代码，由该工具延伸出的 Review 机制确保代码的质量，访问控制机制确保代码的安全。 我们导师给了我们一个工程项目的地址，让我们能够进行学习。真正访问之后，发现我们没有代码的读权限。由此展开了一个有趣的故事： 任务管理公司有专门的人物管理平台，为大家指派任务等。 注：由于刚进公司且还未接触真正的开发过程，因此，期待今后更深一步的学习。 三、本周主要情况","tags":[{"name":"reflecting","slug":"reflecting","permalink":"http://cnneillee.github.io/tags/reflecting/"}]},{"title":"【实习】实习系列文章说明","date":"2017-02-12T06:34:00.000Z","path":"2017/02/12/daily/【实习】实习系列文章说明/","text":"一、概述由于今年将要进行为期6个月的实习，特开辟实习系列文章以作记录。 二、系列文章说明2.1 主要内容本系列文章主要用于记录如下几种事项： 周报，主要记录本周琐事（趣事）及工作、学习情况的概述； 特别篇，主要记录实习期间有重大或特殊意义的事件或当天发生一系列事件； 专题，主要记录某项技术的学习历程，如内容较多或者有一定的结构体系，则不纳入该系列文章，而是作为技术文章进行发布。 2.2 标题要求标题格式要求为：【实习】xxx 针对不同类型文章给出如下标题示例： 周报：【实习】实习第一周周报 特别篇：【实习】入职第一天 专题：【实习】Hadoop学习记录 2.3 分类该系列文章均纳入tongfangyun分类中。 本文从我的另一个 blog http://www.cnblogs.com/neillee 中同步过来，同步过程使用了 python 脚本，文章cnblogs博客迁移过程详细介绍了同步过程，并附有源码！ http://www.cnblogs.com/neillee/p/6390943.html 截至博客迁移时，cnblogs上的访问量为：…","tags":[{"name":"reflecting","slug":"reflecting","permalink":"http://cnneillee.github.io/tags/reflecting/"}]},{"title":"【转】解决Gradle报错找不到 org.gradle.api.internal.project.ProjectInternal.getPluginManager() 方法问题","date":"2017-01-18T01:40:00.000Z","path":"2017/01/18/android/【转】解决gradle报错找不到org.gradle.api.internal.project.projectInternal.getpluginmanager()方法问题/","text":"源地址：http://www.mamicode.com/info-detail-1178200.html 一、概述因为本地的AndroidStudio很久没用了，所以想要研究下github上的某个代码的时候，还得重新配下环境 打开了几个项目，都是提示如下错误 二、解决方法 访问 https://services.gradle.org/distributions/ ，并查看最新版的gradle，此文发布时是“gradle-2.10-all.zip” 修改项目中“gradle/wrapper/gradle-wrapper.properties”里下面属性值... distributionUrl=https\\://services.gradle.org/distributions/gradle-2.10-all.zip ... 重新执行 gradlew.bat，问题解决","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"gradle","slug":"gradle","permalink":"http://cnneillee.github.io/tags/gradle/"}]},{"title":"Python 引用计数","date":"2017-01-07T07:56:00.000Z","path":"2017/01/07/scripts/python引用计数/","text":"一、概述要保持追踪内存中的对象，Python使用了引用计数这一简单的技术。 二、引用计数的增减2.1 增加引用计数当对象被创建并（将其引用）赋值给变量时，该对象的引用计数被设置为1。 对象的引用计数增加的情况： 对象被创建：x = 3.14 另外的别名被创建：y = x 被作为参数传递给函数（新的本地引用）：foobar(x) 成为容器对象的一个元素：myList = [123, x, ‘xyz’] 2.2 减少引用计数对象的引用计数减少的情况： 一个本地引用离开了其作用范围。如foobar()函数结束时 对象的别名被显式销毁：del y 对象的一个别名被赋值给其他对象：x = 123 对象被从一个窗口对象中移除：myList.remove(x) 窗口对象本身被销毁：del myList 2.3 del语句Del语句会删除对象的一个引用，它的语法如下：del obj[, obj2[, …objN]] 例如，在上例中执行del y会产生两个结果： 从现在的名称空间中删除y x的引用计数减1","tags":[{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"编程工具整合","date":"2016-12-21T09:21:00.000Z","path":"2016/12/21/others/编程工具整合/","text":"一、概述最近写代码的时候，偶然遇到要使用某种在之前用过的且十分好用的工具的场景。但是，当时没有记下来，使得我很困扰。特开此文章，以作记录。 二、分类2.1 数据处理类2.1.1 json格式化工具工具：http://tool.oschina.net/codeformat/json描述：支持调节缩进量、折叠级数、颜色区分内容等功能。 工具：http://www.sojson.com/simple_json.html描述：支持压缩、高亮、显示数据类型、显示脚标等功能。 工具：http://www.json.cn/描述：支持转xml和压缩等功能 工具：http://www.atool.org/jsonformat.php描述：支持高亮显示、调节缩进量、折叠级数、颜色区分内容等功能。 工具：http://tool.chinaz.com/tools/jsonformat.aspx描述：JSON格式化、校验JSON压缩转义、JSON生成实体类、JSON在线编辑、XML-JSON互转、JSON-GET互转、EXCEL转JSON，功能相对强大 2.1.2 代码格式化工具http://tools.jb51.net/code支持的代码类型较多","tags":[{"name":"json","slug":"json","permalink":"http://cnneillee.github.io/tags/json/"}]},{"title":"喜马拉雅FM抓包之旅","date":"2016-12-21T07:53:00.000Z","path":"2016/12/21/others/喜马拉雅fm抓包之旅/","text":"一、概述最近学院组织安排大面积实习工作，今天刚刚发布了喜马拉雅FM实习生招聘的面试通知。通知要求：公司采用开放式题目的方式进行筛选，申请的同学须完成如下题目 写程序输出喜马拉雅FM上与“卓老板”相关（相关指用“卓老板”作关键词可以在喜马拉雅上搜索到）的所有专辑的信息，按总播放量倒序排列，每行是一个字符串，形如{“title”: “该专辑的名称”, “anchorman” : “该专辑所属的账号名称”, “info” : “该专辑的简介”, “totalPlayCount” :该专辑的总播放量}。可以只输出信息，不用下载专辑中的音频mp3文件。可以用C/C++、JavaScript、Java、Python、Go等语言编写。 二、分析2.1 题目分析数据要求就是 JSON 数据，很容易想到：要么去写爬虫，从喜马拉雅的官网页面上爬取数据；要么在app上进行抓包，分析接口。 2.2 说干就干首先，我去了喜马拉雅的官网进行了操作。发现，在第一个页面上可以搜索，也能查看到一些数据，但是数据并没有按照播放量排序以及数据中无播放量这一数据。同时，对整个页面访问的过程进行抓包分析，发现好像并没有类似Json数据的传输。因此，解决方案只有进入每个专辑页面的详情页去获取播放量，再把这些数据汇总。 使用到的技术：用 Python 语言解析 html 页面；用 Java 语言可以使用 Jsoup 框架解析 html 页面。 2.3 使出杀手锏android端抓包根据以往写app的经验，如果项目有app端，则服务器通常要向app端暴露一些数据交互接口，以保证app端的正常使用。对于某些安全级别较高的或者对交互数据有隐私保护需求的公司，通常会对交互的数据进行编码、加密等处理，以增加信息的安全性。抱着试一试的心态，我下载了喜马拉雅app，简单试用了这款app后，确实找到了查找专辑（按播放量，相关度、最新上传可选排序）的操作。通过对app抓包分析，发现整个交互的 Json 没有进行特殊的编码或者加密，甚至没有登陆验证。 2.4 编码前的分析经过前面三个过程，明确了解决问题的方向。那就开始写代码吧。之前使用到Json数据的场合大多都是使用 java 语言写 Android 端程序，此次为了锻炼、学习一下（之前也没有投该公司），决定使用 Python 语言请求并解析Json数据。 三、编码python解析jsonhttp://www.cnblogs.com/neillee/p/6207996.html","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://cnneillee.github.io/tags/network/"}]},{"title":"Python 语言中对于 Json 数据的编解码——Usage of json a Python standard library","date":"2016-12-21T07:52:53.000Z","path":"2016/12/21/scripts/Python语言中标准库对Json数据的编解码/","text":"一、概述1.1 关于JSON数据格式JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC4627) and by ECMA-404, is a lightweight data interchange format inspired byJavaScript object literal syntax (although it is not a strict subset ofJavaScript [1] ). 1.2 关于json库json exposes an API familiar to users of the standard library marshal andpickle modules. 1.3 json库官网地址json是a Python StandardLibrary，官网地址为：https://docs.python.org/3/library/json.html 二、学习历程中文：http://www.ziqiangxuetang.com/python/python-json.html英文：https://docs.python.org/3/library/json.html","tags":[{"name":"json","slug":"json","permalink":"http://cnneillee.github.io/tags/json/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"Python 操作 Mysql 数据库时 SQL 语句的格式问题","date":"2016-12-21T02:53:48.000Z","path":"2016/12/21/scripts/python操作mysql数据库时sql语句的格式问题/","text":"一、概述近日使用 Python 对 Mysql 数据库进行操作，遇到 SQL 语句死活出问题的情况。由于最初没有将异常打印出来，一直不知道原因。随后，将异常打印出来之后，通过异常信息，对代码进行修改。最终，成功实现了对数据库的操作，并总结出了 SQL 语句在 Python 代码中的格式（规范）问题。特此写博文以记之。 二、问题描述2.1 问题提出特别注意：在建数据库的时候，使用的表名、类名均带引号 在 Python 语句中，我使用过三种格式的语句，分别为： 方式1：表名、类名、记录值值均带引号 sql = &quot;INSERT INTO &#39;entity&#39; (&#39;twitterName&#39;) VALUES (&#39;%s&#39;)&quot; % (twitterName) 方式2：表名、类名带引号，记录值不带引号 sql = &quot;INSERT INTO &#39;entity&#39; (&#39;twitterName&#39;) VALUES (%s)&quot; % (twitterName) 方式3：表名、类名不带引号，记录值带引号 sql = &quot;INSERT INTO entity (twitterName) VALUES (&#39;%s&#39;)&quot; % (twitterName) 2.2 得到的结果方式1方式2方式3 2.3 结果分析与总结从2.2不难看出，表名、类名不要加引号，记录值需要加引号。经过测试还发现，当记录值为字符串时需要加引号，记录值为数字时，不用加引号。","tags":[{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"database","slug":"database","permalink":"http://cnneillee.github.io/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"node、npm、gulp、bower、ionic下载及安装","date":"2016-11-20T08:30:00.000Z","path":"2016/11/20/others/node、npm、gulp、bower、ionic下载及安装/","text":"node: http://nodejs.cn/npm: 随node一起安装了 gulp: http://www.gulpjs.com.cn/docs/getting-started/ bower: https://bower.io/ ionic：npm install cordova ionic -g","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"}]},{"title":"将 Java 项目打包成可运行的 Jar 包（main 函数带参数），并上传到 Linux 服务器上运行","date":"2016-11-14T14:41:00.000Z","path":"2016/11/14/java/将java项目打包成可运行的jar包（main函数带参数）上传到linux服务器上运行/","text":"一、概述java项目有两种架构，一种是 B/S 架构的，一种是 C/S 架构的。对于 B/S 架构来说，我们常见的 java ee 即是 B/S 架构，通常，开发人员会在本地进行开发，然后将项目打包成 war文件，上传至服务器，供调用。而对于 B/S 架构来说，通常即是里面有个主方法，就是我们常写的 java 项目/程序。通常，开发完之后，将项目打包成 jar包，随后上传至服务器，供调用。本文，针对后者进行介绍。 二、需求描述一个 java 项目，分包存放多个 java 文件，java 文件中，有依赖第三方库（从外部导入的 jar包）。其中，主函数（项目入口）位于项目的一个包内，主函数必须带有四个参数。 三、导出 jar 包步骤3.1 确保正确地写完项目这一步就不消说了。 3.2 选中项目，点击右键鼠标单击项目名称，选中后u，单击右键，随即弹出菜单列表 3.3 选择export在弹出的列表中，选择”Export…”，随即弹出 Export 的窗口 3.4 选择导出可运行的 jar 文件在弹出的 Export 窗口中，点开 java ，选择 Runable JAR file 选项。 JAR file，单纯只是将项目打包成 jar 包，一般用于java lib的导出，用于给其他人依赖开发使用 Runable JAR file，顾名思义，可运行的 jar 包，能够被运行（因为随后要指定项目入口） 选择 Runable JAR file 选项，点击 Next ，弹出 Runable JAR file Export 窗口 3.4 配置 JAR 包在弹出的 Runable JAR file Export 窗口中， 修改 Launch configuration，选择为你的项目的入口，即有主方法的类 Export destination ，选择你想要导出的目录 Library handling，几个选项顾名思义，不做赘述 点击 Next 3.5 完成导出过程可能会消耗一定时间，地下有绿色进度条提醒进度。等待片刻，即可完成整个过程。 若项目有依赖第三方包，则有可能会弹出以下警示框，点击 OK 即可。 由于项目中可能存在一些不规范之初，在完成此步骤后，也许会弹出一个警告框。点击 Details 可查看详情，点击 OK 进入导出过程。 在 3.4 步骤中选择的目标目录中，即可看到导出的 jar 包。 四、可运行 JAR 文件结构解析4.1 解压上述步骤得到的 JAR 包文件目录结构见下图： META-INF 文件夹存放着项目的配置信息： maven依赖（如果有的话， META-INF 中包含了 maven 文件夹） 项目的 MANIFEST 信息（存放在 META-INF/MANIFEST.MF ）Manifest-Version、Class-Path、Main-Class，注意它们后面的内容与冒号之间均有一个空格，这个空格必不可少 其他文件夹都存放着 .class 文件（结构类似exlipse项目中的bin目录），若有第三方依赖，则也有第三方包的 .class 文件 四、服务器上运行将文件上传至服务器的步骤，本文就不赘述了。此处简单讲解一下运行过程。进入可运行的 jar 包目录，此处打开命令行，键入命令java -jar JSTUNServer.jar 5000 192.168.2.1 5001 192.168.2.3（java -jar [jar包] [参数1 参数2 参数3...]），敲回车，即可运行。 由于我选用的实例代码需要特殊的环境，此处报的错与本文论述的内容无关。此处就证明了上述过程的正确性。","tags":[{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"},{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"}]},{"title":"TLV（类型—长度—值）格式及编码","date":"2016-11-10T15:52:00.000Z","path":"2016/11/10/others/tlv-类型-长度-值-格式及编码/","text":"转自：http://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html 引子： 前段时间在项目中第一次接触TLV，项目中用这种格式来传输图片，语音等。 关于TLV TLV是一种可变的格式，意为：Type类型， Lenght长度，Value值。Type:该字段是关于标签和编码格式的信息;Length:该字段是定义数值的长度; Value:字段表示实际的数值。Type和Length的长度固定，一般那是2、4个字节（unsigned short或 unsigned long ,具体用哪种编码和解析统一就行了,本文就取unsigned long类型）；Value的长度有Length指定；在介绍编码和解码方法之前，需要先了解一下大端和小端。由于网络字节序统一用的是大端，主机字节序列有的是大端，有的是小端，根据平台不同有所差异。所以在编码的时候需要用到两个函数：htonl:主机字节序列转换成网络字节序列; ntohl: 网络字节序列转换成主机字节序列 编/解码编码方法： 1. 将类型type用htonl转换为网络字节顺序，指针偏移+4 2. 将长度length用htonl转换为网络字节顺序，指针偏移+4 3. 若值value数据类型为int、char、short，则将其转换为网络字节顺序，指针偏移+4；若值为字符串类型，写进后，指针偏移+length ……继续处理后面的tlv； 解码方法： 1. 读取type 用ntohl转换为主机字节序得到类型，指针偏移+4 2. 读取lengh用ntohl转换为主机字节序得到长度；指针偏移+4 3. 根据得到的长度读取value，若value数据类型为int、char、short，用ntohl转换为主机字节序，指针偏移+4；若value数据类型为字符串类型，指针偏移+length ……继续处理后面的tlv； TLV优点： 1一个编码值又称TLV(Type,Length,Value)三元组。编码可以是基本型或结构型，如果它表示一个简单类型的、完整的显式值，那么编码就是基本型(primitive)；如果它表示的值具有嵌套结构，那么编码就是结构型 (constructed)。 2 TLV打包解包效率高，省内存。","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"tlv","slug":"tlv","permalink":"http://cnneillee.github.io/tags/tlv/"}]},{"title":"Microg Google 新推的一个计划","date":"2016-11-04T13:47:00.000Z","path":"2016/11/04/android/microg-google新推的一个计划/","text":"https://microg.org/","tags":[{"name":"googe","slug":"googe","permalink":"http://cnneillee.github.io/tags/googe/"},{"name":"microg","slug":"microg","permalink":"http://cnneillee.github.io/tags/microg/"}]},{"title":"【转】Android ListView 与 RecyclerView 对比浅析缓存机制","date":"2016-11-04T13:21:00.000Z","path":"2016/11/04/android/【转】android-listview与recyclerview对比浅析缓存机制/","text":"从源码角度剖析ListView 与 RecyclerView 缓存机制的不同 https://zhuanlan.zhihu.com/p/23339185 原文地址：http://dev.qq.com/topic/5811d3e3ab10c62013697408 本文从我的另一个 blog http://www.cnblogs.com/neillee 中同步过来，同步过程使用了 python 脚本，文章cnblogs博客迁移过程详细介绍了同步过程，并附有源码！ http://www.cnblogs.com/neillee/p/6031708.html 截至博客迁移时，cnblogs上的访问量为：68","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Android Studio 的 Beta, Canary, Dev, Stable 四种 Channel 版本介绍、分析与选择","date":"2016-10-29T09:10:00.000Z","path":"2016/10/29/android/android-studio的beta-canary-dev-stable四种channel版本介绍-分析与选择/","text":"一、概述在 Android Studio下载官网 上，有如下介绍： 1234567Android Studio&apos;s built-in update mechanism can be set to receive updatesthrough any one of these 4 channels. * Canary: Bleeding edge, released about weekly. These are early previews released in order to obtain real-world feedback during development. The canary channel will always have the latest build, including updates to beta or stable releases. We recommend running canary builds side-by-side with a beta or stable installation. * Dev: Canary builds after a full round of internal testing get promoted into the Dev Channel. * Beta: Release candidates based on stable canary builds, released and updated to obtain feedback prior to the stable release. The beta channel will be updated with new stable builds until a new canary build goes to beta. * Stable: The official stable release, as available from the Android Developer site. 翻译过来就是就是这个意思： Android Studio内置的更新机制被设置成为如下四个可选的版本： Canary（金丝雀）：Bleeding Edge（一种最新的、因而也并非完美的技术）,大约周更。这是最早被发布的预览版本，为了能够在开发过程中获得真实世界的反馈。金丝雀版本会一直拥有最新的版本包括 beta、stable 发布版的更新。我们建议在安装金丝雀版本的同时再安装一个 beta 版本或者 stable 版本。 Dev（开发版）：金丝雀版本在经过完整的测试之后会被提升到Dev版本。 Beta（Beta 版）：发布预选基于稳定的金丝雀版本。被发布并更新以获取反馈先于稳定版本。Beta 版本将与一个新的稳定版本一起被更新，直到一个新的金丝雀版本被确定为 Beta 版本。 Stable（稳定版）：从 Android Developer 网站上可获得的稳定版本。 各个版本下载地址： Canary, Dev Beta Stable 二、增量更新此点参考 android studio增量更新 三、参考https://sites.google.com/a/android.com/tools/download/studiohttp://www.eefocus.com/xiaodan/blog/07-06/2419_db128.html","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"}]},{"title":"Android Studio 增量更新","date":"2016-10-29T08:59:00.000Z","path":"2016/10/29/android/android-studio增量更新/","text":"一、概述1.1 概念增量更新即是通过比较 本机安装版本 和 想要安装版本间的差异，产生一个差异安装包，不需要从官网下载并安装全量安装包，更不需要将本机已安装的版本下载，而仅仅只是安装此差异安装包即可完成整个更新过程。 1.2 增量更新前提两个版本之间是否能够进行增量更新的条件是：google是否提供了此种更新包。 通过进入网站 https://dl.google.com/Android/studio/patches/updates.xml能够查询到，对于此点提供如下两张图片进行说明 二、增量更新步骤2.1 本机android studio安装版本号查询方法1：Help –&gt; About 中的 Build Number方法2：[android studio安装目录]/build.txt中的版本号 2.2 下载增量包构造如下下载url： https://dl.google.com/android/studio/patches/AI-$FROM-$TO- patch-$PLATFORM.jar 其中， $FROM 为你当前 android studio 的 build number； $TO 为最新的 android studio 的build number； $PLATFORM 为系统平台，windodws 为 win , linux 为 unix ,mac os 为 mac 例如：在系统为windows的计算机上，将android studio从 145.3330264 更新到 145.3360264，构建url为：https://dl.google.com/android/studio/patches/AI-145.3330264-145.3360264 -patch-win.jar {% image http://images2015.cnblogs.com/blog/797098/201610/797098-20161029163527421-709385565.png '' '' %} 2.3 安装增量包 将安装包放置在android studio安装目录的根目录下 在根目录下，打开命令行（按住shift点鼠标右键 –&gt; 打开命令行） 在命令行内输入 java -classpath [jar包] com.intellij.updater.Runner install . ，回车运行。注意：记住最后面有个点，意思是将这个文件解压安装到当前目录 按照出现的向导提示进行 2.4 安装完成重启 Android Studio 即可 三、参考http://www.cnblogs.com/xiaoyang2009/p/5258380.htmlhttp://www.eefocus.com/xiaodan/blog/07-06/2419_db128.htmlhttps://dl.google.com/Android/studio/patches/updates.xmlhttp://blog.csdn.net/u011326653/article/details/48543643","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"}]},{"title":"暴走看啥片榜单","date":"2016-10-16T10:22:00.000Z","path":"2016/10/16/daily/暴走看啥片榜单/","text":"2016/10/14 复仇的女神们 金子 - 亲切的金子https://movie.douban.com/subject/1412579/ 新娘 - 杀死比尔vol1 https://movie.douban.com/subject/1291580/vol2 https://movie.douban.com/subject/1291584/ 森口优子 - 告白https://movie.douban.com/subject/4268598/ 金福南 - 金福南杀人事件始末https://movie.douban.com/subject/4826419/ 海莉 - 水果硬糖https://movie.douban.com/subject/1484091/ 梅拉尼 - 翻乐谱的女孩https://movie.douban.com/subject/1863980/ 格蕾丝 - 狗镇https://movie.douban.com/subject/1298759/ 詹妮佛 - 我唾弃你的坟墓https://movie.douban.com/subject/1299265/ 路易斯&amp;塞尔玛 - 末路狂花https://movie.douban.com/subject/1291992/","tags":[{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"}]},{"title":"【转】安装第三方库出现 Python version 2.7 required, which was not found in the registry","date":"2016-10-07T13:17:00.000Z","path":"2016/10/07/scripts/【转】安装第三方库出现-python-version-2.7-required-which-was-not-found-in-the-registry/","text":"安装第三方库出现 Python version 2.7 required, which was not found in the registry 建立一个文件 register.py 内容如下. 然后执行该脚本. import sys from _winreg import * # tweak as necessary version = sys.version[:3] installpath = sys.prefix regpath = &quot;SOFTWARE\\\\Python\\\\Pythoncore\\\\%s\\\\&quot; % (version) installkey = &quot;InstallPath&quot; pythonkey = &quot;PythonPath&quot; pythonpath = &quot;%s;%s\\\\Lib\\\\;%s\\\\DLLs\\\\&quot; % ( installpath, installpath, installpath ) def RegisterPy(): try: reg = OpenKey(HKEY_CURRENT_USER, regpath) except EnvironmentError as e: try: reg = CreateKey(HKEY_CURRENT_USER, regpath) SetValue(reg, installkey, REG_SZ, installpath) SetValue(reg, pythonkey, REG_SZ, pythonpath) CloseKey(reg) except: print &quot;*** Unable to register!&quot; return print &quot;--- Python&quot;, version, &quot;is now registered!&quot; return if (QueryValue(reg, installkey) == installpath and QueryValue(reg, pythonkey) == pythonpath): CloseKey(reg) print &quot;=== Python&quot;, version, &quot;is already registered!&quot; return CloseKey(reg) print &quot;*** Unable to register!&quot; print &quot;*** You probably have another Python installation!&quot; if __name__ == &quot;__main__&quot;: RegisterPy()","tags":[{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"}]},{"title":"在 Python 中调用 Mysql 出问题 ImportError:No module named MySQLdb.constants","date":"2016-10-07T13:16:00.000Z","path":"2016/10/07/scripts/在python中调用mysql出问题import-error-no-module-named-mysqldbconstants/","text":"遇到如下异常：File “C:\\Users\\Neil\\PycharmProjects\\ScrapyDouban\\book\\book\\database.py”, line4, in 解决方法：从 https://pypi.python.org/pypi/MySQL-python/1.2.5 中下载 MySQL-python-1.2.5.win32-py2.7.exe 并运行即可 上面只有32位的，下面这个链接里有32/64bithttp://www.codegood.com/archives/129 在运行 MySQL-python-1.2.5.win32-py2.7.exe 过程中，出现 Python version 2.7 required,which was not found in the registry问题，解决方法见http://blog.csdn.net/zklth/article/details/8117207","tags":[{"name":"database","slug":"database","permalink":"http://cnneillee.github.io/tags/database/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"【转】【Raspberry Pi】Unix NetWork Programming：配置unp.h头文件环境","date":"2016-10-02T03:20:00.000Z","path":"2016/10/02/others/【转】【raspberry-pi】unix-network-programming-配置unp.h头文件环境/","text":"一、初衷近期正在做网络计算编程的作业。要求平台为unix/linux，想着RaspberryPi装的Debian系统也是Linux改的，也应该能够勉强用着，所以就用它来做作业了！ 二、说明先把环境搭了（配置unp.h头文件环境），具体步骤见下文http://www.voidcn.com/blog/liyuefeilong/article/p-5697814.html 编译出错 ，如上图，解决方案：http://www.cnblogs.com/instorm/p/3415483.html","tags":[{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"},{"name":"raspberry-pi","slug":"raspberry-pi","permalink":"http://cnneillee.github.io/tags/raspberry-pi/"}]},{"title":"新入手的Raspberry Pi3拼装日志","date":"2016-10-02T01:23:00.000Z","path":"2016/10/02/daily/新入手的raspberry-pi3拼装日志/","text":"一、概述2016年暑假某宝入手Raspberry Pi 3，装机清单： 树莓派主板 亚克力外壳 小风扇 散热片 30G SD card 螺丝若干颗 因机型问题，可能与你的机器有微小差异 二、装机过程2.1 开箱一览树莓派主板（塑料袋装） + 安全指南 + 快速开始指南 + 包装纸盒 树莓派主板正反面 亚克力外壳 + 小风扇 2.2 亚克力外壳拼装及主板内嵌由于主板是内嵌进外壳的，因此需要在拼装外壳的同时，将主板同步嵌入其中。 由于亚克力外壳是被拆分成块的，相互之间的拼接完全是靠不同块儿之间的凹槽相互作用（卡住）而包裹主板的，因此需要明确不同块儿的位置和块儿及其上凹槽、镂空的作用才能真正拼好外壳，拼装过程宜缓而轻，切记一时用力过度就将外壳或者主板弄坏。 2.3 内嵌后四周展示上面 下面 左面 右面 前面 后面 2.4 安装风扇时特别注意首先，风扇扇叶的正反面切勿装反，不然起不到吹风的效果 其次，风扇引脚插入切勿错误红线（正极）4脚，黑线（负极）6脚 附引脚标号图（具体朝向：图片左边为主板主体，下方为usb接口等） 三、系统安装过程3.1 系统烧写3.1.1 插入一张内存大小大于4G的内存卡3.1.2 使用针对特定平台的软件对sd卡进行格式化 a. Windows i. 从 https://www.sdcard.org/downloads/formatter_4/eula_windows/ 下载SD卡格式化辅助工具 ii. 在你的机器（PC机）上安装并运行格式化辅助工具 iii. 在 “Options” 菜单中，将 “FORMAT SIZE ADJUSTMENT” 选项设置为 “ON” iv. 检查工具中选中的SD卡是你插入的待烧制系统的sd卡 v. 点击 “Format” 按钮 b. Mac i. 从 https://www.sdcard.org/downloads/formatter_4/eula_mac/ 下载SD卡格式化辅助工具 ii. 在你的机器（PC机）上安装并运行格式化辅助工具 iii. 选择 “Overwrite Format”iv.检查工具中选中的SD卡是你插入的待烧制系统的sd卡 v. 点击 “Format” 按钮 c. Linux i. 我们推荐使用 gparted (或者是命令行版本的 parted) ii. 将整张硬盘格式化为 FAT 格式 3.1.3 从官网下载NOOBShttps://www.raspberrypi.org/downloads/noobs/ 3.1.4 将NOOBS zip解压以下为 NOOBS_v1_9_2.zip 解压得到的文件，其他版本可能会有差异 3.1.5 将 3.1.4 中解压得到的所有文件拷贝到 3.1.2 中正确格式化了的SD卡内注意：有时可能会将 zip 解压成一个文件夹，但是要注意，请将里面的文件（有许多文件）拷贝到格式化了的SD卡中 3.1.6 烧写成功3.2 系统安装3.2.1 将 3.1 将经过 3.1 系列步骤得到的SD卡插入你的树莓派上3.2.2 连接好显示器，接通电源，等待显示器出现画面3.2.3 如果不出现故障，即可按屏幕显示的内容完成系统的安装debian系统安装界面 桌面一览 menu一览 wifi列表一览 四、参考1、树莓派官网 https://www.raspberrypi.org/2、树莓派下载频道 https://www.raspberrypi.org/downloads/","tags":[{"name":"daily","slug":"daily","permalink":"http://cnneillee.github.io/tags/daily/"},{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"}]},{"title":"安装 Python 第三方库 lxml 时遇到问题 ERROR:xslt-config 不是内部或外部命令，也不是可运行的程序","date":"2016-09-24T10:59:00.000Z","path":"2016/09/24/scripts/安装python第三方库lxml时-遇到问题-error-xslt-config不是内部或外部命令-也不是可运行的程序/","text":"一、概述lxml介绍http://lxml.de/ 二、问题ERROR: ‘xslt-config’ 不是内部或外部命令，也不是可运行的程序 三、解决方法Scrapy在Windows上的安装笔记http://blog.csdn.net/changdejie/article/details/17997299 四、拓展http://www.lfd.uci.edu/~gohlke/pythonlibs/","tags":[{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"【工具】云手机的网站","date":"2016-08-15T09:23:00.000Z","path":"2016/08/15/android/【工具】云手机的网站/","text":"https://www.testbird.com/ 本文从我的另一个 blog http://www.cnblogs.com/neillee 中同步过来，同步过程使用了 python 脚本，文章cnblogs博客迁移过程详细介绍了同步过程，并附有源码！ http://www.cnblogs.com/neillee/p/5773726.html 截至博客迁移时，cnblogs上的访问量为：","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"test","slug":"test","permalink":"http://cnneillee.github.io/tags/test/"}]},{"title":"【杂记】8.10大二暑期实习接近尾声","date":"2016-08-10T03:29:00.000Z","path":"2016/08/10/daily/【杂记】8.10大二暑期实习接近尾声/","text":"随着昨天下午工程文件、文档、app的交付，这次暑期实习算是告一段落了。 说来蛮开心的，这次实习是第一次实习，androidapp的更新（教师版1次、学生版2次）由我全程独立完成，因为带我们的学长对android知之甚少，对我的技术指导也十分有限，所以也姑且只能当作是一次项目的实战经历吧。 独立完成的缘故，所有东西都是自己独立完成，遇到问题也只能靠自己查找资料，想办法去解决。有一个较为切身的体会就是，小公司项目管理（包括代码管理、文档管理）很差，可能产品经理一个突发奇想的想法就被强加给你马上完成，这个时候程序员与产品经理之间的沟通仅仅只是口头交流连个需求文档都没有。有时，当你把功能实现了之后，产品经理一看，百般挑剔，然后又得改来改去。这时候你就会发现，之前口头说的都是不作数的，还是文档靠谱点儿，能省去大部分的需求确认时间以及后期各种修改问题。 ps：8号表妹来成都耍了，昨晚请他们吃了个饭，一起逛了春熙路，到那时中途下雨，哎～～～disapointed！接下来几天就好好放松一下吧！等12号回家了再好好写代码，学习！ 话说前几天加了张明云大神的微信群，一个不错的资源分享群。这几天还发现了一个技术点，gradle用法真的很强大，比如用它分包、签名等等～～后头可以好好学学gradle以及脚本的使用！","tags":[{"name":"reflecting","slug":"reflecting","permalink":"http://cnneillee.github.io/tags/reflecting/"}]},{"title":"【资源】mp3的外链资源","date":"2016-08-03T14:41:00.000Z","path":"2016/08/03/others/mp3的外链资源/","text":"做开发有时候会遇到需要mp3外链来进行程序的调试，但是自己搭建服务器比较麻烦，而主流的音乐平台都不提供外链音乐。晚上偶得一外链mp3的网站，标记之： http://9hok.com/","tags":[{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"【收藏】哪些比较好的在线编程网站？","date":"2016-08-01T06:27:00.000Z","path":"2016/08/01/others/【收藏】哪些比较好的在线编程网站？/","text":"https://zhuanlan.zhihu.com/p/21808087 本文从我的另一个 blog http://www.cnblogs.com/neillee 中同步过来，同步过程使用了 python 脚本，文章cnblogs博客迁移过程详细介绍了同步过程，并附有源码！ http://www.cnblogs.com/neillee/p/5725736.html 截至博客迁移时，cnblogs上的访问量为：…","tags":[]},{"title":"【杂记】2016年7月杂记","date":"2016-08-01T06:07:00.000Z","path":"2016/08/01/daily/【杂记】2016年7月杂记/","text":"度过了6月末的漫漫考试季，就跨入了假期的第一个月——7月份。 继学院各种频繁跳票、同学的各种不靠谱之后，终于于7月11日入职成都乐信达科技有限公司，开始为期一个月的实习时间。 上班挤着早高峰，公交转地铁，地铁从一号线的站头做到站尾，此间心酸自是不消说了。终归是体验了一把上班族的生活，也算一次社会体验吧！ 2016年7月份主要干的事儿：工作上：2016/07/11-2016/07/14，完成学生端[versionName: 2, versionCode: 1.0.2]版本，变更如下： 添加定价机制调整 学生匹配老师的定价机制由年级判断自动设定，改为学生自主设定 学生指定老师的课程及单价由完全学生自主设定，改为从服务器获取的老师所开设课程及单价 2016/07/15-2016/07/19，完成教师端[versionName: 5, versionCode: 1.0.5]版本，变更如下： 添加 添加课程 功能模块 展示教师当前所有已开设课程 提供教师课程增、删、改操作 2016/07/22-2016/08/01，完成学生端[versionName: 3, versionCode: 1.0.3]版本，变更如下： 主界面更改 三个功能项位置做了复杂的调整 新增单项课程button 由listview的上拉加载下拉刷新，改成外层整个外层布局的上拉加载下拉刷新，纯自定义的PullToRefreshLayout 功能模块更改 新增单项课程的教材列表查看 每本教材介绍信息查看、教材目录查看、教材评论添加点赞及分页显示功能 每本教材内容查看（使用网页进行显示） 学习方面：利用短暂的空余时间阅读了一本书《android群英传》，收获还是蛮大的。但是从今天[08-01]阅读《app研发录》来看，后者比前者讲得内容更加贴近一线，前者较适合初学者，后者较适合进阶者。今后再谈谈两本书的学习及收获吧！","tags":[{"name":"reflecting","slug":"reflecting","permalink":"http://cnneillee.github.io/tags/reflecting/"}]},{"title":"将 Eclipse 的项目导入 Android Studio","date":"2016-08-01T05:20:00.000Z","path":"2016/08/01/android/将eclipse的项目导入android-studio/","text":"一、概述最近正在实习公司迭代一个app，项目工程比较大，依赖的第三方服务、第三方库较多，比较复杂。因为公司项目一直是在ec上写的，没有androidstudio的版本。而大家都知道ec写代码远没有as写得爽。因此在完成公司要求的功能模块后，我自己尝试将项目引入到as中，并且为公司提供as版本，方便后续人员的开发迭代。同时也能够练习一下“怎样将ec项目导入到as”。 二、将ec项目打包1、选中项目-》右键-》Export…-&gt;Generate Gradle build files接着一路狂奔下一步，可能在ec中，你需要导出的项目关联了其他的项目，没事，只要选择你想要导出的那个就OK 2、突然弹出一个窗口，不对，好像直接覆盖公司项目？先备份，保平安 3、然后回到原来的workspace的目录看看。wocao，怎么全部放在一起了，分不清谁是谁了！！！GG 没关系，根本不虚，因为我在2中就将整个项目目录的文件备份了，够机智！ 4、我们来比对一下前后两个目录的文件变化在工作空间目录下，多出了 gradle 文件夹和 build.gradle 、 build.gradle 、 gradlew 、 gradlew.bat 、settings.gradle 文件;在 e-demo 目录下多出了 build.gradle 文件; 在 appcompat_v7 目录下多出了build.gradle 文件。这些文件和文件夹都和 Gradle 有关系，用于构建项目。 三、导入as前的一些动作1、手动修改工作空间目录下的 build.gradle 文件由于 Eclipse 的 ADT 插件已经很久没有更新了，自动生成的 Gradle 编译设置已经跟不上AndroidStudio的更新速度，所以我们需要手动修改一些内容。 a、修改H:\\android_develop_tools\\android_studio_workplace\\Gank-io\\gradle\\wrapper\\gradle-wrapper.properties的 distributionUrl=https\\://services.gradle.org/distributions/gradle-1.12-all.zip这一行，具体改成什么值，可以先自己新建一个as的android项目，然后去看对应的值，拷贝过来就OK，下同 b、修改工作空间目录下的build.gradle，将 classpath ‘com.android.tools.build:gradle:0.12.+’也更新为自己最近as项目的值 这样，就能够使得你当前的as项目能够支持目前要导入的项目 四、进入as开始导入1、首先 打开Android Studio，选择 Open an existing Android Studio project。 这一项可能只有在as之前没有打开项目的时候用的，但是如果你之前打开过项目，然后启动as则出现了以前项目的目录状态，怎么办呢？File-&gt;new -&gt;import projects即可 2、然后将目录选择到你的工作空间目录，点OK ！！！记住，是工作空间目录～～～因为ec导出来的东西全部一股脑的放在工作空间目录里，所以，不管了直接导入工作空间目录 3、随后，自动打开一个as窗口，迎来的是许多错误，莫方，点setting-》Build,Execution,Deployment-&gt;Gradle进行相关配置 4、这时候会出现各种错误，那么就按照错误提示去baidu、google，解决之后就应该没什么问题了 最重要的一个问题，可能之前在项目中使用了umeng、tusdk、alipay等第三方服务，强烈建议首先删了，然后自己去配置相关服务 四、参考http://blog.csdn.net/feixiaku/article/details/45155587/http://www.111cn.net/sj/android/74260.htm","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"}]},{"title":"一个关于 Android 异步处理的文章系列","date":"2016-07-22T07:42:00.000Z","path":"2016/07/22/android/一个关于android异步处理的文章系列/","text":"最近读了Android异步处理系列文章索引，感觉这个文章系列写得不错！可以作为参考","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Android 新手容易遇到的 Error retrieving parent for item No resource found that matches the given name  'Theme.AppCompat.Light'.Theme 出错的问题","date":"2016-07-13T07:57:00.000Z","path":"2016/07/13/android/android新手容易遇到的error-retrieving-parent-for-item-no-resource-found-that-matches-the-given-name-'Theme.AppCompat.Light'.Theme出错的问题/","text":"一、概述Error retrieving parent for item: No resource found that matches the given name ‘Theme.AppCompat.Light’.Theme 近期刚接手了一个项目，开发工具为eclipse，由于版本较低，且考虑到如果转androidstudio项目的话，会其他人的维护带来困难，所以想着还是维护项目原来的开发环境吧。 但是导入项目后，始终发现缺少v7包和v4包。 网上查找后，看到有一篇文章介绍到： support v4能到导入在sdk中的相应jar包，而support v6不行。 起初按照文章介绍一步一步照做。 通过导入sdk目录下的support-v7包（copy to workspace），然后设置成is library，再将项目添加此导入项目为依赖。 但是发现还是无济于事。 最后我想，support v4能，为啥support v7不行，于是将sdk中相应的jar导入，这回发现res目录下的themes都会报错error:Error retrieving parent for item: No resource found that matches the givenname ‘Theme.AppCompat.Light’.，找不到相关的类。 二、解决方法安卓开发中Theme.AppCompat.Light的解决方法","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"}]},{"title":"【腾讯云】腾讯云服务器搭建ftp服务器","date":"2016-07-07T18:34:00.000Z","path":"2016/07/08/others/【腾讯云】腾讯云服务器搭建ftp服务器/","text":"一、硬件描述1.1 云服务器：腾讯云云主机操作系统：Ubuntu Server 14.04.1 LTS 32位CPU：1核内存：1GB系统盘：20GB(本地磁盘)数据盘：0GB公网带宽：1Mbps 1.2 本地配置操作系统：windows 8.1 二、远程登陆服务器（ubuntu为例）2.1 操作教程官方文档：如何远程登录linux服务器 2.2 踩过的坑需要特别注意的是，在使用ssh与putty保存session登陆时，有一个坑！保存的session名称应避免与用户名冲突 三、搭建vsftpd服务器3.1 下载vsftpdredhat、centos等使用rpm包的发行版： 使用命令安装：yum install vsftpd 使用下载包安装：rpm -ivh vsftpd*.rpm Debian、Ubuntu等使用DEB包党的发行版： 使用命令安装：apt-get install vsftpd 若权限不足，则在命令前加 sudo ，下同 3.2 关闭selinux（Debian、Ubuntu等使用DEB包的系统可跳过此步骤）由于ftp涉及到端口开放的问题，所以我们把selinux关闭。 selinux的介绍见博文——SELinux深入理解ftp命令连接使用21端口，数据连接则有两种方式，即主动ftp和被动ftp。详细见博文——FTP两种工作模式介绍 一般在redhat、centos等使用rpm包的发行版默认安装有selinux，而Debian、Ubuntu等使用DEB包的发行版不默认安装 故对于Debian、Ubuntu等使用DEB包的服务器： 临时关闭(重启后，selinux会被打开)：setenforce 0 开启：setenforce 1 永久关闭：修改/etc/selinux/config文件，将SELINUX=enforcing改成SELINUX=disabled，重启机器 3.3 开启ftp服务 service vsftpd start/stop/restart 对于服务操作的一些命令： service [service名] [对service的操作如：start/stop/restart/status] 3.4 ftp用户管理出于安全考虑，一般不会使用系统用户来做登陆ftp的操作，因而大部分情况下会新建一个linux用户（单纯的一个用户，不具备bash），并用此用户进行ftp的登陆等操作 对于ftp用户的管理，其遵循linux的用户管理，根据/etc/passwd和etc/group来进行管理 新建用户： useradd test，passwd test 此处的useradd仅仅只是创建用户，而可替换为adduser（创建用户家目录\\home\\test）二者具体的区别在useradd与adduser的区别有介绍 3.5 通过对 vsftpd 配置文件的修改实现对vsftpd的精细化配置对于vsftpd具体的一些配置可通过修改配置文件来进行实现。 常见的配置文件有： 对于主配置文件，一些常用的配置： anonymous_enable=YES #是否开启匿名登陆 local_enable=YES #是否允许本地用户(即linux系统中的用户帐号)登录FTP服务器，默认设置为YES允许 write_enable=YES #是否允许本地用户对FTP服务器文件具有写权限，默认设置为YES允许 一项比较重要的配置：（文字不重要，重点看图） 用户登录FTP服务器后是否具有访问自己目录以外的其他文件的权限 设置为YES时，用户被锁定在自己的home目录中，vsftpd将在下面chroot_list_file选项值的位置寻找chroot_list文件 必须与下面的设置项配合 chroot_list_enable=YES 被列入此文件的用户，在登录后将不能切换到自己目录以外的其他目录 从而有利于FTP服务器的安全管理和隐私保护。此文件需自己建立 chroot_list_file=/etc/vsftpd/chroot_list 关于主配置文件的使用，史上最详细的vsftpd配置文件讲解(1)这篇文章写得很详细 四、踩过的坑4.1 不同系统配置文件的目录不同ubuntu不同于centos，ubuntu的配置文件目录不在 /etc/vsftpd/vsftpd.conf 而是在 /etc/vsftpd.conf 4.2 明确vsftpd.conf 文件中几个参数的作用 4.3 记得打开21端口的安全组购买云主机的时候，在做最初配置时，有引导安全组的配置。因为之前选了默认的打开“Linux安全组放通22端口”，而没打开ftp的21端口。所以，在配置完成ftp服务器时发现只能在服务器上登陆ftp，而通过外网无法访问ftp。这是一个比较容易被忽略的问题！（这是一个大坑） 官方文档：如何配置安全组？ 4.4 出现错误500 OOPS: vsftpd: refusing to run with writable root insidechroot() 如果启用chroot,必须保证ftp根目录不可写,这样对于ftp根直接为网站根目录的用户不方便,所以建议假如ftp根目录是/home/${cjh},则将访问权限改写如下chmod a-w /home/cjh 4.5 写文件时遇到-bash: data1.txt: Permission denied sudo sh -c “echo a &gt; 1.txt” 避免’sudo echo x &gt;’ 时’Permissiondenied’ 五、参考文献1、qcloud文档中心， https://www.qcloud.com/doc/product2、专题：vsftpd入门——安装、配置、案例与常见问题。玩转vsftpd服务器的四大高级配置，http://os.51cto.com/art/201008/222036.htm3、FTP两种工作模式介绍， http://www.softbar.com/blog/post/117.html4、SELinux深入理解， http://blog.csdn.net/myarrow/article/details/9856095/5、useradd 与adduser的区别，http://blog.csdn.net/deit_aaron/article/details/99847015、史上最详细的vsftpd配置文件讲解(1)， http://os.51cto.com/art/201008/221842.htm6、避免’sudo echo x &gt;’ 时’Permission denied’，http://blog.csdn.net/hejinjing_tom_com/article/details/7767127","tags":[{"name":"linux","slug":"linux","permalink":"http://cnneillee.github.io/tags/linux/"},{"name":"ftp","slug":"ftp","permalink":"http://cnneillee.github.io/tags/ftp/"}]},{"title":"【转】标记接口和标记注解注解","date":"2016-07-03T13:23:00.000Z","path":"2016/07/03/java/【转】标记接口和标记注解注解/","text":"Java中的标记接口和标记注解http://blog.sina.com.cn/s/blog_7fdce91f0101d93m.html","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"}]},{"title":"Android 常用控件集合","date":"2016-07-02T14:41:00.000Z","path":"2016/07/02/android/android常用控件集合/","text":"一、概述大部分程序员擅长开发，但是对于设计却知之甚少。这直接导致，程序员在初期开发出来的应用（大多为兴趣或实用导向）中看不中用。因此，有必要搜集整合一些设计资源，这样既能减轻程序员在设计上所耗费的时间，又能够提供一个相对较能接受的用户界面设计。 二、资源整合2.1 icon资源网站2.2 常用的lib2.2.1 Material Design Dimenshttps://github.com/DmitryMalkovich/material-design-dimens Default colors and dimens per Material Design guidelines and Android Designguidelines inside one library.能够提供一些默认的android控件的常用尺寸、配色等解决方案，再也不用在xml文件下code/design切来切去了，更无须为了查看一个控件的尺寸/颜色的调节而频繁地在将不必要的、小的代码更新提交至手机端进行检查。 例如： 2.2.2 ExpandableLayoutA expandable Layout to save space and reduce jump between Activity andFragment能够调节控件被展开后，激发父控件滑动以适应展开后的内容显示 2.2.3 AdvancedTextSwitcherhttps://github.com/SumiMakito/AdvancedTextSwitcher 仿照Google+在卡片上滚动显示最新评论的TextSwitcher。 2.2.4 MultipleStatusViewhttps://github.com/qyxxjd/MultipleStatusView 一个支持多种状态的自定义View,可以方便的切换到：加载中视图、错误视图、空数据视图、网络异常视图、内容视图。 2.2.5 HorizontalWheelViewhttps://github.com/shchurov/HorizontalWheelView 水平滚轮 2.2.6 AndroidGradientImageView图片颜色渐变https://github.com/skyfe79/AndroidGradientImageView 2.2.7 LovelyDialog漂亮的dialoghttps://github.com/yarolegovich/LovelyDialog 2.2.8 Image-Zoomer点击图片，放大Image zoom animations library for Android.https://github.com/code-crusher/Image-Zoomer 2.2.9 LikeAnimation仿twitter的点赞效果https://github.com/frogermcs/LikeAnimation 2.2.10 TEmptyViewTEmptyView是一个小轮子，希望能够更简单地设置EmptyView，免除每次设置emptyView都要写xml之苦。支持AdapterView(ListView/GridView等)、RecyclerView。Just a Wheel——A easy way to setEmptyView to ListView、GridView or RecyclerViewetc..https://github.com/barryhappy/TEmptyView 2.2.11 MoneyTextViewA custom Android TextView to display amounts of money in different formats.https://github.com/fabiomsr/MoneyTextView 2.2.12 打造最强RecyclerView Item侧滑菜单 长按拖拽Item 滑动删除Itemhttp://blog.csdn.net/yanzhenjie1003/article/details/52115566 2.2.13 刷新组件1、android-Ultra-Pull-To-Refresh 源码解析2、google官方推的[SwipeRefreshLayout] 2.2.14 voghDev/PdfViewPagerAndroid widget that can render PDF documents stored onSD card, linked as assets, or downloaded from a remote URL.https://github.com/voghDev/PdfViewPager","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"Android 应用市场集合","date":"2016-07-02T14:26:00.000Z","path":"2016/07/02/android/android应用市场集合/","text":"一、举例1.1 酷市场1.2 apkpure国外的应用市场，可不用FQ，没有google play的一些限制相当于google play的镜像，可以下载google play的应用 1.3 360手机助手1.4 腾讯应用宝1.5 百度手机助手1.6 豌豆荚二、参考1、现在比较流行的安卓应用市场有哪些？https://www.zhihu.com/question/47972508","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"【转】Android 内存、网络、界面性能响应优化的工具","date":"2016-07-02T08:07:00.000Z","path":"2016/07/02/android/android内存网络界面性能响应优化的工具/","text":"一、性能优化工具 性能分析，我理解有内存性能，IO性能, 界面性能，耗电等。 内存性能，用 debuggable 的 app 结合 mat 等专业工具可以分析。另外最近的 Leakcanary 很好用，但是要手动加入代码；合理猜测用xposed 写个模块 hook 掉这个 app 然后植入代码应该可行，待验证。 IO性能，Android 上没有什么好用的工具；不过 linux 内核支持，iotop 这个命令可以分析IO占用。可是通常的 Android ROM 编译的时候去掉了这个编译开关，结果没有这个功能。如果需要的话，需要自己修改编译参数打开这个开关(具体哪个忘了，xda 论坛可以搜索)，然后自己编译Android 内核；这个我曾经做过，如果感兴趣我可以写一篇文章。 界面性能；这个嘛，SDK就有很多工具，比如 HierarchyViewer，uiautomaterviewer 等，还有手机自带的开发者工具诸如过度绘制查看工具，cpu GPU 使用率等，选择较多。 耗电；简单来讲 Android 系统电池用量就可以看，也有专业工具 little eye 什么的。 二、举例1、LeakCanary——A memory leak detection library for Android and Java.github：https://github.com/square/leakcanary 博文：LeakCanary 中文使用说明http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/ 2、TraceView官网介绍：http://tools.android.com/tips/traceview 博文：http://bxbxbai.github.io/2014/10/25/use-trace-view/ 先mark一下，有空再研究 三、参考1、https://www.zhihu.com/question/39717451/answer/82738801","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"mysql命令（数据库备份与恢复）","date":"2016-07-01T05:13:00.000Z","path":"2016/07/01/database/mysql命令（数据库备份与恢复）/","text":"mysqldump -u root -p stu_infobase&gt;stu_infobase.sql","tags":[{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"}]},{"title":"MySQL 中一些简单但是新手容易犯的错误","date":"2016-06-29T15:50:00.000Z","path":"2016/06/29/database/mysql中一些简单但是新手容易犯的错误/","text":"一、概述本人近期使用mysql，由于是新手，常常碰到一些问题，因此，在这里做了一个错误备忘录。 二、错误罗列1、MySQL 记录不存在时插入 记录存在则更新的实现方法http://www.cnblogs.com/emanlee/p/3854812.htmlMySQL INSERT插入条件判断：如果不存在则插入http://my.oschina.net/jsan/blog/270161/ 2、插入数据报错Data truncation: Data too long for column插入的数据比字段长度更长，导致插入失败，要么缩短插入的数据，要么追加字段的长度。追加字段的长度：12 # 将学生表中的姓名追加长度到30 $ alter table student modify column studentName varchar(30); 使用此法也可以修改字段类型（从varchar到integer），但是谨慎使用！可能会带来某些问题！！！ 3、插入数据时，主键已存在由于主键是唯一标识各行数据的依据，所以主键必须不同，然而如果待插入数据的主键在表中已经存在，那么就会出现 Error Code: 1062Duplicate entry ‘xxx’ for key ‘PRIMARY’ 的错误解决方法，避免主键重复！！！com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException:Duplicate entry ‘2’ for key ‘PRIMARY’Error Code: 1062 4、mysql删除重复数据记录sql语句总结&#104;&#116;&#x74;&#112;&#58;&#x2f;&#x2f;&#x62;&#108;&#111;&#x67;&#46;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;&#47;&#x73;&#x68;&#101;&#x78;&#x69;&#110;&#x79;&#97;&#x6e;&#103;&#64;&#49;&#50;&#54;&#x2f;&#98;&#x6c;&#111;&#x67;&#x2f;&#x73;&#x74;&#x61;&#x74;&#x69;&#99;&#x2f;&#x31;&#51;&#54;&#x37;&#51;&#57;&#51;&#49;&#x32;&#x32;&#x30;&#49;&#x34;&#x31;&#49;&#50;&#51;&#x31;&#49;&#51;&#51;&#49;&#x33;&#x35;&#48;&#x2f; 5、模糊查询MySql模糊查询like通配符使用详细介绍http://blog.csdn.net/my2010sam/article/details/19109235 6、带条件插入http://www.2cto.com/database/201203/123987.htmlhttp://my.oschina.net/jsan/blog/270161/","tags":[{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"}]},{"title":"Mysql Bench 执行 SQL 语句批量操作数据所遇到的问题","date":"2016-06-29T15:39:00.000Z","path":"2016/06/29/database/mysql-bench执行sql语句批量操作数据所遇到的问题/","text":"一、错误rror Code: 1175. You are using safe update mode and you tried to update atable without a WHERE that uses a KEY column To disable safe mode, toggle theoption in Preferences -&gt; SQL Queries and reconnect. 二、原因处于安全考虑，防止因意外操作而删除大量的数据而做的设计。例如：需要将tableA表中的李四性别改为男，但是忘了写where，那么一般的后果是，表中所有人的性别均被改成了男。update tableA set gender = ‘男’还有一些程序员的个人疏忽造成用户数据的损坏，严重的可能丢失等！ 正是基于这一点，Mysql bench做了这样一个安全设计。 三、参考http://blog.csdn.net/amohan/article/details/9980315","tags":[{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"}]},{"title":"Excel “此单元格中的数字为文本格式，或者其前面有撇号” 设成数字格式","date":"2016-06-28T17:36:00.000Z","path":"2016/06/29/others/excel-此单元格中的数字为文本格式，或者其前面有撇号-设成数字格式/","text":"http://blog.csdn.net/sunfor/article/details/16357751","tags":[{"name":"office","slug":"office","permalink":"http://cnneillee.github.io/tags/office/"}]},{"title":"使用 MySQL 出现错误 MySQLSyntaxErrorException","date":"2016-06-28T17:35:00.000Z","path":"2016/06/29/database/使用mysql出现错误-mysql-syntax-error-exception-unknown-column-in-field-list/","text":"http://www.cnblogs.com/longfor/p/3751661.html com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException:Unknown column ‘????’ in ‘field list’","tags":[{"name":"exception","slug":"exception","permalink":"http://cnneillee.github.io/tags/exception/"},{"name":"database","slug":"database","permalink":"http://cnneillee.github.io/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"}]},{"title":"POI-HSSF and POI-XSSF - Java API To Access Microsoft Excel Format Files","date":"2016-06-28T07:56:00.000Z","path":"2016/06/28/java/poi-hssf-and-poi-xssf-java-api-to-access-microsoft-excel-format-files/","text":"一、概述HSSF和XSSF是apache开源项目POI中实现java面向Excel的两个接口。两者的区别在于，HSSF适用于Excel‘97(-2007)文档，而XSSF适用于Excel 2007 OOXML (.xlsx)。HSSF 和 XSSF 提供了许多用于工作表格创建、修改、阅读、撰写的方法。他们提供有： 特殊需求的低层次构建 针对只可阅读的的api 一个全用户的api（用于创建、阅读、修改XLS文件） 来自apache介绍 二、使用方法具体的使用方法在官网上有介绍，在此不赘述https://poi.apache.org/spreadsheet/quick-guide.html 三、期间踩的坑1、 WorkbookFactory 类找不到下载POI时，文件中存在多个jar包，编者预先只导入了 poi-3.14-20160307.jar ，从官网上得知此类位于org.apache.poi.ss.usermodel 包下，但是 poi-3.14-20160307.jar 这里面是不存在WorkbookFactory 类，最后发现它被放在 poi-ooxml-3.14-20160307.jar 这个包下。特此mark一波~~~","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"poi","slug":"poi","permalink":"http://cnneillee.github.io/tags/poi/"}]},{"title":"Java PIO 项目使用","date":"2016-06-28T07:05:00.000Z","path":"2016/06/28/java/java-pio项目使用/","text":"一、简介pio是apache的一个针对microsoft office的一个开源项目。Apache POI - the Java API for Microsoft Documents 官网地址：https://poi.apache.org/javadoc：https://poi.apache.org/apidocs/index.html 此项目分为多个componant：（截至本文写作时）Component APIsExcel (SS=HSSF+XSSF)Word (HWPF+XWPF)PowerPoint (HSLF+XSLF)OpenXML4J (OOXML)OLE2 Filesystem (POIFS)OLE2 Document Props (HPSF)Outlook (HSMF)Visio (HDGF+XDGF)TNEF (HMEF)Publisher (HPBF)Logging framework 二、使用Ⅰ Excle(SS=HSSF+XSSF) Ⅱ Word(HWPF+XWPF) Ⅲ PowerPoint(HSLF+XSLF)","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"poi","slug":"poi","permalink":"http://cnneillee.github.io/tags/poi/"}]},{"title":"mysql安装及卸载","date":"2016-06-27T11:56:00.000Z","path":"2016/06/27/database/mysql安装及卸载/","text":"一、关于mysqlMySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统)应用软件之一。来自百度 mysql mysql是一个免费的轻量型数据库（相对于oracle这种大型数据库而言）。mysql-installer-community-5.7.13.0.msi –&gt;安装包MySQL Workbench 6.3 CE –&gt;图形化管理界面 二、mysql下载常见的安装方式是官网下载 http://dev.mysql.com/点击Downloads-》windows选择windows或者其他平台，并进入相应下载页面进行下载这里下载得到的是一个安装器，能够通过此安装器下载相应的软件（见图） 三、mysql安装详情见 http://www.cnblogs.com/sshoub/p/4321640.html 四、卸载1、通过下载器installer将已经安装的全部卸载 2、然后退出installer，进入控制面板，卸载installer即可完成卸载过程 3、网上有些帖子提到删除regedit注册表信息，本人亲测过，通过上述卸载过程后，仍旧能够再次安装mysql","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"},{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"}]},{"title":"PDF 转 Word","date":"2016-06-20T07:57:00.000Z","path":"2016/06/20/others/pdf转word/","text":"一、刚需pdf转word，这个需求肯定是有的。但是大家都知道，pdf是用来排版打印的，所以编辑起来会比较麻烦，所以，大家都会尝试将pdf的内容转成word，然后再进行编辑。 二、方法1、用office word打开pdf虽然支持，但是排版还是会出现一些问题2、abbyyOCR软件，没用过，有待测试3、http://smallpdf.com有人推荐，也有人质疑，毕竟在服务器完成转化，有些不安全。4、WPS5、solid converter PDF pro6、nuance PDF professional7、汉王 PDF OCR8、nuance PDF professional 三、参考1、pdf转word有什么好用的软件？-知乎","tags":[{"name":"office","slug":"office","permalink":"http://cnneillee.github.io/tags/office/"},{"name":"pdf","slug":"pdf","permalink":"http://cnneillee.github.io/tags/pdf/"}]},{"title":"Android Studio 使用问题归结","date":"2016-06-11T12:31:00.000Z","path":"2016/06/11/android/android-studio使用问题归结/","text":"1、【知乎】在 Android Studio 中如何将依赖的 jar 包放在 SDK 的 android.jar 前？在编译原生 Contacts 应用时需用到非公开的 API，需要引入 framework 等 jar 包，但在 AndroidStudio 中 SDK 带的 jar 包的优先级最高，导致引入的 framework 等 jar 包无法被引用，请问如何将 framework 等 jar 包的优先级调成最高？https://www.zhihu.com/question/35628837#answer-37336542http://stackoverflow.com/questions/27441398/how-to-put-my-libraries-in-front- of-android-jar-by-editing-build-gradle-in-andro 2、【知乎】我使用 zxing 的 jar 包，在 6.0 系统上（Nexus 5x 安卓 6.0.1 官方系统）扫描时成像是反的？我使用 zxing 的 jar 包，在6.0系统上（Nexus 5x，安卓 6.0.1 官方系统）扫描时成像是反的怀疑是 jar 包太老了，有最新的 jar 包么？丢个我试试在 github 上看了下，没有最新的 jar 包，老外都用 AS 了，一下子暂时也迁移不过去，谁有最新的 zxing 的 jar 的话给个我试试，有 demo 最好，怕我用的方法也过时了 回答：手机的锅，具体解决待查方法https://www.zhihu.com/question/46747096 3、错误集合Android开发各类常见错误解决方案http://www.jianshu.com/p/c5db81cbc438","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"Github 提交失败并报错java.io.IOException Authentication failed","date":"2016-06-11T12:04:00.000Z","path":"2016/06/11/git/github提交失败并报错java.io.ioexception-authentication-failed/","text":"一、概述我最近在写一个 android 的项目。软件：android studio、Android studio VCS integration（插件）Android studio VCS integration插件：使用此插件结合github进行代码版本管理近期出现的问题：12345678919:29:47.581: [DailyZHIHU] git -c core.quotepath=false push --progress--porcelain origin refs/heads/master:master java.io.IOException: Authentication failed: at org.jetbrains.git4idea.ssh.SSHMain.authenticate(SSHMain.java:298) at org.jetbrains.git4idea.ssh.SSHMain.start(SSHMain.java:172) at org.jetbrains.git4idea.ssh.SSHMain.main(SSHMain.java:137) fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 能够发现，在本地是被提交了的，但是在github上没有提交成功。结果想在本地check changes/commit的时候，却是no changes的。截图如下： 二、解决办法1、首先，确保各项设置全部正确（github连接成功、git.exe连接成功） 2、其次，将SSH executable：Built-in/Native选择成为Native 关于SSH executable：Built-in/Native的解释：Specify the version of SSH to be used with Git. Native means that the native SSH will be used. Built-in means that the implementation provided by Android Studio will be used. The native implementation might cause hangups on some platforms. In nativecase, you also might need to configure ssh-askpass for your platform toreceive GUI prompts for passwords. 三、参考https://bitbucket.org/dmitry_cherkas/jetbrains-bitbucket-connector/issues/20 /clone-failed-could-not-read-from-remotehttp://www.weixingon.com/s/android+studio+vcshttp://stackoverflow.com/questions/17211697/android-studio-vcs-integration","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"git/github","slug":"git-github","permalink":"http://cnneillee.github.io/tags/git-github/"}]},{"title":"Material Design - CollapsingToolbarLayout","date":"2016-05-20T12:22:00.000Z","path":"2016/05/20/android/material-design-collapsingtoolbarlayout/","text":"一、概述CollapsingToolbarLayout是Material Design的一个Layout，直接继承于FrameLayout. 二、使用1、导包2、使用 - 设置相关属性三、参考1、https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html2、http://www.jianshu.com/p/b21fbf38aa25#","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"各种各样转义符号的对照表、转换方法","date":"2016-05-19T14:02:00.000Z","path":"2016/05/19/others/各种各样转义符号的对照表-转换方法/","text":"一、对照表1、&amp;nbsp|&amp;quot|&amp;amp|&amp;lt|&amp;gt等html字符转义","tags":[{"name":"tools","slug":"tools","permalink":"http://cnneillee.github.io/tags/tools/"}]},{"title":"RecyclerView使用时遇到的问题","date":"2016-05-08T16:26:00.000Z","path":"2016/05/09/android/recyclerview使用时遇到的问题/","text":"一、概述二、常见问题：1、如何为RecyclerView的Item设置点击事件？1.1 问题描述类似于下列方法1RecyclerView.setOnItemClickListener(OnClickListener) 1.2 解决措施：a、在相应的ViewHolder中添加getItemView()123456789View itemView; //添加成员变量public MyViewHolder(View itemView) &#123; super(itemView); this.itemView = itemView //绑定成员方法 ...&#125;public View getItemView() &#123; //外部获得View的方法 return itemView;&#125; b、在Adapter的onBindViewHolder()方法（数据与ViewHolder建立绑定的方法里）添加监听事件123456789@Overridepublic void onBindViewHolder(MyViewHolder holder, final int position) &#123; holder.getItemView().setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; //此方法中的position、v相对应，可执行相应的针对Item的操作 &#125; &#125;);&#125; 2、RecyclerView的Adapter根据position如何获得对应的ItemView？1.1 问题描述12类似于下列方法RecyclerViewAdapter.getItemView(int position) 1.2 解决措施：","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"MaterialCalendarView使用时遇到的问题","date":"2016-05-06T17:18:00.000Z","path":"2016/05/07/android/materialcalendarview使用时遇到的问题/","text":"一、概述MaterialCalendarView是一个开源项目。功能强大支持多选、单选、标注等。 二、问题1、其继承自ViewGroup，故与CalendarView半毛钱关系都没有，完全是一个新的类2、其子类CalendarDay是经过调整的1234CalendarDay date = new CalendarDay();......Log.e(LOG_TAG, &quot;Date选中日期：&quot; + date.getDate().getYear() + &quot;-&quot; + date.getDate().getMonth() + &quot;-&quot; + date.getDate().getDay());Log.e(LOG_TAG, &quot;Calendar选中日期：&quot; + date.getCalendar().get(Calendar.YEAR) + &quot;-&quot; + (date.getCalendar().get(Calendar.MONTH) + 1) + &quot;-&quot; + date.getCalendar().get(Calendar.DAY_OF_MONTH)); 得到的结果为12Date选中日期：116-3-6Calendar选中日期：2016-4-30 即： 123CalendarDay.getDate().getYear()得到的年份 = 真实年份 - 1900CalendarDay.getDate().getMonth()得到的月份 = 真实年份 - 1CalendarDay.getDate().getDay()得到的日 = 星期数 - 1 3、关于DayViewDecorator类此类为抽象类，定义如下123456789101112131415161718192021/** * Decorate Day views with drawables and text manipulation */public interface DayViewDecorator &#123; /** * Determine if a specific day should be decorated * * @param day &#123;@linkplain CalendarDay&#125; to possibly decorate * @return true if this decorator should be applied to the provided day */ boolean shouldDecorate(CalendarDay day); /** * Set decoration options onto a facade to be applied to all relevant days * * @param view View to decorate */ void decorate(DayViewFacade view);&#125; 实际使用时，只需实现上述两个方法即可，例如1234567891011121314151617181920public class EventDecorator implements DayViewDecorator &#123; private final int color; private final HashSet&lt;CalendarDay&gt; dates; public EventDecorator(int color, Collection&lt;CalendarDay&gt; dates) &#123; this.color = color; this.dates = new HashSet&lt;&gt;(dates); &#125; @Override public boolean shouldDecorate(CalendarDay day) &#123; return dates.contains(day); &#125; @Override public void decorate(DayViewFacade view) &#123; view.addSpan(new DotSpan(5, color)); &#125;&#125;","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Android 开发期间使用真机调试但系统无法识别出真机","date":"2016-05-04T09:05:00.000Z","path":"2016/05/04/android/android开发期间使用真机调试但系统无法识别出真机/","text":"一、前言前些天重装了系统，好不容易把所有的软件装好，结果发现打开android studio真机调试却出了问题。 二、症状：2.1 手机端设置完全没问题（打开了调试模式……）2.2 电脑端右下角不出现插入设备的图标（安全删除硬件并弹出媒体） 2.3 打开设备管理器，发现手机存在于便携设备项中，而其他设备的ADBInterface上却有个惊叹号，如下图：（由于解决问题的时候未截图，故下图来自网上） 2.4 特别的，如果是因为其他原因造成系统无法识别出真机的，可参阅参考文章中的第二篇博文—[AndroidStudio连接真机没反应](http://blog.csdn.net/wenxin2011/article/details/50845563) 三、原因：ADB Interface的驱动出了问题，在系统指定的目录中找不到usb driver，所以需要我们指定 四、解决方法：4.1 自己指定usb driver4.2 google在android sdk中提供了usb driver（在sdk manager的中，extra下有一个驱动的下载，请勾选下载） 4.3 如已下载，则usb driver存在于【android-sdk-windows安装目录】\\extras\\google\\usb_driver 4.4 具体操作见参考文章中的第一篇博文Win7 x64 Eclipse无法识别手机 / adb interface有黄色感叹号，无法识别 五、参考文章1、Win7 x64 Eclipse无法识别手机 / adb interface有黄色感叹号，无法识别2、Android Studio连接真机没反应","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"github的git.exe的目录所在","date":"2016-04-30T07:26:00.000Z","path":"2016/04/30/git/github的git-exe的目录所在/","text":"Github 的 git.exe 位于1C:\\Users\\【username】\\AppData\\Local\\GitHub\\PortableGit_25d850739bc178b2eb13c3e2a9faafea2f9143c0\\cmd\\git.exe 详见图片","tags":[{"name":"git/github","slug":"git-github","permalink":"http://cnneillee.github.io/tags/git-github/"}]},{"title":"Log 打印日志遇到的问题","date":"2016-04-24T15:44:00.000Z","path":"2016/04/24/java/log打印日志遇到的问题/","text":"Log日志打印出现空指针问题 AndroidRuntime(372): Caused by: java.lang.NullPointerException: println needsa message使用Log.e(TAG,object)打印日志，由于object为null，Log内部调用object.toString()方法时，产生空指针问题","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"}]},{"title":"Android 中的 Dialog 的使用方法","date":"2016-04-22T07:58:00.000Z","path":"2016/04/22/android/android中的dialog/","text":"一、Dialog概述二、使用系统自带的Dialog1、新建BuilderAlertDialog.Builder builder = new AlertDialog.Builder(StoryActivity.this);dialog.show(); 2、通过builder创建dialog123456AlertDialog dialog = builder.setView(view).setTitle(&quot;查看评论&quot;).setNegativeButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; dialog.dismiss(); &#125; &#125;).create(); 3、关于NegativeButton、PositiveButton、NeutralButton早期版本，NegativeButton最右侧、PositiveButton最左侧、NeutralButton中间 在android4.0中，NegativeButton在最左侧、PositiveButton在最右侧 二、如何自定义Dialog1、特别注意！！！（首先明确）1.1 setContentView、setView与show()方法相对位置引起异常如使用setContentView、setView方法来自定义View的话，须与show()方法保持先后顺序 12dialog.show();dialog.setContentView(contentView); 2.2 自定义Dilog之后，setTitle等方法无效须自行在界面中添加 2、步骤同上3、设置界面使用以下方法实现自定义界面 12345setView(View view)setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight,int viewSpacingBottom)setContentView(@LayoutRes int layoutResID)setContentView(View view)setContentView(View view, ViewGroup.LayoutParams params) //params Layout parameters for the view. 4、自定义Dialog的宽高1234Window window = this.getWindow();WindowManager.LayoutParams params = window.getAttributes();params.height = dialogHeight; //设置你想要的宽高window.setAttributes(params); 5、获得屏幕的宽高123DisplayMetrics d = context.getResources().getDisplayMetrics(); // 获取屏幕宽、高d.heightPixels //取得px单位的值d.xdpi //取得dp单位的值","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"AlertDialog 使用时遇到问题","date":"2016-04-21T06:49:00.000Z","path":"2016/04/21/android/alertdialog使用时遇到问题/","text":"1、其内 de 子控件高宽度为 0？1234567AlertDialog.Builder builder = new AlertDialog.Builder(StoryActivity.this);View view = LayoutInflater.from(StoryActivity.this).inflate(R.layout.dialog_qr_display, null, false);ImageView iv = (ImageView)view.findViewById(R.id.iv);AlertDialog dialog = builder.setView(view).setTitle(&quot;分享&quot;).create();dialog.show();iv.getWidth(); //为0iv.getHeight(); //为0 通过下列代码解决 123ViewGroup.LayoutParams pm = ivQR.getLayoutParams();pm.width;//不为0pm.height;//不为0","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"Android 中将 View 保存为图片","date":"2016-04-19T03:14:00.000Z","path":"2016/04/19/android/view保存为图片/","text":"一、概述简书、微博、便签等都有将文章保存为图片的功能。笔者臆测，此功能的实现原理如下。 二、实现 2.1将View保存成Bitmap对象方法1（亲测有效）12345678910private Bitmap makingView2Bitmap(View view) &#123; if (view == null) &#123; return null; &#125; Bitmap screenshot; screenshot = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888); Canvas c = new Canvas(screenshot); view.draw(c); return screenshot;&#125; View成员方法getDrawingCache()，其源码如下（有问题，得出来的Bitmap始终为null）下次解决123456789//android源码/*** Calling this method is equivalent to calling &lt;code&gt;getDrawingCache(false)&lt;/code&gt;.&lt;/p&gt;* @return A non-scaled bitmap representing this view or null if cache is disabled.* @see #getDrawingCache(boolean)*/public Bitmap getDrawingCache() &#123; return getDrawingCache(false);&#125; 参考文章http://www.tuicool.com/articles/RvIjeibhttp://blog.csdn.net/huangbiao86/article/details/9053429/http://www.2cto.com/kf/201602/488933.html 2.2将Bitmap保存成本地文件（图片）这个问题比较简单，就是平常的保存文件，这里只放核心代码。如不知如何保存文件，请自行百度1bm.compress(Bitmap.CompressFormat.PNG, 100, new FileOutputStream(file));//file为保存文件 三、特别说明1、Bitmap.CompressFormat.JPEG据说得到的背景是黑色的，PNG得到的是白色的2、TextView截取时，背景默认是黑色的（这也造成我第一次保存的时候，发现缩略图是好好的（白底黑字），但是点进去查看的时候是全黑（黑底黑字））在截取之前，最好做如下设置：12mTvContent.setTextColor(getResources().getColor(R.color.black));mTvContent.setBackgroundColor(getResources().getColor(R.color.white)); 这样得到的图片就是正常的白底黑字","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"arrays.xml文件中添加drawable数组的问题","date":"2016-04-18T15:40:00.000Z","path":"2016/04/18/android/arrays.xml文件中添加drawable数组的问题/","text":"一、问题描述今天遇到一个需求，将java中的数组搬进arrays.xml文件中1234567R.drawable.menu_share_pic_item,R.drawable.menu_share_wechat_item,R.drawable.menu_share_friendcircle_item,R.drawable.menu_share_qzone_item,R.drawable.menu_share_qq_item,R.drawable.menu_share_copylink_item,R.drawable.menu_share_more_item xml文件123456789&lt;integer-array name=&quot;share_menu_img&quot;&gt; &lt;item&gt;@drawable/menu_share_pic_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_wechat_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_friendcircle_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_qzone_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_qq_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_copylink_item&lt;/item&gt; &lt;item&gt;@drawable/menu_share_more_item&lt;/item&gt;&lt;/integer-array&gt; java中引用 1int[] menuShareImg = mContext.getResources().getIntArray(R.array.share_menu_img); 发现获得值全0而改用string存储，则使用时会报找不到文件的错误 二、问题解决暂时未解决，目前比较忙，下次再弄。 线上写的blog，刚刚断电、断网了！然后一提交，这个界面没保存，写的啥都没了，这回是重写的，求我此时心里的阴影面积！！！","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"HashMap 封装的数据用循环快速添加进 list 中产生的数据集全部相同的问题","date":"2016-04-18T15:23:00.000Z","path":"2016/04/18/java/HashMap封装的数据用循环快速添加进list中产生的数据集全部相同的问题/","text":"一、问题概述在一次使用SimpleAdapter时，Data需要使用传入一条数据（Image、Text），该数据条使用HashMap封装。在用HashMap封装的数据用循环快速添加进list中产生了数据集全部相同的问题 二、问题解决观察下面两段代码,发现只是map的声明位置不同，但是运行出的结果却相去甚远。 123456789101112131415161718//代码一List&lt;HashMap&lt;String, Object&gt;&gt; mMenuData = new ArrayList&lt;&gt;();HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();for (int i = 0; i &lt; menuShareImg.length; i++) &#123; map.put(&quot;shareStr&quot;, menuShareStr[i]); map.put(&quot;shareImg&quot;, menuShareImg[i]); mMenuData.add(map);&#125; //代码二List&lt;HashMap&lt;String, Object&gt;&gt; mMenuData = new ArrayList&lt;&gt;();for (int i = 0; i &lt; menuShareImg.length; i++) &#123; HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;shareStr&quot;, menuShareStr[i]); map.put(&quot;shareImg&quot;, menuShareImg[i]); mMenuData.add(map);&#125; 代码一会产生上述问题，代码二则能消除问题。 三、说明产生问题的原因很简单。发生了覆盖。仔细一想就能想明白~~","tags":[{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"},{"name":"hashmap","slug":"hashmap","permalink":"http://cnneillee.github.io/tags/hashmap/"}]},{"title":"Android 中的各类 Bar","date":"2016-04-17T12:39:00.000Z","path":"2016/04/17/android/android中的各类bar/","text":"一、ToolBar1.1 概述Google在2015的IO大会上发布了系列的MaterialDesign风格的控件。其中ToolBar是替代ActionBar的控件。由于ActionBar在各个安卓版本和定制Rom中的效果表现不一，导致严重的碎片化问题，ToolBar应运而生。 与ActionBar区别显示效果跟ActionBar并没有区别。优点：自定义视图的操作更加简单，状态栏的颜色可以调（Android 4.4以上）。 1.2 使用方法1.2.1 导包(配置Gradle)1compile &apos;com.android.support:appcompat-v7:22.0.0&apos; 1.2.2 在AndroidManifest.xml设置此Activity的主题12&lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;&lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt; 注意：务必将ActionBar消除，否则Activity将会崩溃 1.2.3 重定义主题(颜色等信息)Android 4.4及以上，在values文件夹中新建values-v19.xml，内容如下123456789101112&lt;resources&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;!--Toolbar颜色--&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@android:color/holo_blue_bright&lt;/item&gt; &lt;!-- 状态栏颜色 --&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@android:color/holo_blue_bright&lt;/item&gt; &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; Android 4.4以下： 12345678&lt;resources&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;!--Toolbar颜色--&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/Indigo_colorPrimary&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; 1.2.4 ToolBarxml文件中定义12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.v7.widget.Toolbar xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/toolbar&quot; android:layout_height=&quot;wrap_content&quot; android:layout_width=&quot;match_parent&quot; android:background=&quot;?attr/colorPrimary&quot; //设置toolbar的背景颜色 android:minHeight=&quot;?android:attr/actionBarSize&quot;&gt; &lt;!-- 最小高度 --&gt;&lt;/android.support.v7.widget.Toolbar&gt; android:fitsSystemWindows=&quot;true&quot;防止ToolBar与StatusBar融合 1.2.5 java代码中实现1234567891011121314151617private Toolbar mToolbar; private WebFragment mWebFragment; private long mBeforeTime; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123; //版本检测 SystemBarTintManager tintManager = new SystemBarTintManager(this); mToolbar = (Toolbar) findViewById(R.id.toolbar); tintManager.setStatusBarTintEnabled(true); //更改状态栏设置 setSupportActionBar(mToolbar); //将ToolBar设置成ActionBar tintManager.setStatusBarTintResource(android.R.color.holo_blue_bright); &#125; getSupportActionBar().setHomeButtonEnabled(true); //设置返回键可用 getSupportActionBar().setDisplayHomeAsUpEnabled(true); &#125; 1.3 参考文章http://blog.csdn.net/qq284565035/article/details/47086439http://www.itstrike.cn/Question/9ae75549-b316-4844-938e-c22c0f4e6692.html 二、ActionBar2.1 概述ActionBar位于Activity的顶部，可用来显示activity的标题、Icon、Actions和一些用于交互的View。它也可被用于应用的导航。ActionBar 是在Android 3.0(API11）中加入到SK中的，想在低版本中使用ActionBar有两种选择：使用http://actionbarsherlock.com 或使用SupportLibrary v7。 图示：其中，[1]是ActionBar的图标，[2]是两个action按钮，[3]是overflow按钮 2.2、使用方法2.2.1低版本（API11）开发API11以下的程序，首先必须在AndroidManifest.xml中指定Application或Activity的theme是Theme.Holo或其子类，否则将无法使用ActionBar。 2.2.1创建Actions类似于Menu即可在java代码中添加，也可在xml文件中添加。下面贴上xml代码： 123456789101112&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt; &lt;item android:id=&quot;@+id/action_refresh&quot; android:orderInCategory=&quot;100&quot; android:showAsAction=&quot;always&quot; android:icon=&quot;@drawable/ic_action_refresh&quot; android:title=&quot;Refresh&quot;/&gt; &lt;item android:id=&quot;@+id/action_settings&quot; android:title=&quot;Settings&quot;&gt; &lt;/item&gt; &lt;/menu&gt; 说明： showAsAction 属性（定义每个 Action 是如何显示的） always 表示永远显示在 ActionBar 中，如果屏幕空间不够则无法显示 ifRoom 表示屏幕空间够的情况下显示在 ActionBar 中，不够的话就显示在 overflow 中 never 则表示永远显示在 overflow 中 在java代码中,通过重写onCreateOptionsMenu，以使用上面的menu123456@Override public boolean onCreateOptionsMenu(Menu menu) &#123; MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.mainmenu, menu); return true; &#125; 2.2.2 Action的按钮交互如果一个Action被单击，对于activity中的onOptionsItemSelected()将被调用。 12345678910111213141516@Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; // action with ID action_refresh was selected case R.id.action_refresh: Toast.makeText(this, &quot;Refresh selected&quot;, Toast.LENGTH_SHORT).show(); break; // action with ID action_settings was selected case R.id.action_settings: Toast.makeText(this, &quot;Settings selected&quot;, Toast.LENG).show(); break; default: break; &#125; return true; &#125; 说明：onCreateOptionsMenu() 只会被调用一次。若想改变 Menu，可以调用 invalidateOptionsMenu()，这会使 onCreateOptionsMenu() 将会再次被调用。 2.3 自定义ActionBar2.3.1 隐藏与显现1234ActionBar actionBar = getActionBar(); actionBar.hide(); // more stuff here... actionBar.show(); 2.3.2 改变title123ActionBar actionBar = getActionBar(); actionBar.setSubtitle(&quot;mytest&quot;); actionBar.setTitle(&quot;vogella.com&quot;); 2.3.3 隐藏导航getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION); 2.3.4 使用全屏模式对于Android 4.4 (API 19)应用程序可以使用全屏模式，代码如下 12345678// This method hides the system bars and resize the content private void hideSystemUI() &#123; getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar // remove the following flag for version &lt; API 19 | View.SYSTEM_UI_FLAG_IMMERSIVE); &#125; 2.3.4 使用Split action bar启用split action bar可在 AndroidManifest.xml 中定义 android:uiOptions=&quot;SplitActionBarWhenNarrow&quot; 参阅 http://blog.csdn.net/lsdmx2016/article/details/17415911 2.4 在Fragment中给action bar添加action在 onCreate() 中调用 setHasOptionsMenu(true)。Android Framework 会调用 Fragement 中的 onCreateOptionsMenu() 来向 Activity 的 Menu 中添加 item。 2.5 动态设置action bar2.5.1 自定义View12actionBar.setCustomView(R.layout.actionbar_view); EditText search = (EditText) actionBar.getCustomView().findViewById(R.id.searchfield); 2.5.2 Action View（示例见参考文章）Action View 控件可以替换 Action bar 的 Action 按钮图标。可以利用这个特点将某个 Action 项替换成一个 ProgressBar。可通过android:actionLayout 或 android:actionViewClass 来定义一个布局文件或Widg来作为 Action 的 action view。 2.5.3 Action Provider（示例见参考文章）Action Provider 提供了在单个组件里提供多种交互方式的方法。它可以用来创建 action view，动态弹出子 menu，处理 action 调用事件。基类为 ActionProvider 目前 Android 平台提供两种 action provider：MediaRouteActionProvider 和 ShareActionProvider。 下面以一个例子计算 ShareActionProvider 的用法。使用这个 action provider 可以让程序从注册了 Intent.ACTION_SEND 的 Intent 中获取。 2.6 使用程序图标导航2.6.1 使用程序图标作为 home iconAction Bar的左侧图标称为home icon，可为这个图标设置一个Action。推荐做法是当按了这个图标，返回到Home Activity中。 &gt;actionBar.setHomeButtonEnabled(true);//或者使用actionBar.setDisplayHomeAsUpEnabled(true); 在onOptionsMenuItemSelected() 中使用android.R.id.home并启用actionbar的HomeIcon case android.R.id.home: 2.7 参考文章：1、http://blog.csdn.net/bigconvience/article/details/28886241 特别说明1、Android Studio 中按照默认的 Activity 启动时，不显示 ActionBar 的问题在Eclipse新建一个 MainActivity extends Activity 时，能够正常显示 ActionBar，如图：但在 AS 中 extends Activity，不显示 ActionBar，如图但在 AS 中 extends ActionBarActivity，能够正常显示 ActionBar，但是会显示该类过时 推荐使用 extends AppCompatActivity 同样的代码在 Eclipse 和 Android Studio 中会出现较大差异，需要区别对待。AppCompatActivity 是为了兼容性考虑！造成这种差异的原因是主题的问题！！！在主题方面，还有很多不懂，今后加强学习 （参考文章：http://m.blog.csdn.net/article/details?id=46858249） 三、StatusBar StatusBar 是一个半透明阴影，View 可以伸展到其后面。 四、NavigationBar NavigationBar 一般是纯黑不能使用的。Google 提供 NavigationBar 的透明与使用的可能，却没有推荐使用。个人觉得是为了给Bottom navigation 做准备。这里不讨论 Bottom navigation 的优劣(我是 Bottom navigation 黑)。 4.1 兼容性android 从 4.4 开始，开始支持UI使用 StatusBar 与 NavigationBar 的范围。 4.2 沉浸式体验4.3 使用实例4.3.1 style 配置在 value 中的 styles.xml 中设置： 在 value-v19 中的 styles.xml 中设置(为了兼容4.4) 在 value-v21 中的 styles.xml 中设置","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Android 中 versionCode & versionName","date":"2016-04-16T07:50:00.000Z","path":"2016/04/16/android/android中versioncode-versionname/","text":"原文来自：http://blog.csdn.net/wh_19910525/article/details/8660416 ，略有修改 一、概述Android的版本可以在androidmainfest.xml中定义，主要有android:versionCode和android:versionName 二、解析1、简要区分 android:versionCode: 主要是用于版本升级所用，是INT类型的，第一个版本定义为1，以后递增，这样只要判断该值就能确定是否需要升级，该值不显示给用户。 android:versionName: 这个是我们常说明的版本号，由三部分组成..,该值是个字符串，可以显示给用户。 2、举例关于版本号有两个值，如下面的例子 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.xxx.xxx&quot; android:versionCode=&quot;2&quot; android:versionName=&quot;1.1&quot;&gt; ...... versionCode 是给设备程序识别版本(升级)用的，必须是一个 interger 值，整数，代表 app 更新过多少次 versionName 是给用户看的，可以写1.1 , 1.2等等版本 三、拓展1、延伸出另外一个问题：当app需要校对版本的时候怎样读取这个值？1.1取manifest.xml123PackageManager pm = context.getPackageManager();//context为当前Activity上下文 PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0);version = pi.versionName; 待查实：12PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0); 这里的Flag为0是有问题的吧，源码解释Flag包括：GET_ACTIVITIES, GET_GIDS, GET_CONFIGURATIONS, GET_INSTRUMENTATION, GET_PERMISSIONS, GET_PROVIDERS, GET_RECEIVERS, GET_SERVICES, GET_SIGNATURES, GET_UNINSTALLED_PACKAGES，并且查看源码，所有的Flag没有为0的情况。同时使用0做测试，是得不到versionCode 1.2在里面定义1android:[versionName=&quot;@string/app_versionName](mailto:versionName=%22@string/app_versionName)&quot; 然后在 res/values/strings.xml 里定义一个同名 string item ：1&lt;string name=&quot;app_versionName&quot;&gt;1.1&lt;/string&gt;","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Android 夜间模式实现","date":"2016-04-16T06:08:00.000Z","path":"2016/04/16/android/android夜间模式实现/","text":"一、概述android夜间模式实现分为两大类 重启activity的实现 不重启activity的实现 二、正文2.1 重启activity实现夜间模式【在界面文件中的实现部分】2.1.1 在attrs.xml文件中定义如下属性12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;!--Activity--&gt; &lt;attr name=&quot;rootViewBgColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;buttonBgColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;defaultTextColor&quot; format=&quot;reference|color&quot;/&gt; &lt;!--CardView--&gt; &lt;attr name=&quot;cardViewBgColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;cardViewTextTitleColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;cardViewTextBodyColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;cardViewTextHightLightColor&quot; format=&quot;reference|color&quot;/&gt; &lt;attr name=&quot;cardViewTextExtraColor&quot; format=&quot;reference|color&quot;/&gt;&lt;/resources&gt; 2.1.2 在stytles.xml文件中定义如下属性1234567891011121314151617&lt;style name=&quot;DayTimeModeTheme&quot; parent=&quot;AppTheme.NoActionBar&quot;&gt; &lt;item name=&quot;cardViewBgColor&quot;&gt;#0CB8F6&lt;/item&gt; &lt;item name=&quot;cardViewTextTitleColor&quot;&gt;#DBDBDB&lt;/item&gt;&lt;/style&gt;&lt;style name=&quot;NightTimeModeTheme&quot; parent=&quot;AppTheme.NoActionBar&quot;&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/darken&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/black&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/dark&lt;/item&gt; &lt;item name=&quot;android:textColor&quot;&gt;#DBDBDB&lt;/item&gt; &lt;item name=&quot;android:textColorHighlight&quot;&gt;#F9E81E&lt;/item&gt; &lt;item name=&quot;android:textColorLink&quot;&gt;#242F67&lt;/item&gt; &lt;item name=&quot;android:textColorHint&quot;&gt;#DBDBDB&lt;/item&gt; &lt;item name=&quot;cardViewBgColor&quot;&gt;#18255D&lt;/item&gt; &lt;item name=&quot;cardViewTextTitleColor&quot;&gt;#61809E&lt;/item&gt;&lt;/style&gt; 2.1.3 在所有的界面文件中使用如下代码（以cardView为例）12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt;&lt;android.support.v7.widget.CardView android:id=&quot;@+id/cv_news&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;10dp&quot; app:cardBackgroundColor=&quot;?attr/cardViewBgColor&quot;//这里使用了attr中自定义的属性值 app:cardCornerRadius=&quot;10dp&quot; app:cardElevation=&quot;5dp&quot; app:contentPadding=&quot;10dp&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_title&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_vertical&quot; android:text=&quot;标题&quot; android:textColor=&quot;?attr/cardViewTextTitleColor&quot;//这里使用了attr中自定义的属性值 android:textSize=&quot;14sp&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_body&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;正文正文正文正文正文正文&quot; android:textColor=&quot;?attr/cardViewTextTitleColor&quot;//这里使用了attr中自定义的属性值 android:textSize=&quot;12sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;/android.support.v7.widget.CardView&gt;&lt;/LinearLayout&gt; 2.2 重启activity实现夜间模式【在java代码中的实现部分】2.2.1 使用SharedPreference当前存储主题状态博主自定义了SharedPreferrenceHelper类对“主题存储、主题获取、主题切换”的SharedPreference操作进行了封装 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.neil.dailyzhihu.ui.theme;import android.content.Context;import android.content.SharedPreferences;import com.neil.dailyzhihu.Constant;import com.neil.dailyzhihu.R;public class SharedPreferrenceHelper &#123; public static void settheme(Context context, String theme) &#123; SharedPreferences sp = context.getSharedPreferences(Constant.SHARED_PREFERANCE_NAME, Context.MODE_PRIVATE); SharedPreferences.Editor editor = sp.edit(); editor.putString(Constant.DAY_MODE_THEME, theme); editor.commit(); &#125; public static String gettheme(Context context) &#123; SharedPreferences sp = context.getSharedPreferences(Constant.SHARED_PREFERANCE_NAME, Context.MODE_PRIVATE); return sp.getString(Constant.DAY_MODE_THEME, Constant.DEFAULT_TIME_THEME); &#125; public static void switchAppTheme(Context context) &#123; String value = SharedPreferrenceHelper.gettheme(context); switch (value) &#123; case Constant.NIGHT_TIME_THEME: SharedPreferrenceHelper.settheme(context, Constant.DAY_TIME_THEME); break; case Constant.DAY_TIME_THEME: SharedPreferrenceHelper.settheme(context, Constant.NIGHT_TIME_THEME); break; &#125; &#125; public static int getAppTheme(Context context) &#123; String value = SharedPreferrenceHelper.gettheme(context); switch (value) &#123; case Constant.NIGHT_TIME_THEME: return R.style.DayTimeModeTheme; case Constant.DAY_TIME_THEME: return R.style.NightTimeModeTheme; &#125; return R.style.DayTimeModeTheme; &#125;&#125; 2.2.2 需要切换日夜间模式的activity中的实现 使用夜间模式功能的activity中加入成员变量 1private String theme = Constant.DEFAULT_TIME_THEME; onCreate方法中加入如下代码 12345678@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); int themeRes = SharedPreferrenceHelper.getAppTheme(this); theme = SharedPreferrenceHelper.gettheme(this); setTheme(themeRes); etContentView(R.layout.activity_main);&#125; activity中添加如下成员方法 12345678private void reload() &#123; Intent intent = getIntent(); overridePendingTransition(0, 0);//不设置进入退出动画 intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION); finish(); overridePendingTransition(0, 0); startActivity(intent);&#125; 在需要切换日/夜间模式的地方使用reload();方法 -————-分割线—————- 2.3 不重启activity实现夜间模式下次更新","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"解决 Android Studio 新建项目时只有一个 drawable 目录的问题","date":"2016-04-14T12:53:54.000Z","path":"2016/04/14/android/android-studio-解决android-studio新建项目时只有一个drawable目录的问题/","text":"Android Studio 默认新建 Module 时，只新建一个 drawable 目录，并不会新建适配不同分辨率的 drawable 目录。但其实，这是可以设置的。有以下两种方法 一、概述Android Studio 默认新建 Module 时，只新建一个 drawable 目录，并不会新建适配不同分辨率的 drawable 目录。但其实，这是可以设置的。有以下两种方法： 二、方法介绍2.1 方法1 进入 [androidstudio安装目录]/plugins/android/lib/templates/gradle-projects/NewAndroidModule/root/res 目录 在此目录下，新建你要初始化的文件夹（drawable-hdpi 等文件夹）**这一点可以参照同目录下的 mipmap 各种分辨率的 mipmap 目录 你可以在各个文件夹中放一张默认的图，以后每次新建项目时，就会有类似 mipmap 目录下的 ic_launcher.png 回退到 [androidstudio安装目录]/plugins/android/lib/templates/gradle-projects/NewAndroidModule 目录，打开 recipe.xml.ftl 文件 在 recipe.xml.ftl 中增加如下的代码，位置见图（依据你要初始化的目录来添加相应代码）123456&lt;copy from=&quot;root/res/drawable-hdpi&quot; to=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-hdpi&quot; /&gt;&lt;copy from=&quot;root/res/drawable-xhdpi&quot; to=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-xhdpi&quot; /&gt;&lt;copy from=&quot;root/res/drawable-xxhdpi&quot; to=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-xxhdpi&quot; /&gt; 随后你就可以在新建的Module中看到初始化的drawable目录 2.2 方法2与方法1的区别在于：不能在目录中添加初始化的图片 进入 [androidstudio安装目录]/plugins/android/lib/templates/gradle-projects/NewAndroidModule/recipe.xml.ftl 文件 添加如下代码，位置见图123&lt;mkdir at=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-hdpi&quot; /&gt;&lt;mkdir at=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-xhdpi&quot; /&gt;&lt;mkdir at=&quot;$&#123;escapeXmlAttribute(resOut)&#125;/drawable-xxhdpi&quot; /&gt; {% image http://images2015.cnblogs.com/blog/797098/201604/797098-20160414203911504-1281851192.png '' '' %} 随后你就可以在新建的Module中看到初始化的drawable目录 说明：当然，通过类似的方式我们还可以在创建 Module 的时候做很多事情，比如： 在 colors.xml 文件中生成常用颜色 在 build.gradle 文件中生成自定义配置 在 .gitignore 文件中生成自定义忽略配置等等… 三、参考文章：http://liukun.engineer/2016/04/10/Android-Studio-advanced-configuration/","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"多种方式实现在 Android 手机上抓包","date":"2016-04-11T16:28:00.000Z","path":"2016/04/12/android/多种方式实现在android手机上抓包/","text":"一、素材来源https://www.zhihu.com/question/20467503 二、方法整理2.1 方式1：Packet Capture + HTTP Injector使用于在手机端操作，可满足简单需求，无需root 2.2 方式2：tcpdumphttps://www.zhihu.com/question/20467503/answer/86760222答案里演示的感觉很极客，界面就是一个命令行的窗口，但是看起来好高端的样子~~~下次有机会，给大家亲测一下http://www.trinea.cn/android/tcpdump_wireshark/ 2.3 方式3：Fiddler优点 无需root 功能强大 操作简单 界面不丑http://www.trinea.cn/android/android-network-sniffer/ 2.4 方式4: wireshark + wifi分享软件操作步骤 下载 Wireshark ，支持800多种通讯协议 无线网卡建立虚拟AP 连接wifi，直接用wireshark抓包，一切通讯尽收眼底 2.5 方式5: 大神写的app我写了一个软件，你可以安装一下，启动抓包完成后通过邮件把码流发给你，你用wireshark打开就可以看到了。下载地址为http://apk.gfan.com/Product/App328379.html 2.6 方式6: Stetho + Chrome dev toolshttp://facebook.github.io/stetho/https://www.youtube.com/watch?v=iyXpdkqBsG8 2.7 方式7: charlesmac上推荐使用 2.8 仅供参考的方法作者：独奏链接：https://www.zhihu.com/question/20467503/answer/22758575来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 Android手机需要先获得root权限。一种是否获得root权限的检验方法：安装并打开终端模拟器（可通过安卓市场等渠道获得）。在终端模拟器界面输入su并回车，若报错则说明未root，若命令提示符从$变#则为rooted； 如果Android手机尚未root，可通过superoneclick或其它方法进行root处理（需要先安装Microsoft .NET Framework）。Superoneclick刷root权限教程：（http://soft.shouji.com.cn/news/501.shtml） 需要先获得 Android SDK 需要获得tcpdump软件，获取地址(http://www.strazzere.com/android/tcpdump) 抓包步骤 将Android手机与电脑USB相连，打开windows命令提示符窗口 将tcpdump程序copy至android手机（该命令前面那个目录文件为本地地址，后面那个目录为目的手机端地址） C:\\android-sdk-windows\\platform-tools&gt; adb push c:/tcpdump /data/local/tcpdump 修改tcpdump的权限 12$ C:\\android-sdk-windows\\platform-tools&gt; adb shell $ chmod 777 /data/local/tcpdump 进入root权限 12$ C:\\android-sdk-windows\\platform-tools&gt; adb shell $ su 在运行su指令后，手机终端桌面会出现相应提示信息以确认您对root操作的认可。 运行tcpdump，输入以下命令启动抓包。 /data/local/tcpdump -p -vv -s 0 -w /sdcard/capture.pcap 在手机端执行相应需要进行抓包分析的操作，执行完成后在命令提示符窗口执行Ctrl+C中断抓包进程 将抓包结果复制至本地（前面那个目录为手机端地址，后面那个目录为本地地址） $ C:\\android-sdk-windows\\platform-tools&amp;gt;adb pull /sdcard/capture.pcap c:/ 使用Wireshark等工具查看抓包文件capture.pcap","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://cnneillee.github.io/tags/network/"}]},{"title":"HTTP协议之状态码","date":"2016-04-11T15:49:00.000Z","path":"2016/04/11/others/http协议之状态码/","text":"HTTP协议之状态码","tags":[{"name":"http","slug":"http","permalink":"http://cnneillee.github.io/tags/http/"}]},{"title":"抓包教程","date":"2016-04-11T15:47:00.000Z","path":"2016/04/11/others/抓包教程/","text":"网络方面的博客：http://www.cnblogs.com/TankXiao wireshark Wireshark基本介绍和学习TCP三次握手 wireshark抓包图解 TCP三次握手/四次挥手详解 Fiddler 教程(来自tankxiao)由于tankxiao的cnblogs中，此系列教程有部分确实，故贴上转载的文章地址 Fiddler (一) 教程(http://kb.cnblogs.com/page/130367/#introduce)Fiddler (二) Script用法(http://www.lxway.com/515642291.htm)Fiddler (三) Composer创建和发送HTTP Request(http://www.lxway.com/49608022.htm)Fiddler (四)实现手机的抓包(http://www.tuicool.com/articles/UFji6f)、android(http://blog.csdn.net/forlong401/article/details/23538951)Fiddler (五)Mac下使用Fiddler(http://www.cnblogs.com/TankXiao/archive/2013/04/18/3027971.html)Fiddler (六) 最常用的快捷键(http://www.th7.cn/Program/php/201409/282373.shtml)Fiddler (七) AutoResponder帮助前端工程师快速调试(http://www.cnblogs.com/TankXiao/p/4999567.html)","tags":[{"name":"network","slug":"network","permalink":"http://cnneillee.github.io/tags/network/"}]},{"title":"Android API 汇集","date":"2016-04-11T12:02:00.000Z","path":"2016/04/11/android/android-api汇集/","text":"参考文章： 知乎-想写个 App 练手，有什么有趣的 API 接口推荐吗？ 使用 Espresso 和 Dagger 测试网络服务 http://developer.simsimi.com/apps ProjectOxford-ClientSDK 请问如何抓取知乎专栏？ 聚合数据开启数据免费时代 API 设计的七宗罪","tags":[{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"},{"name":"api","slug":"api","permalink":"http://cnneillee.github.io/tags/api/"}]},{"title":"LruCache","date":"2016-04-11T11:02:00.000Z","path":"2016/04/11/android/lrucache/","text":"参考文章： LruCache源码解析","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"Fragment","date":"2016-04-11T10:57:00.000Z","path":"2016/04/11/android/fragment/","text":"fragment与activity的关系参考文章：Android 使用 Fragment 构建 Presenter 重构方面 细化视图／布局 细化逻辑（Activity 中的逻辑） 无限细化 MVP用于构建Presenter好处： 能够同步 Activity 的生命周期，在生命周期内进行逻辑操作 能够很好地处理系统重建视图时（例如屏幕旋转）的现场恢复问题 它也能够在系统重建视图时不销毁实例，保留子属性，并且不打断正在进行的任务。（setRetainInstance(true)） Fragment 的现场恢复文章内有详细介绍","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"}]},{"title":"科普指纹识别","date":"2016-04-11T10:40:00.000Z","path":"2016/04/11/daily/科普指纹识别/","text":"指纹识别发展史参考文章：细聊指纹识别发展史 应用实例 西门子 1998 年(指纹技术来自 Bromba 公司,世界上首款搭载指纹识别技术的手机，只是一部原型机，并没有量产) SAGEM MC 959 2000 年(意法半导体的指纹技术) Handspring Visor 2001 年(搭载的指纹识别模块来自 FingerPrint Card（PFC）) 富士通 F505i 2003 年(技术来自后来名声大震的 Authentec) MOTO MB860 2011 年(第一部具备指纹识别的大屏智能机,指纹技术同样来自 AuthenTec) iPhone5s 2013 年 9 月(首款搭载正面按压式指纹识别的手机) 技术支持 FPC 和 AuthenTecFPC 来自瑞典，老牌指纹识别技术公司，成立于 1997 年。AuthenTec 来自美国，也是一家老牌指纹识别技术公司，成立于 1998 年。 12年初，AuthenTec 终于研发出来了正面按压式的指纹技术，并且向LG、富士、三星、诺基亚、苹果等大客户展示，然而最终只有苹果感兴趣。 现在好了，AuthenTec 被苹果这么一收购，从今往后，FingerPrint Card 在指纹识别的市场上就是直挂云帆济沧海。 悲情英雄——富士通一直采用 AuthenTec 的技术，由于采用刮擦式，指纹功能叫好不叫座 HTC One Max 2012 年 10 月Max 的指纹技术来自美国的老牌触控 IC 供应商 Synaptics（Validity），依旧是刮擦式，而且还是在背面 魅族 MX4 Pro 2014 年 12 月技术支持Goodix（汇顶） 三星 S6 2015 年 4 月使用的技术仍然是三星老相好 Synaptics 魅蓝 note3 2016 年 4 月","tags":[]},{"title":"Python 使用 MySQL 数据库","date":"2016-04-10T12:41:00.000Z","path":"2016/04/10/scripts/python使用mysql数据库/","text":"MySQL-python下载http://www.codegood.com/archives/129 破解SQLYog30天试用方法开始-运行-regedit ，进入注册表，在 \\HEYK_CURRENT_USER\\Software{FCE28CE8-D8CE-4637-9BC7-93E4C0D407FA}下的 InD 保存着 SQLyog 的使用天数，十进制值 2455140～2455131 表示 30～1 天，该区间外的数值应该均为0天，所以每次可以更改该数值便可一直试用。删除该项，在重启SQLyog后注册表中会重新生成，使用期为30天。","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"},{"name":"database","slug":"database","permalink":"http://cnneillee.github.io/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"http://cnneillee.github.io/tags/mysql/"},{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"Eclipse 中添加 PyDev 插件","date":"2016-04-10T10:19:00.000Z","path":"2016/04/10/others/eclipse中添加pydev插件/","text":"一、思路 启动 Eclipse, 点击 Help-&gt;Install New Software… 在弹出的对话框中，点 Add 按钮。 Name 中填: Pydev, Location 中填 http://pydev.org/updates… 按要求执行下一步操作，如遇错误，则重装。若安装成功，则重启即可 二、参考文章Python自动化测试 (一) Eclipse+Pydev搭建开发环境","tags":[{"name":"python","slug":"python","permalink":"http://cnneillee.github.io/tags/python/"}]},{"title":"UniversalAndroidImageLoader出现异常 Unable to resolve host \"https\" No address associated with host","date":"2016-04-04T16:33:00.000Z","path":"2016/04/05/android/universalimageloader出现异常：imageloader-unable-to-resolve-host-https-no-address-associated-with-host/","text":"一、问题描述UniversalAndroidImageLoader出现异常：ImageLoader:Unable to resolve host &quot;https&quot;No address associated with host使用 ImageLoader 时，出现如下错误，始终加载图片错误，显示 img_error 的图片 UniversalAndroidImageLoader 出现异常： ImageLoader: Unable to resolve host &quot;https&quot;: No address associated with host E/ImageLoader: failed to connect to https/183.221.250.11 (port 443) after 5000ms: isConnected failed: ECONNREFUSED (Connection refused) java.net.ConnectException: failed to connect to https/183.221.250.11 (port 443) after 5000ms: isConnected failed: ECONNREFUSED (Connection refused) at libcore.io.IoBridge.isConnected(IoBridge.java:267) at libcore.io.IoBridge.connectErrno(IoBridge.java:191) at libcore.io.IoBridge.connect(IoBridge.java:127) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:188) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:461) at java.net.Socket.connect(Socket.java:918) at com.android.okhttp.internal.Platform.connectSocket(Platform.java:174) at com.android.okhttp.Connection.connect(Connection.java:152) at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:282) at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:216) at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:391) at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:341) at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:509) at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105) at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25) at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStreamFromNetwork(BaseImageDownloader.java:117) at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStream(BaseImageDownloader.java:88) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.getImageStream(BaseImageDecoder.java:98) at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode(BaseImageDecoder.java:74) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage(LoadAndDisplayImageTask.java:265) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap(LoadAndDisplayImageTask.java:238) at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run(LoadAndDisplayImageTask.java:136) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587) at java.lang.Thread.run(Thread.java:818) Caused by: android.system.ErrnoException: isConnected failed: ECONNREFUSED (Connection refused) at libcore.io.IoBridge.isConnected(IoBridge.java:252) at libcore.io.IoBridge.connectErrno(IoBridge.java:191)? at libcore.io.IoBridge.connect(IoBridge.java:127)? at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:188)? at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:461)? at java.net.Socket.connect(Socket.java:918)? at com.android.okhttp.internal.Platform.connectSocket(Platform.java:174)? at com.android.okhttp.Connection.connect(Connection.java:152)? at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:282)? at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:216)? at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:391)? at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:341)? at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:509)? at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)? at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)? at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStreamFromNetwork(BaseImageDownloader.java:117)? at com.nostra13.universalimageloader.core.download.BaseImageDownloader.getStream(BaseImageDownloader.java:88)? at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.getImageStream(BaseImageDecoder.java:98)? at com.nostra13.universalimageloader.core.decode.BaseImageDecoder.decode(BaseImageDecoder.java:74)? at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.decodeImage(LoadAndDisplayImageTask.java:265)? at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.tryLoadBitmap(LoadAndDisplayImageTask.java:238)? at com.nostra13.universalimageloader.core.LoadAndDisplayImageTask.run(LoadAndDisplayImageTask.java:136)? at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)? at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)? at java.lang.Thread.run(Thread.java:818)? 二、错误解决2.1 添加权限（权限未添加）&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; 2.2 已添加权限，但仍旧出现异常 android进入应用管理，清除缓存，清除数据。 或者直接下载该引用，重新上载。即可解决问题。 2.3 出现问题的原因以后将做探讨","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"imageloader","slug":"imageloader","permalink":"http://cnneillee.github.io/tags/imageloader/"}]},{"title":"ButterKnife 简介及 Generate ButterKnife Injections 不出现的问题解决","date":"2016-03-22T14:01:00.000Z","path":"2016/03/22/android/butterknife简介及generate-butterknife-injections不出现的问题解决/","text":"一、概述Butterknife 是一款 Android Studio 的功能强大插件。有了它，你几乎可以和 findViewById 说 byebye 了。 二、使用Github 地址：https://github.com/avast/android-butterknife-zelezny 三、问题解决Generate ButterKnife Injections 不出现的问题解决 下载后重启须重启as，方生效 打开 Gradle App，添加 compile &#39;com.jakewharton:butterknife:7.0.1&#39; 依赖 请务必将鼠标光标悬停在 R.layout.xxx 处，点击右键！请详细参阅 https://github.com/avast/android-butterknife-zelezny","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"},{"name":"buterknife","slug":"buterknife","permalink":"http://cnneillee.github.io/tags/buterknife/"}]},{"title":"Android 网络连接","date":"2016-03-20T12:36:30.000Z","path":"2016/03/20/android/android网络连接/","text":"Android 手机的几种网络获取网络状态 一、Android 手机的几种网络MOBILE(数据流量)WIFI(wifi) 二、获取网络状态2.1 相关类：12345ConnectivityManager：(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo：connectionManager.getActiveNetworkInfo(); 2.2 NetworkInfo 的关键方法getDetailedState()：获取详细状态。getExtraInfo()：获取附加信息。getReason()：获取连接失败的原因。getType()：获取网络类型(一般为移动或Wi-Fi)。getTypeName()：获取网络类型名称(一般取值“WIFI”或“MOBILE”)。isAvailable()：判断该网络是否可用。isConnected()：判断是否已经连接。isConnectedOrConnecting()：判断是否已经连接或正在连接。isFailover()：判断是否连接失败。isRoaming()：判断是否漫游 2.3 几种上网方式当用 WIFI 上的时候，getType 是WIFI，getExtraInfo 是空的。当用 MOBILE（数据流量）上的时候，getType 是 MOBILE 。用移动 CMNET 方式，getExtraInfo的值是 cmnet。用移动 CMWAP 方式，getExtraInfo的值是 cmwap，但是不在代理的情况下访问普通的网站访问不了。用联通 3gwap 方式，getExtraInfo的值是 3gwap。用联通 3gnet 方式，getExtraInfo的值是 3gnet。用联通 uniwap 方式，getExtraInfo的值是 uniwap。用联通 uninet 方式，getExtraInfo的值是 uninet。 以上参考自http://www.inthumb.com/c/learnandroid/article?id=576&amp;category_id=4.1http://www.eoeandroid.com/thread-167333-1-1.html?_dsign=6c32dbf4http://www.cnblogs.com/qingblog/archive/2012/07/19/2598983.html 2.4 特别的CMCC[问题来源] http://www.eoeandroid.com/thread-182792-1-1.html?_dsign=d7ad2a6a[解决方案] http://zhidao.baidu.com/question/560189543835675044.html?fr=iks&amp;word=android+%C5%D0%B6%CFcmcc&amp;ie=gbk当连接上但却未登录CMCC时： LOG日志打印：连接不可达到 123456789101112131415161718192021222324252627282930class IpAddrThread extends Thread &#123; @Override public void run() &#123; try &#123; Process p = Runtime.getRuntime().exec(&quot;ping -c 3 -w 5 &quot; + &quot;202.108.22.5&quot;); int status = p.waitFor(); if (status == 0) &#123; Log.e(&quot;STATUS&quot;,&quot;连接正常&quot;); // pass // mPingIpAddrResult = &quot;连接正常&quot;; &#125; else &#123; Log.e(&quot;STATUS&quot;,&quot;连接不可达到&quot;); // Fail:Host unreachable // mPingIpAddrResult = &quot;连接不可达到&quot;; &#125; &#125; catch (UnknownHostException e) &#123; Log.e(&quot;STATUS&quot;,&quot;出现未知连接&quot;); // Fail: Unknown Host // mPingIpAddrResult = &quot;出现未知连接&quot;; &#125; catch (IOException e) &#123; Log.e(&quot;STATUS&quot;,&quot;连接出现IO异常&quot;); // Fail: IOException // mPingIpAddrResult = &quot;连接出现IO异常&quot;; &#125; catch (InterruptedException e) &#123; Log.e(&quot;STATUS&quot;,&quot;连接出现中断异常&quot;); // Fail: InterruptedException // mPingIpAddrResult = &quot;连接出现中断异常&quot;; &#125; &#125; &#125; 经过几次尝试，整理出下表数据 networkTable","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"network","slug":"network","permalink":"http://cnneillee.github.io/tags/network/"}]},{"title":"BaseAdapter 数据已经加载但 ListView 不显示的解决方案","date":"2016-03-19T17:49:51.000Z","path":"2016/03/20/android/baseadapter数据已经加载但是listview不显示的解决方案/","text":"BaseAdapter 数据已经加载，但是 ListView 不显示的解决方案 一、问题在编码过程中，发现：明明已经将数据加载到了 Adapter 里了，并且调用了 adapter 的 notifyDataSetChanged()，但是 ListView 就是不显示结果。 二、解决方案填充数据前，最好 clear 一下 mAdapter ，避免加载到重复的数据项12mAdapter.notifyDataSetChanged();lv.setAdapter(mAdapter);","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"sollution","slug":"sollution","permalink":"http://cnneillee.github.io/tags/sollution/"}]},{"title":"Android Studio 的下载及更新","date":"2016-03-18T07:50:38.000Z","path":"2016/03/18/android/android-studio的下载及更新/","text":"截至本文撰写时，as已经更新到2.1 Preview3了。在google频繁更新迭代过程中，开发者的更新脚步也不能滞后呀！但是，中国特殊的国情、AS的版本不稳定等问题，造成AS的更新遇上不小障碍。正是基于这几点，编者决定撰写一篇更新教程，以免开发者的Android开发受阻于工具更新阶段。 一、 Android Studio 概述 Android Studio 是 Google 官方在 2013 Google I/O 大会（2013 年5月）上发布的全新 Andrid 开发 IDE（基于 Intellij IDEA），在 2014 年12 月发布第一个稳定版（1.0），目前最新版本为1.2 Beta 3；依托与 Intellij IDEA，它更智能，提示功能更强，默认使用 Gradle 构建，布局文件实时预览等等。 二、 Android Studio 下载更新方法2.1 下载2.1.1 官网下载官网网址：[http://tools.android.com/download/studio][http://tools.android.com/download/studio]需要翻墙。关于翻墙：由于这一点不是本文的重点，所以，请不会翻墙、但是想要直接上官网下载的朋友 自行[百度][http://www.baidu.com] 2.1.2 国内镜像更新略有延迟网址： [https://github.com/inferjay/AndroidDevTools][https://github.com/inferjay/AndroidDevTools] [http://www.android-studio.org/][http://www.android-studio.org/] 2.2 更新2.2.1 直接在AS的菜单栏选择 help-&gt;Check for updates2.2.2 上一种方法失败时： 检查 Http Connection 使用增量包具体方法：请参阅此博客-[http://blog.csdn.net/xuqingfeng77/article/details/49767651][http://blog.csdn.net/xuqingfeng77/article/details/49767651] ~\\androidstudio&gt; java -classpath D:\\a\\AI-141.2117773-141.2180789-patch-win.jar com.intellij.updater.Runner install . Android Studio 安装目录下，进入命令行，键入 java -classpath 增量包全路径 com.intellij.updater.Runner install . Attention： 最好将增量包放在非 Android Studio 安装目录的纯净目录下 install后面的点切莫忘掉 此过程分两步，validating update + backing...,耐心等待","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"}]},{"title":"近期(2016.3.8-2016.3.18)技术工作总结","date":"2016-03-17T10:26:24.000Z","path":"2016/03/17/daily/近期技术工作总结/","text":"近期(2016.3.8-2016.3.18)技术工作总结近期做了一个小项目。从某种意义上讲，这个项目破产了。先就这个问题进行一定的总结 一、描述近期接了一个学长的小项目，负责开发一个Android平台上的、带扫码打印功能的app。 时间折腾得很久，项目进度很慢。 二、原因归结起来有以下几个原因： 需求不明确学长是负责整个项目的运营。但是丝毫不懂技术，有种“你跟我谈技术，我跟你聊情怀” 的感觉。因此，提出来的需求很不明确。在询问需求的时候，都是以“你们想一下”、“都可以”、“你们如果有多个想法，可以做几个版本，在不同的圈子里进行投放，让用户来投票，咱们再统计那种比较好”…之类的话搪塞过去。 管理有问题 Android 团队内：学长在我们几个人之间，算是指定了一位同学作为负责人吧。一开始以为这个负责人技术比较扎实。直到真正写代码的时候才发现，这货啥都不会。然后网络交互、部分前端都我一人包了。插一句，这哥们儿，写个 UI ，想让 TextView center_vertical ，居然想到左右用两个View吧TV挤在中间！！！我的天！！！ 所有团队管理：其他团队我不知道具体内部的情况。但是，在团队与团队间进行交互之际，确实问题很大。web 向 app 提供接口，只给了接口的 collection ，至于文档之类的，什么都没有。在沟通期间，还特别不顺畅，提个问题，好几天才得到答复，而且还是隔着好几重传递的。沟通成本太大。更要命的是， Android 的某个功能开发完毕后，过了几天，再测试的时候，服务器居然把接口给改了！！！返回来的 json 数据解析错误！！！此前并没有给我们任何形式的通知！！！ 缺乏有效的沟通跟前面第二点所提到的，一个问题得一级一级地往上传，回复也是一级一级地向下传递。这就算了，很多事情还不事先通知，老是卡在某个环节，答复总是不下来。 经验不足管理、技术经验都很匮乏。 …(以后想到了再补充) 三、反思诸多方面的问题并不是导致我从团队中离开的最终原因。最终原因是：在团队里看不到希望。看不到整个项目的希望，没有一个文档或者标准来评判整个工作是否完成或者完成得如何，团队太过散漫、慵懒。虽然有一个比较好的 idea ，但是，抱着 idea 睡大觉是没用的，迟早会被别人赶超。 这次项目耽误的时间太多了，时间不是花在项目的推进上，而是沟通！！！虽说初衷也是为了练练手、学习技术和管理，但是，这么多天过去了，我觉得我并没有学到什么，反倒是浪费了不少的时间，裹足不前。 所以，现在就 quit 吧。这周末找学长聊一聊，明确今后技术学习发展的方向。两周内进入某个工作室，在工作室里成长、练习技术！加油！！！","tags":[{"name":"reflecting","slug":"reflecting","permalink":"http://cnneillee.github.io/tags/reflecting/"}]},{"title":"Android Studio 项目与 Github","date":"2016-03-16T13:37:27.000Z","path":"2016/03/16/android/android-studio项目与github/","text":"Android Studio 项目中与 Github 的结合使用 [项目中的哪些文件需要上传至Github？]https://www.zhihu.com/question/37910193#answer-25076950Github 官方推荐的同步忽略文件策略：[Android.gitignore][https://github.com/github/gitignore/blob/master/Android.gitignore] .gradle /local.properties .DS_Store # only needed under mac os /build /captures *.iml .idea *.apk #optional 其中 .idea #ide 相关*.apk #optional 是在系统默认的 .gitignore 文件基础上额外添加的，如果不加 .idea 的话会存在不同开发人员开发机上 .idea/ 下文件不同，导致需要提交的问题。而且经过我和团队小伙伴之间的实践 .idea 目录下的东西 AS 都会自动生成，并不需要提交到仓库中。","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"git/github","slug":"git-github","permalink":"http://cnneillee.github.io/tags/git-github/"}]},{"title":"Android Studio 与 Gradle","date":"2016-03-16T13:33:06.000Z","path":"2016/03/16/android/android-studio与gradle/","text":"Gradle 在 Android Studio 中非常重要，但是 Gradle 常常造成项目 build 失败等各种问题，这里搜罗了关于 Gradle 的配置、更新、使用等各种信息 一、概述来自官网：https://gradle.org/From mobile apps to microservices, from small startups to big enterprises, Gradle helps teams build, automate and deliver better software, faster. 二、配置Android Studio 在第一次新建一个 Gradle 项目时需要下载 Gradle，所以启动很慢（Gradle-bin大约三十几兆），所以我们应该事先帮他下载好。 首先，我们下载好的 gradle-版本号-bin(|all).zip 应该放在哪儿呢。Gradle 有一个 user home，默认是 C:/Users/【你当前的用户名】/.gradle。 这个目录下面有四个子文件夹，我们要放到 wrapper/dists/[gradle-版本号-bin|all]/[一连串乱七八糟的字符的文件夹]/ 。例如，我就把gradle-bin和gradle-all（只需要放一个，all的话，有源码，文档等，好一些）分别放到了 12C:/Users/Leo/.gradle/wrapper/dists/gradle-1.10-all/6vpvhqu0efs1fqmqr2decq1v12C:/Users/Leo/.gradle/wrapper/dists/gradle-1.10-bin/6vpvhqu0efs1fqmqr2decq1v12 两个目录下面。然后启动 Android Studio ，他会自动解压安装（而且优先解压gradle-1.10-all，因为bin那个我发现没有解压他）。至于这个乱码文件夹目录（上面的 6vpvhqu0efs1fqmqr2decq1v12），我的处理是先打开一次 Android Studio ，然后关闭，这个目录就生成了（注意，这个目录每次在发现新的需要下载的版本的时候都会新生成一个随机码文件夹，所以，不要想着把 zip 文件放到上次生成的随机码目录中）。 另外，想知道自己的 Gradle 项目用的是哪个版本（而且还有 all 和 bin 的区分），只需要看项目根目录下面找 gradle/wrapper/gradle-wrapper.properties 这个文件，里面是对应的版本号（Android Studio 就会下这个)，比如文件的内容如下： 123456#Thu Mar 20 19:47:09 GMT 2014distributionBase=GRADLE_USER_HOMEdistributionPath=wrapper/distszipStoreBase=GRADLE_USER_HOMEzipStorePath=wrapper/distsdistributionUrl=http/://services.gradle.org/distributions/gradle-1.10-all.zip 那么你就要准备好去官网下载 gradle-1.10-all.zip 放到上面说的文件夹下面（下 gradle-1.10-bin.zip 是不管用的） 这种方法目前百试不爽，绝对不需要再等待了，等他下载完估计要近一个小时的时间了（想当初我就是打开 .gradle 下面的那个文件夹，看着 gradle**.zip 一点点的下载完成的，慢死了。如果想要验证上面这个方法有没有成功，你就到 .gradle/wrapper/dist/gradle-1.10-all/乱码文件夹/ 下面等着，看他会不会自动解压，只要解压 ，说明就没问题了！","tags":[{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"gradle","slug":"gradle","permalink":"http://cnneillee.github.io/tags/gradle/"}]},{"title":"你可能还不知道的 Hexo 拓展用法 —— Hexo 进阶","date":"2016-03-16T12:46:24.000Z","path":"2016/03/16/hexo/hexo进阶/","text":"Hexo 使用过程中的方法集合： 如何使用 Hexo 写草稿? 如何在本地实现对文章的预览? 一、如何使用Hexo写草稿?http://oomusou.io/hexo/hexo-draft/ Hexo 写文章的过程 Hexo n “文章名字” # 将文章建立在 hexo/_source/_post 的目录中Hexo g # 编译md文章，结果编译在 hexo/public 目录中，形成 Htmlhexo d # 将文章部署上 Github 中 Hexo 可以有类似传统博客的草稿功能，即将文章声明为草稿，待完成后再发布 Hexo n draft “文章名字” # 将文章建立在 hexo/_source/_draft 的目录中[及时 Hexo n/g/d 的其他文章过后，此文章仍旧不会被发布]Hexo publish “文章名字” # 将文章从 hexo/_source/_draft 移入 hexo/_source/_post中，之后便跟普通文章一样被编译、部署Hexo server –draft # 可在浏览器上实时预览草稿文章 说明：可手动将草稿跟普通文章在两个目录间剪切粘贴，使得其性质在两者之间转换 二、如何在本地实现对文章的预览？ 新建文章 Hexo n &quot;文章名&quot; generate 文章 Hexo g &quot;文章名&quot; 本地发布文章 Hexo server 浏览器查看文章 默认为 http://localhost:4000","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cnneillee.github.io/tags/hexo/"}]},{"title":"博客搜罗","date":"2016-03-16T12:39:37.000Z","path":"2016/03/16/others/博客搜罗/","text":"搜罗好的技术博客 1、[干货集中营][http://gank.io/]-每日更新2、[mthli][http://mthli.github.io/]-更新慢，可以慢慢看3、[droidyue][http://droidyue.com/] 开发人员如何选机？ 买的是Thinkpad，最近总结出了几点：1、可以考虑买MacBook主要是可以做ios开发2、内存要大：最好是买上16g的，之前买了两根4g的，现在平时用起来，分分钟占用上80%","tags":[{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"}]},{"title":"Android 开发环境搭建","date":"2016-03-16T09:34:28.000Z","path":"2016/03/16/android/android开发环境搭建/","text":"android studio下载介绍android SDK介绍、获取、更新 一、IDE 下载及安装首先进行集成开发环境（IDE）的下载。推荐使用 Android Studio 这款 IDE 进行开发。 1.1 下载路径： 需要翻墙 –&gt; developer.android官网下载无需翻墙 –&gt; android-studio中文社区(官网) 1.2 Android Studio 下载后无需安装 下载后找到 studio.exe [32位操作系统]， studio64.exe [64位操作系统] 这两个可执行文件，这两个可执行文件就是软件的入口 二、Android SDK2.1 用途：它是 Android 开发的重要开发包，Android Studio 只是集成开发环境（IDE），SDK才是真正的灵魂。 类比 Java 开发环境的搭建： Android &lt;==&gt; Java JDK &lt;==&gt; SDK Eclipse &lt;==&gt; Android Studio 2.2 获取方式： 1、Android Studio 下载官网上可选与 Android Studio 一同下载 2、Android Studio 中文组也提供了 SDK 的下载地址 2.3 更新：由于 Android SDK 是 Android 应用软件开发包，针对不同的 Android 版本需要下载相应的 SDK 类比书包和书：上学肯定要带书 [Android 应用软件开发需要具体版本的 SDK 支持]但是书要用书包来装 [具体版本的 SDK 放在 Android SDK 内]上什么样的课，就得带什么课的书 [想要开发那个版本的应用就得下载相应版本的 SDK] 更新途径： 1、android-studio中文组网站 有提供更新包及使用方法 2、androiddevtools网站 提供在 Android SDK 上设置镜像代理，从而下载更新，跟用VPN差不多.网站上也附了更新方法 上面的两个网站里也有相关的学习android资料，有时间可以看一哈","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"},{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"}]},{"title":"Java 开发环境搭建教程","date":"2016-03-16T09:02:23.000Z","path":"2016/03/16/java/java开发环境搭建教程/","text":"不同系统、不同版本下的 Java 开发环境搭建教程。 一、概述1.1 区分 JDK 与 JREJDK，java development kit，即是 Java 开发套件。JRE，java runtime environment，即是 Java 运行时环境。 二者均含运行 Java 字节文件（.class）所必需的 JVM（Java Virtual Machine），因此均能完成 Java 程序的运行工作。 由于 JRE 的设计宗旨即是运行 Java 字节码，而非编译 Java 源文件（.java）。JDK 的设计宗旨则是开发，包含 源文件的编译，字节码文件的执行。 “屁股决定脑袋”。所以，不难得出 JRE 只含有 JVM，命令上表现为有 java 但是没有 javac；而 JDK 不仅拥有 JVM，还有编译工具及核心类库等。 1.2 Java 的三个版本Java 有三个版本，分别为： Java SE，Standard Edition，是所有基于Java语言开发的基础，该版本主要用于开发桌面应用程序。 Java EE，Enterprise Edition，主要是给出一个开发企业级应用架构的解决方案，同时给出了在这个架构中相关组件以供开发人员使用，例如我们连接数据库所用的JDBC Java ME，Micro Edition，是针对移动设备，嵌入式系统的开发。 1.3 环境变量环境变量是包含关于系统及当前登录用户的环境信息的字符串,一些软件程序使用此信息确定在何处放置文件（如临时文件）。 通常，将某些可执行文件或者存放的目录，配置在环境变量上，那么终端无论位于哪个工作目录下，都能够搜寻到该可执行文件的位置，并执行。 1.4 纯净的目录无中文及中文字符、无空格，且目录的设置有特殊含义，按照一定的规范设置，便于查找及查看的目录 1.5 相对路径、绝对路径：类比地理的参考系，经纬度能够在某个星球范围内唯一确定某个点；而正前方100米的描述则只能在知道当前位置的情况下才能得到目标点 绝对路径：该计算机内能够唯一确定某个位置的路径相对路径：只有在已知参考目录之后，才能据此确定位置的路径 1.6 系统Windows 系统与 Linux 系统安装 JDK 的过程区别较大。 同时，对于 Linux 系统来说，不仅仅可以安装 Oracle 版本的 JDK，还能安装 OpenJDK 版本的 JDK。 二者（Oracle-JDK 与 OpenJDK）有一定的渊源。 Java 在诞生之初的很长一段时间，一直是属于一个历史性的伟大公司 —— SUN 公司的。随后，SUN 公司被 Oracle 收购。同时，Oracle 宣告不再开源 Java 源代码。为应对此种状况，社区接手 SUN 公司被收购前 Java 源代码，并以此为基础进行开发和版本迭代，命名为 OpenJDK。 OpenJDK 与 Oracle-JDK 在功能上几乎没有区别。 二、Windows 系统安装 JDK2.1 下载Java SE 下载的地址 –&gt; http://www.oracle.com/technetwork/java/javase/downloads/index.html 根据你的系统，选择对应的安装包下载。 注意： Oracle 的官网上，单纯的 Java 指的是运行环境，并非 JDK，请认准 Java SE。 选择与你系统兼容的版本进行安装。 64 位操作系统能够安装并使用 32 位的软件，但 32 位的系统无法运行 64 位的软件 2.2 JDK 安装 安装包内找到可执行文件(jdkxxxx.exe) 点击可执行文件，点选下一步【安装目录选择较为纯净的目录】 安装目录很重要务必记住【最好拷贝在记事本中，安装结束后若环境变量未配置好，则要用到此目录】 出现 JRE 等工具选择下载时，可下也可不下 2.3 JDK 安装正确检查cmd下，分别键入以下三个命令： $ java $ javac $ java -version 若无错误信息，则说明环境变量已经配置成功若错误信息，则还需重新配置环境变量 2.4 Java 环境变量配置未自动配置成功的情况下须完成此步骤 主要三个变量（后二者可基于第一个，设置为相对目录(%JAVA_HOME%目录)） JAVA_HOME，可选，设置此目录作用是作为以下两个变量的参考目录jdk 的安装目录（例如 D:\\Java\\jdk1.6.0_12） CLASSPATH，指向 java 的类库，注意添加一个 “.” 表示当前目录.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar PATH，指向 java\\javac 可执行文件的目录*%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin* 也可只设置两个变量（但是这两个变量必须设置其绝对路径） 三、Linux 系统安装 JDK3.1 下载 JDK需要注意的是，你可以使用 apt-get 进行命令行下的安装（“在线安装”），也可以选择（“离线安装”） 如果你选择“离线安装”，那么此步骤与 2.1 类似。倘若你选择在线安装，可跳过此步骤。 注意：OpenJDK没有离线安装这一说。 3.2 安装 JDK3.2.1 离线安装使用如下命令进行解压即完成安装步骤。1$ sudo tar zxvf ./jdk-7-linux-i586.tar.gz -C [安装目录] 3.2.2 在线安装安装 OpenJDK，在命令行执行如下命令：123456$ sudo apt-get install default-jdk # 或者$ sudo add-apt-repository ppa:openjdk-r/ppa $ sudo apt-get update$ sudo apt-get install openjdk-7-jdk 安装 OracleJDK，在命令行执行如下命令： 123456 # 设置 PPA$ sudo add-apt-repository ppa:webupd8team/java$ sudo apt-get update # 安装 JDK 8，其他版本（6、7）替换数字即可$ sudo apt-get install oracle-java8-installer 如果你安装了多个版本的 JDK，你可以在多个版本间进行切换 $ update-alternatives --config java $ update-alternatives --config javac 3.3 配置环境变量Linux 系统下，你可以有三种方式作为选择。 全机模式（推荐） 用户模式（推荐） 终端模式（不推荐，退出终端即失效） 3.3.1 全机模式你可以将环境变量配置在系统文件 /etc/profile 中。那么，用户在终端执行 Java 命令时，如果终端、用户模式都未被配置，那么则会采用系统的 Java 环境变量。 JDK 安装目录（JAVA_HOME）可能有所不同，最好检查一遍，修改成你自己的 JAVA 安装目录。 在 /etc/profile 文件末尾添加如下内容: 1234 #set jdk environment export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_21export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH 然后，再在终端执行如下命令，使系统加载修改后的配置文件。1$ source /etc/profile 3.3.2 用户模式与 3.3.1 类似，但是此时更改的文件是 ~/.bashrc1$ source ~/.bashrc 3.3.3 终端模式这种方式，只需在终端执行如下命令即可，但是它只在本终端生效，一旦你关闭本终端（即命令行窗口）或者开启另一终端（即命令行窗口），那么这种方式配置的即会立即失效。 JDK 安装目录（JAVA_HOME）可能有所不同，最好检查一遍，修改成你自己的 JAVA 安装目录。 123$ export JAVA_HOME=/usr/share/jdk1.6.0_14 $ export PATH=$JAVA_HOME/bin:$PATH $ export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 3.4 JDK 安装正确检查与 2.3 相同。 你还可以尝试如下命令，以查看你的 Java 安装路径：1$ echo JAVA_HOME","tags":[{"name":"setup","slug":"setup","permalink":"http://cnneillee.github.io/tags/setup/"},{"name":"java","slug":"java","permalink":"http://cnneillee.github.io/tags/java/"}]},{"title":"AAPT err(Facade for ......): libpng error: Not a PNG file.","date":"2016-03-15T11:00:15.000Z","path":"2016/03/15/android/Android-Studio-AAPT-err-Facade-for-libpng-error-Not-a-PNG-file/","text":"一、问题成因及解决过程某日，在 Android 项目中添加了一张图片后，项目构建不成功，并报错 AAPT err(Facade for ......): libpng error: Not a PNG file. 。经过一番折腾，我最终发现，引入的那张图片的格式为 PNG 但文件后缀为 jpg ，这导致 Android Studio 的 AAPT 构建出错。我将文件后缀改回 png 后，项目正常运行。 发现问题的过程： 首先，明确是图片的问题 其次，锁定了某个文件，原因：该文件图片比较大，但是后缀却是jpg 按常识来看，png 能够用于无损压缩，文件一般比较大；jpg 常用于有损压缩，文件大小一般相对较小。 所以果断断定是此文件的问题，然后改了后缀，项目成功跑起来 二、区分图片文件格式的方法这个我们一个启示，一个能够被正常打开并浏览的图片，其图片格式与文件图片后缀名不一定是一致的。因此，开发者在开发过程中要对此类文件进行文件后缀的校正。 2.1 以后缀定格式根据文件的后缀来判断图片文件的格式，这是一种快捷的方法，但不是唯一且准确的方法。 2.2 查看图片文件头图片文件头一般保存着文件的一些 meta-data，其中就包括了图片的格式。以下列举了几种常见文件格式的文件头： JPEG (jpg)，文件头：FF D8 FF E0 00 10 4A 46 49 46 PNG (png)，文件头：89 50 4E 47 0D 0A 1A 0A GIF (gif)，文件头：47 49 46 一般文件内容开头都会有一个文件类型的标记：这是一个PNG文件的内容开头的部分： 可以看到不仅有有文件类型的标记，还有尺寸、色彩类型等等等信息作者：不知语冰链接：https://www.zhihu.com/question/28161418/answer/41174837来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"error","slug":"error","permalink":"http://cnneillee.github.io/tags/error/"},{"name":"android-studio","slug":"android-studio","permalink":"http://cnneillee.github.io/tags/android-studio/"}]},{"title":"TextView 中关于文字溢出的、隐藏显示问题","date":"2016-03-13T03:20:11.000Z","path":"2016/03/13/android/textview中关于文字溢出的隐藏显示问题/","text":"在 TextView 和 EditText 中，可使用 ellipsize 属性来设置文字溢出隐藏，如：“一段很长的文本…” 一、在xml中 android:ellipsize = &quot;end&quot; 省略号在结尾 android:ellipsize = &quot;start&quot; 省略号在开头 android:ellipsize = &quot;middle&quot; 省略号在中间 android:ellipsize = &quot;marquee&quot; 跑马灯 最好加一个约束 android:singleline = &quot;true&quot; 或者 android:maxLines=&quot;1&quot; 二、代码中 tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;END&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;START&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;MIDDLE&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;MARQUEE&quot;)); 最好再加一个约束 tv.setSingleLine(true); 注：EditText 中不支持 marquee 模式！ 对于多行的时候，比如4行，想设置溢出隐藏，可是发现只最多只能显示两行，不知是否 Android 的 bug。 12345&lt;TextView android:maxLines=&quot;4&quot; android:ellipsize=&quot;end&quot; ....../&gt;","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"Dialog 在 show() 方法调用时抛出异常的解决方案","date":"2016-03-12T03:13:54.000Z","path":"2016/03/12/android/dialog在show-方法调用时抛出异常的解决方案/","text":"2016.3.12 Dialog、FATAL EXCEPTION、AndroidRuntime requestFeature() must be called before adding content 一、问题 E/AndroidRuntime: FATAL EXCEPTION: main Process: com.qbeprint, PID: 30954 android.util.AndroidRuntimeException: requestFeature() must be called before adding content at com.android.internal.policy.impl.PhoneWindow.requestFeature(PhoneWindow.java:345) at com.android.internal.app.AlertController.installContent(AlertController.java:238) at android.app.AlertDialog.onCreate(AlertDialog.java:372) at android.app.ProgressDialog.onCreate(ProgressDialog.java:198) at android.app.Dialog.dispatchOnCreate(Dialog.java:415) at android.app.Dialog.show(Dialog.java:303) 二、简述在使用 Dialog 过程中，有自定义 Dialog 的 Layout ，先使用了 Dialog 的 setContentView() 方法，后使用了 show() 方法，造成该错误 三、出现原因setContentView() 必须放在 show() 方法之后 四、解决措施将 setContentView() 放在 show() 执行顺序之后","tags":[{"name":"android","slug":"android","permalink":"http://cnneillee.github.io/tags/android/"},{"name":"exception","slug":"exception","permalink":"http://cnneillee.github.io/tags/exception/"},{"name":"solution","slug":"solution","permalink":"http://cnneillee.github.io/tags/solution/"}]},{"title":"Hexo 基础 —— Hexo 的原理、配置及基本使用方法","date":"2016-03-09T13:09:46.000Z","path":"2016/03/09/hexo/hexo基础/","text":"Hexo 参考文档 Hexo 常见配置及基本使用方法~~ 关于 hexo 进阶用法，参照另一篇文章 你可能还不知道的 Hexo 拓展用法 —— Hexo 进阶 一、概要1.0 先修使用 Hexo 之前，掌握如下工具的基本使用有助于你快速地掌握 Hexo 的基本原理和使用方法。 Github npm markdown 1.1 描述 A fast, simple &amp; powerful blog framework https://hexo.io 1.2 功能轻量、便捷、灵活地搭建你的静态网站。 1.3 理解我从接触 Hexo 到如今，已有一年的时间。在使用 Hexo 的这一年时间里，经历过它给写作带来的轻快感和新鲜感，体验过重装系统几乎丢失大部分数据的绝望，也在几易博客主题中享受到了Hexo 的灵活性，近日还修改了 Github 名折腾了一下。 总的来说，不是新手的我对 Hexo 的原理有一定的理解。 1.4 Hexo 安装后的目录结构 .deploy_git/，类似 github/git 的 .git 目录，存放一些功能性信息 node_modules/，nodejs 的一些库 public/，Hexo 生成的 html 内容 scaffords/，post、draft、page 模板 source/，用户撰写的 MD 源文件 themes/，主题目录 .npmignore，类似 .gitignore 文件，存放 npm 的忽略策略 _config.yml，整个 Hexo 的配置文件 db.json package.json Post.txt 1.4 原理 Hexo n &quot;文章标题&quot; —&gt; source/_post/ 文件夹下，新建名为 “文章标题”（对特殊符号会做处理） 的 MD 文件，文件模板位于 scaffolds/ 文件夹下。 hexo p [layout] —&gt; 发布草稿，将 source/_draft/ 文件夹下的文件挪到 source/_post/ 文件夹下。 hexo g —&gt; 将所有 MD 文件，依照 theme 和 hexo config.yml 下的规则，生成一系列的 html 页面，存放在 public 文件夹下，最终发布到 github 上的也是此文件夹的这些文件，你可以在构建完成后，比较 github 的博客仓库与该目录的区别。 hexo s —&gt; 在本地开启服务器，通过 localhost:4000 预览修改后的结果，注意：此时你对 MD 及配置文件的修改，通过刷新页面都能够即时生效。 hexo d —&gt; 发布，将最近一次在 public 文件夹下生成的内容，发布到 github 上。 二、安装步骤 安装 node.js 安装及配置 Github 安装及配置 Hexo 三、ThemesHexo 有各种主题供使用者进行使用，同时，众多程序员也加入到 Hexo 主题的开发进程中。你可以从你能找到地方下载并安装你喜欢的 Hexo 主题，从而开始你的博客搭建之旅。 本站使用到的主题为 Material。 四、Hexo Front-matterFront-matter 内容被放在正文的头部，用于 Hexo 进行解析。 官网介绍：https://hexo.io/zh-cn/docs/front-matter.htmlHexo 通用的 Front-matter： 参数 描述 默认值 layout 布局 - title 标题 - date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） - categories 分类（不适用于分页） - permalink 覆盖文章网址 - material 主题专属的 Front-matter： 参数 描述 默认值 thumbnail 缩略图地址 - toc 显示 TOC 按钮 true comment 显示评论 true notag 不生成标签按钮 false top 置顶 false 五、常用的 Hexo 命令 hexo n “我的博文” == hexo new “我的博文” #新建文章 hexo p == hexo publish hexo g == hexo generate #生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy #部署 点击查看更多 Hexo 命令 六、参考文章1、使用 GitHub 和 Hexo 搭建免费静态 Blog 2、Hexo 插件安装 3、Hexo 的使用介绍 4、HexoBug 5、使用 GitHub 搭建 Hexo 博客 七、奇淫逸巧关于 hexo 进阶用法，参照另一篇文章 你可能还不知道的 Hexo 拓展用法 —— Hexo 进阶","tags":[{"name":"gathering","slug":"gathering","permalink":"http://cnneillee.github.io/tags/gathering/"},{"name":"hexo","slug":"hexo","permalink":"http://cnneillee.github.io/tags/hexo/"}]},{"title":"Hello World","date":"2016-03-09T09:16:02.959Z","path":"2016/03/09/hexo/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]